import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withCommentMarker((java.lang.Character) '#');
        boolean boolean13 = cSVFormat5.isQuoteCharacterSet();
        boolean boolean14 = cSVFormat5.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
        java.io.File file3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat0.print(file3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str1, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass19 = cSVFormat18.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat30.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat30.withSkipHeaderRecord(true);
        boolean boolean37 = cSVFormat25.equals((java.lang.Object) cSVFormat36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat42.printer();
        cSVPrinter43.flush();
        java.lang.Appendable appendable45 = cSVPrinter43.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter46 = cSVFormat36.print(appendable45);
        cSVFormat14.print((java.lang.Object) cSVFormat18, appendable45, true);
        boolean boolean49 = cSVFormat18.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(appendable45);
        org.junit.Assert.assertNotNull(cSVPrinter46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator();
        cSVParser3.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        java.lang.String[] strArray7 = cSVFormat6.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape(',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode25 = cSVFormat24.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder19.setDuplicateHeaderMode(duplicateHeaderMode25);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder11.setDuplicateHeaderMode(duplicateHeaderMode25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setDuplicateHeaderMode(duplicateHeaderMode25);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode25 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode25.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        boolean boolean31 = cSVParser25.hasTrailerComment();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser25.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser25.getRecords();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNotNull(cSVRecordList33);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('4');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSet17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setHeader(resultSetMetaData39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder36.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder28.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder18.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat4.withHeader(strArray61);
        java.lang.Class<?> wildcardClass69 = cSVFormat68.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        java.lang.String[] strArray9 = cSVFormat2.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setDelimiter('4');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        java.nio.file.Path path4 = null;
        java.nio.charset.Charset charset5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.print(path4, charset5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        boolean boolean20 = cSVFormat19.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray47 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat41.withHeader(strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat40.withHeader(strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder35.setHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder13.setHeaderComments(strArray47);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("a");
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean8 = cSVFormat6.equals((java.lang.Object) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        cSVParser27.close();
        cSVParser27.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser27.getRecords();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordList34);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setTrailingDelimiter(false);
        java.lang.Class<?> wildcardClass9 = builder6.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setIgnoreHeaderCase(false);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSet7);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder3.setSkipHeaderRecord(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat12.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        java.lang.String str15 = cSVFormat10.getDelimiterString();
        boolean boolean16 = cSVFormat10.getTrailingDelimiter();
        boolean boolean17 = cSVFormat7.equals((java.lang.Object) boolean16);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\t" + "'", str15, "\t");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = cSVFormat8.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.String str6 = cSVFormat5.toString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(true);
        java.lang.String str9 = cSVFormat8.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "|" + "'", str9, "|");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrim();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat17);
        char char19 = cSVFormat17.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        java.lang.Appendable appendable31 = cSVPrinter30.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat21.print(appendable31);
        cSVFormat17.println(appendable31);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        cSVPrinter39.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.Character char51 = cSVFormat50.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        java.lang.Object[] objArray68 = new java.lang.Object[] { true, cSVFormat62, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat56.withHeaderComments(objArray68);
        cSVPrinter54.printRecord(objArray68);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder44.setHeaderComments(objArray68);
        cSVPrinter39.printRecord(objArray68);
        cSVFormat14.printRecord(appendable31, objArray68);
        cSVFormat7.println(appendable31);
        boolean boolean75 = cSVFormat7.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\t' + "'", char19 == '\t');
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(appendable31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setHeader(resultSetMetaData30);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder34 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat32);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray52 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat46.withHeader(strArray52);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat45.withHeader(strArray52);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder40.setHeaderComments((java.lang.Object[]) strArray52);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder27.setHeader(strArray52);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder19.setHeader(strArray52);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat9.withHeader(strArray52);
        java.sql.ResultSet resultSet59 = null;
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withHeader(resultSet59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat60);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat20.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withSkipHeaderRecord(true);
        boolean boolean27 = cSVFormat15.equals((java.lang.Object) cSVFormat26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        java.lang.Appendable appendable35 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat26.print(appendable35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        cSVPrinter36.printRecord((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withEscape((java.lang.Character) ' ');
        java.io.Reader reader49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser50 = cSVFormat48.parse(reader49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withTrim(true);
        java.io.Reader reader20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat17.parse(reader20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setTrailingDelimiter(false);
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator();
        long long10 = cSVParser3.getRecordNumber();
        boolean boolean11 = cSVParser3.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        cSVPrinter16.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str36 = cSVFormat35.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setIgnoreHeaderCase(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder42.setHeaderComments(strArray47);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray47);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray47);
        cSVPrinter5.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "," + "'", str36, ",");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder8.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder2.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat3.builder();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat9.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat9.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        cSVPrinter21.flush();
        java.lang.Appendable appendable23 = cSVPrinter21.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat15.print(appendable23);
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat3.print(appendable23);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray32 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat26.withHeader(strArray32);
        boolean boolean34 = cSVFormat33.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet37 = null;
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat33.withHeader(resultSet37);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat38.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = new org.apache.commons.csv.CSVPrinter(appendable23, cSVFormat38);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat38.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withQuote('|');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(appendable23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(cSVPrinter25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat44);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str28 = cSVFormat27.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode33 = cSVFormat32.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder26.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder14.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder8.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder8.setRecordSeparator("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "," + "'", str28, ",");
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode33 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode33.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser3.getHeaderMap();
        long long10 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withEscape((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        cSVPrinter15.flush();
        java.lang.Appendable appendable17 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat5.print(appendable17);
        java.sql.ResultSet resultSet19 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter18.printRecords(resultSet19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        cSVPrinter18.flush();
        java.lang.Appendable appendable20 = cSVPrinter18.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat12.print(appendable20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean23 = cSVFormat22.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = new org.apache.commons.csv.CSVPrinter(appendable20, cSVFormat22);
        cSVFormat3.println(appendable20);
        java.lang.Character char26 = cSVFormat3.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(appendable20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(char26);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat13.printer();
        cSVPrinter14.flush();
        java.lang.Appendable appendable16 = cSVPrinter14.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat8.print(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat8.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("a", cSVFormat18);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser19.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator20);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.Default;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.Default + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.Default));
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        java.sql.ResultSet resultSet50 = null;
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setHeader(resultSet50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder56 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str62 = cSVFormat61.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat64.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode67 = cSVFormat66.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder60.setDuplicateHeaderMode(duplicateHeaderMode67);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder49.setDuplicateHeaderMode(duplicateHeaderMode67);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder49.setCommentMarker((java.lang.Character) '\"');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "," + "'", str62, ",");
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode67 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode67.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        boolean boolean1 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        java.lang.Appendable appendable9 = cSVPrinter7.getOut();
        cSVFormat1.println(appendable9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass43 = cSVFormat42.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode58 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withSkipHeaderRecord(true);
        boolean boolean61 = cSVFormat49.equals((java.lang.Object) cSVFormat60);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        cSVPrinter67.flush();
        java.lang.Appendable appendable69 = cSVPrinter67.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat60.print(appendable69);
        cSVFormat38.print((java.lang.Object) cSVFormat42, appendable69, true);
        cSVFormat18.println(appendable69);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat1.print(appendable69);
        char char75 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor77 = cSVParser76.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList78 = cSVParser76.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(appendable9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + quoteMode58 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode58.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(appendable69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertTrue("'" + char75 + "' != '" + '\t' + "'", char75 == '\t');
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNotNull(cSVRecordItor77);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String[] strArray2 = cSVFormat0.getHeaderComments();
        java.lang.String str3 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.String str7 = cSVFormat6.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withSystemRecordSeparator();
        boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode19 = cSVFormat15.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat15.withSkipHeaderRecord(true);
        boolean boolean22 = cSVFormat10.equals((java.lang.Object) cSVFormat21);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat27.printer();
        cSVPrinter28.flush();
        java.lang.Appendable appendable30 = cSVPrinter28.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat21.print(appendable30);
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray46 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat40.withHeader(strArray46);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder39.setHeader(strArray46);
        cSVFormat4.printRecord(appendable30, (java.lang.Object[]) strArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = cSVFormat0.format((java.lang.Object[]) strArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + quoteMode19 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode19.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
        org.junit.Assert.assertNotNull(appendable30);
        org.junit.Assert.assertNotNull(cSVPrinter31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        boolean boolean7 = cSVFormat3.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withAutoFlush(false);
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withSystemRecordSeparator();
        boolean boolean18 = cSVFormat17.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode26 = cSVFormat22.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat22.withSkipHeaderRecord(true);
        boolean boolean29 = cSVFormat17.equals((java.lang.Object) cSVFormat28);
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.Character char32 = cSVFormat31.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat34.printer();
        cSVPrinter35.flush();
        java.lang.Appendable appendable37 = cSVPrinter35.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat28.print(appendable37);
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray45 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat39.withHeader(strArray45);
        cSVPrinter38.printRecord((java.lang.Object[]) strArray45);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray45);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withIgnoreSurroundingSpaces(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + quoteMode26 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode26.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVPrinter35);
        org.junit.Assert.assertNotNull(appendable37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat50);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        cSVPrinter23.flush();
        java.sql.ResultSet resultSet25 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter23.printHeaders(resultSet25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("|", cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray20 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withHeader(strArray20);
        boolean boolean22 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreSurroundingSpaces(false);
        boolean boolean27 = cSVFormat11.equals((java.lang.Object) cSVFormat26);
        org.apache.commons.csv.QuoteMode quoteMode28 = cSVFormat26.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat10.withQuoteMode(quoteMode28);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + quoteMode28 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode28.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat29);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.apache.commons.csv.QuoteMode quoteMode9 = cSVFormat7.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        java.sql.ResultSetMetaData resultSetMetaData14 = null;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withHeader(resultSetMetaData14);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('|');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setHeader(resultSetMetaData18);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder19.setHeaderComments(strArray21);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray21);
        java.sql.ResultSet resultSet24 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        cSVPrinter23.close(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        boolean boolean6 = cSVParser3.hasHeaderComment();
        java.lang.String str7 = cSVParser3.getTrailerComment();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str19 = cSVFormat18.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode24 = cSVFormat23.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder17.setDuplicateHeaderMode(duplicateHeaderMode24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder5.setDuplicateHeaderMode(duplicateHeaderMode24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder5.setRecordSeparator("\t");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "," + "'", str19, ",");
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode24 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode24.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat6.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withQuoteMode(quoteMode10);
        java.lang.String str12 = cSVFormat11.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\t" + "'", str12, "\t");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        java.lang.Object[] objArray15 = new java.lang.Object[] { true, cSVFormat9, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat3.withHeaderComments(objArray15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat20.withIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setEscape(',');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setIgnoreEmptyLines(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withRecordSeparator('#');
        java.lang.String[] strArray14 = null;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withHeader(strArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat13, (long) (-1), (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.lang.String str9 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList10 = cSVParser3.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        java.lang.String[] strArray7 = cSVFormat6.getHeaderComments();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreHeaderCase(true);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder16.build();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat19.printer();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = builder24.build();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean30 = cSVFormat29.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray37 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withHeader(strArray37);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat29.withHeaderComments((java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder24.setHeaderComments((java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder48.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray64 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat58.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat57.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder52.setHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat43.withHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder40.setHeaderComments(strArray64);
        cSVPrinter21.printRecords((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(cSVFormat71);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray41 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat35.withHeader(strArray41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat34.withHeader(strArray41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder29.setHeaderComments((java.lang.Object[]) strArray41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder16.setHeader(strArray41);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat50.printer();
        cSVPrinter51.close(true);
        cSVPrinter51.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder59 = cSVFormat57.builder();
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData64 = null;
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setHeader(resultSetMetaData64);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder65.setHeaderComments(strArray67);
        cSVPrinter51.printRecord((java.lang.Object[]) strArray67);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder45.setHeaderComments(strArray67);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder6.setHeaderComments((java.lang.Object[]) strArray67);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder71.setAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        boolean boolean5 = cSVFormat1.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
        java.sql.ResultSetMetaData resultSetMetaData8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withHeader(resultSetMetaData8);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder53 = cSVFormat51.builder();
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData58 = null;
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder55.setHeader(resultSetMetaData58);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder59.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder3.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder3.setNullString("INVALID []");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat19.withFirstRecordAsHeader();
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withHeader(resultSet21);
        java.lang.String[] strArray23 = cSVFormat19.getHeaderComments();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withHeader(strArray44);
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat14.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat3, (long) 1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(',');
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape(',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.close(false);
        java.sql.ResultSet resultSet11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printRecords(resultSet11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter(false);
        java.lang.String[] strArray12 = cSVFormat11.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(strArray12);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withNullString("\t");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        boolean boolean15 = cSVFormat14.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        cSVPrinter26.printRecord((java.lang.Object[]) strArray33);
        java.lang.Appendable appendable36 = cSVPrinter26.getOut();
        cSVPrinter26.close();
        cSVPrinter26.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(appendable36);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        cSVPrinter14.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat19);
        java.lang.String str21 = cSVParser20.getFirstEndOfLine();
        boolean boolean22 = cSVParser20.hasHeaderComment();
        cSVParser20.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap24 = cSVParser20.getHeaderMap();
        boolean boolean25 = cSVParser20.hasHeaderComment();
        cSVPrinter14.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser20);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVParser20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withHeader(strArray44);
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat14.withIgnoreEmptyLines();
        boolean boolean53 = cSVFormat52.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean18 = cSVFormat17.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = new org.apache.commons.csv.CSVPrinter(appendable15, cSVFormat17);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat22);
        java.lang.String str24 = cSVParser23.getFirstEndOfLine();
        boolean boolean25 = cSVParser23.hasHeaderComment();
        cSVParser23.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream27 = cSVParser23.stream();
        java.lang.String str28 = cSVParser23.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator29 = cSVParser23.spliterator();
        long long30 = cSVParser23.getRecordNumber();
        cSVPrinter19.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser23);
        java.sql.ResultSet resultSet32 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter19.printRecords(resultSet32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder26 = cSVFormat24.builder();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray37 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withHeader(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder30.setHeader(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder20.setHeader(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder8.setHeaderComments((java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder8.setAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat2.builder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        java.lang.Appendable appendable66 = cSVPrinter65.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat69 = predefined68.getFormat();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat69);
        java.lang.String str71 = cSVParser70.getFirstEndOfLine();
        boolean boolean72 = cSVParser70.hasHeaderComment();
        cSVParser70.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap74 = cSVParser70.getHeaderMap();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        java.util.Map<java.lang.String, java.lang.Integer> strMap77 = cSVParser70.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable66);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strMap74);
        org.junit.Assert.assertNull(strMap77);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        boolean boolean16 = cSVFormat1.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setTrim(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withAutoFlush(true);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        java.lang.Object[] objArray35 = new java.lang.Object[] { true, cSVFormat29, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat23.withHeaderComments(objArray35);
        cSVPrinter21.printRecord(objArray35);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat40);
        java.lang.String str42 = cSVParser41.getFirstEndOfLine();
        boolean boolean43 = cSVParser41.hasHeaderComment();
        cSVParser41.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser41.stream();
        long long46 = cSVParser41.getCurrentLineNumber();
        cSVPrinter21.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser41);
        java.lang.String str48 = cSVParser41.getHeaderComment();
        boolean boolean49 = cSVFormat1.equals((java.lang.Object) cSVParser41);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat1.withSkipHeaderRecord();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setHeader(resultSetMetaData14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray24 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat18.withHeader(strArray24);
        boolean boolean26 = cSVFormat25.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        char char28 = cSVFormat25.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat25.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat25.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder15.setQuoteMode(quoteMode31);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat6.withQuoteMode(quoteMode31);
        java.lang.Character char34 = cSVFormat6.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + ',' + "'", char28 == ',');
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "," + "'", str2, ",");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.printer();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreHeaderCase(true);
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setHeaderComments(strArray12);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray12);
        cSVPrinter6.flush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("|");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.|");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        java.sql.ResultSetMetaData resultSetMetaData26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setHeader(resultSetMetaData26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setTrim(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setDelimiter("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> CommentStart=<4> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape((java.lang.Character) ',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        java.lang.Appendable appendable9 = cSVPrinter7.getOut();
        cSVFormat1.println(appendable9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass43 = cSVFormat42.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode58 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withSkipHeaderRecord(true);
        boolean boolean61 = cSVFormat49.equals((java.lang.Object) cSVFormat60);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        cSVPrinter67.flush();
        java.lang.Appendable appendable69 = cSVPrinter67.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat60.print(appendable69);
        cSVFormat38.print((java.lang.Object) cSVFormat42, appendable69, true);
        cSVFormat18.println(appendable69);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat1.print(appendable69);
        char char75 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap77 = cSVParser76.getHeaderMap();
        boolean boolean78 = cSVParser76.hasHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(appendable9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + quoteMode58 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode58.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(appendable69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertTrue("'" + char75 + "' != '" + '\t' + "'", char75 == '\t');
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNull(strMap77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat26.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder21.setHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode39 = cSVFormat38.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreHeaderCase();
        boolean boolean41 = cSVFormat38.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode39 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode39.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setEscape((java.lang.Character) 'a');
        java.sql.ResultSetMetaData resultSetMetaData16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setHeader(resultSetMetaData16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        cSVPrinter65.close(true);
        cSVPrinter65.printComment("\r\n");
        java.lang.Appendable appendable70 = cSVPrinter65.getOut();
        cSVPrinter65.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined74 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat75 = predefined74.getFormat();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat75);
        java.lang.String str77 = cSVParser76.getFirstEndOfLine();
        boolean boolean78 = cSVParser76.hasHeaderComment();
        cSVParser76.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream80 = cSVParser76.stream();
        java.lang.String str81 = cSVParser76.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator82 = cSVParser76.spliterator();
        long long83 = cSVParser76.getRecordNumber();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        java.util.Map<java.lang.String, java.lang.Integer> strMap85 = cSVParser76.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        cSVPrinter5.close(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable70);
        org.junit.Assert.assertTrue("'" + predefined74 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined74.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNull(strMap85);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        cSVPrinter20.printRecord(objArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder10.setHeaderComments(objArray34);
        cSVPrinter5.printRecord(objArray34);
        java.lang.Appendable appendable39 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        java.lang.String str43 = cSVFormat41.toString();
        boolean boolean44 = cSVFormat41.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.Character char47 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder48 = cSVFormat46.builder();
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setSkipHeaderRecord(false);
        boolean boolean55 = cSVFormat41.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet56 = null;
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat41.withHeader(resultSet56);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withQuote((java.lang.Character) ' ');
        cSVPrinter5.print((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str43, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(char47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat59);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withHeader(resultSet6);
        char char8 = cSVFormat4.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withNullString(",");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        java.lang.String str10 = cSVFormat9.toString();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        long long6 = cSVParser3.getRecordNumber();
        boolean boolean7 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setHeader(resultSetMetaData16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str19 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray38 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat31.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder26.setHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder13.setHeader(strArray38);
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.Character char45 = cSVFormat44.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter48 = cSVFormat47.printer();
        cSVPrinter48.close(true);
        cSVPrinter48.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder56 = cSVFormat54.builder();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData61 = null;
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder58.setHeader(resultSetMetaData61);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder62.setHeaderComments(strArray64);
        cSVPrinter48.printRecord((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder42.setHeaderComments(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat0.withHeaderComments((java.lang.Object[]) strArray64);
        boolean boolean69 = cSVFormat0.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVPrinter48);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        java.lang.String str6 = cSVFormat4.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        java.lang.String str24 = cSVFormat1.toString();
        boolean boolean25 = cSVFormat1.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str24, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote((java.lang.Character) 'a');
        boolean boolean14 = cSVFormat9.getIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode8 = cSVFormat7.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode8 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode8.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines();
        java.lang.Character char11 = cSVFormat10.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withDelimiter('#');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.String str6 = cSVFormat5.toString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines();
        java.lang.Character char11 = cSVFormat10.getEscapeCharacter();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat10.printer();
        boolean boolean13 = cSVFormat10.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withQuote((java.lang.Character) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.sql.ResultSetMetaData resultSetMetaData4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withHeader(resultSetMetaData4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuote((java.lang.Character) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean1 = cSVFormat0.getTrailingDelimiter();
        boolean boolean2 = cSVFormat0.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        boolean boolean5 = cSVFormat4.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode9 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuoteMode(quoteMode9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withSkipHeaderRecord(false);
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat14.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.ALL));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withHeader(resultSetMetaData9);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat6.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat1.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        boolean boolean10 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat79.withIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat80);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withHeader(resultSet7);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setTrim(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream14 = cSVParser10.stream();
        long long15 = cSVParser10.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser10.getRecords();
        boolean boolean17 = cSVParser10.hasTrailerComment();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        cSVPrinter5.flush();
        java.sql.ResultSet resultSet20 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        java.lang.String str10 = cSVParser3.getTrailerComment();
        java.util.List<java.lang.String> strList11 = cSVParser3.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator12 = strList11.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strSpliterator12);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setIgnoreHeaderCase(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setQuote(' ');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat6.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat6);
        boolean boolean11 = cSVFormat6.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withDelimiter('a');
        boolean boolean8 = cSVFormat7.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray22 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withHeader(strArray22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder39 = cSVFormat37.builder();
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData44 = null;
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder41.setHeader(resultSetMetaData44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str47 = cSVFormat46.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder48 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat46);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray66 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat60.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat59.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder54.setHeaderComments((java.lang.Object[]) strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder33.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat23.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder11.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder11.setIgnoreHeaderCase(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        boolean boolean10 = cSVFormat9.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode18 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat9.withQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet26 = null;
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withHeader(resultSet26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat27.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat33.printer();
        cSVPrinter34.flush();
        java.lang.Appendable appendable36 = cSVPrinter34.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat28.print(appendable36);
        cSVFormat19.print((java.lang.Object) '4', appendable36, false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + quoteMode18 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode18.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertNotNull(appendable36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat19.withFirstRecordAsHeader();
        boolean boolean21 = cSVFormat19.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat13.printer();
        cSVPrinter14.flush();
        java.lang.Appendable appendable16 = cSVPrinter14.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat8.print(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat8.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("a", cSVFormat18);
        long long20 = cSVParser19.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat2.withRecordSeparator('\"');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withRecordSeparator("\n");
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat3.builder();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withCommentMarker('|');
        boolean boolean9 = cSVFormat3.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat3.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat3.withTrailingDelimiter(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        boolean boolean83 = cSVFormat7.isQuoteCharacterSet();
        java.io.Reader reader84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser85 = cSVFormat7.parse(reader84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        java.lang.Appendable appendable33 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat23.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter34.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        cSVPrinter5.print((java.lang.Object) cSVParser38);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser38.stream();
        java.lang.String str46 = cSVParser38.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode16 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat12.withSkipHeaderRecord(true);
        boolean boolean19 = cSVFormat7.equals((java.lang.Object) cSVFormat18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat24.printer();
        cSVPrinter25.flush();
        java.lang.Appendable appendable27 = cSVPrinter25.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat18.print(appendable27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + quoteMode16 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode16.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVPrinter25);
        org.junit.Assert.assertNotNull(appendable27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        char char11 = cSVFormat10.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\t' + "'", char11 == '\t');
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        boolean boolean7 = cSVFormat3.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(true);
        boolean boolean12 = cSVFormat9.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.sql.ResultSetMetaData resultSetMetaData4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSetMetaData4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder9.setDelimiter(",");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder9.setCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setRecordSeparator(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withAllowDuplicateHeaderNames();
        boolean boolean17 = cSVFormat16.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        java.lang.Appendable appendable33 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat23.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter34.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        cSVPrinter5.print((java.lang.Object) cSVParser38);
        java.sql.ResultSet resultSet45 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet45, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        long long9 = cSVParser3.getRecordNumber();
        long long10 = cSVParser3.getCurrentLineNumber();
        boolean boolean11 = cSVParser3.hasTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.InformixUnload;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withAllowDuplicateHeaderNames();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) cSVFormat8);
        java.nio.file.Path path11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat1.print(path11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.InformixUnload + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.InformixUnload));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        long long10 = cSVParser3.getCurrentLineNumber();
        long long11 = cSVParser3.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean3 = cSVFormat2.isCommentMarkerSet();
        boolean boolean4 = cSVFormat2.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('4');
        java.lang.String str5 = cSVFormat4.getNullString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Builder builder28 = cSVFormat27.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat2.withSkipHeaderRecord();
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withHeader(resultSet21);
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withTrim(true);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat24);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setHeader(resultSetMetaData20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder17.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder9.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.Character char50 = cSVFormat49.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder51 = cSVFormat49.builder();
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray62 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat56.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder55.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder9.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder65.setEscape(',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(char50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser17 = cSVFormat13.parse(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        boolean boolean10 = cSVFormat9.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        boolean boolean8 = cSVParser3.hasTrailerComment();
        java.lang.String str9 = cSVParser3.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withCommentMarker((java.lang.Character) ',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVFormat79);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat6.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray14 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withHeader(strArray14);
        boolean boolean16 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        boolean boolean18 = cSVFormat6.equals((java.lang.Object) cSVFormat15);
        boolean boolean19 = cSVFormat6.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat22.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withAllowMissingColumnNames();
        boolean boolean18 = cSVFormat17.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setQuoteMode(quoteMode12);
        java.sql.ResultSetMetaData resultSetMetaData14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder7.setHeader(resultSetMetaData14);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        java.lang.Appendable appendable13 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = new org.apache.commons.csv.CSVPrinter(appendable13, cSVFormat19);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(true);
        boolean boolean23 = cSVFormat22.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setHeader(resultSetMetaData16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str19 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray38 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat31.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder26.setHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder13.setHeader(strArray38);
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.Character char45 = cSVFormat44.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter48 = cSVFormat47.printer();
        cSVPrinter48.close(true);
        cSVPrinter48.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder56 = cSVFormat54.builder();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData61 = null;
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder58.setHeader(resultSetMetaData61);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder62.setHeaderComments(strArray64);
        cSVPrinter48.printRecord((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder42.setHeaderComments(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat0.withHeaderComments((java.lang.Object[]) strArray64);
        java.lang.String str69 = cSVFormat68.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVPrinter48);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "|" + "'", str69, "|");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setHeader(resultSetMetaData18);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder19.setHeaderComments(strArray21);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray21);
        cSVPrinter5.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat27);
        java.lang.String str29 = cSVParser28.getFirstEndOfLine();
        boolean boolean30 = cSVParser28.hasHeaderComment();
        cSVParser28.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream32 = cSVParser28.stream();
        long long33 = cSVParser28.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser28.getRecords();
        long long35 = cSVParser28.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser28);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVParser28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        cSVParser27.close();
        cSVParser27.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        boolean boolean34 = cSVParser27.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        java.lang.String[] strArray7 = cSVFormat6.getHeaderComments();
        boolean boolean8 = cSVFormat6.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withQuote('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setHeaderComments(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        cSVPrinter39.println();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        boolean boolean10 = cSVParser3.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        java.lang.String str12 = cSVParser3.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        boolean boolean17 = cSVFormat16.getTrim();
        boolean boolean18 = cSVFormat16.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat16.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        cSVPrinter30.close(true);
        cSVPrinter30.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder37 = cSVFormat35.builder();
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray48 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat42.withHeader(strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder41.setHeader(strArray48);
        cSVPrinter30.printRecords((java.lang.Object[]) strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat24.withHeader(strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder6.setHeaderComments(strArray48);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        long long6 = cSVParser3.getCurrentLineNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser7.getHeaderMap();
        java.lang.String str9 = cSVParser7.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser7.getHeaderMap();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuote((java.lang.Character) '\"');
        boolean boolean11 = cSVFormat10.getAllowMissingColumnNames();
        boolean boolean12 = cSVFormat10.getIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuoteMode(quoteMode6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withNullString("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9, (long) (short) 100, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) (byte) -1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSet7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDelimiter("\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        boolean boolean3 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withNullString("hi!");
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1);
        java.lang.String str9 = cSVParser8.getHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str28 = cSVFormat27.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode33 = cSVFormat32.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder26.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder14.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder8.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder8.setQuote(' ');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder8.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "," + "'", str28, ",");
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode33 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode33.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat1.builder();
        java.lang.String[] strArray7 = cSVFormat1.getHeaderComments();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strArray7);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode50 = cSVFormat49.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder6.setDuplicateHeaderMode(duplicateHeaderMode50);
        java.sql.ResultSetMetaData resultSetMetaData52 = null;
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder6.setHeader(resultSetMetaData52);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder6.setAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode50 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode50.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreSurroundingSpaces(false);
        boolean boolean16 = cSVFormat0.equals((java.lang.Object) cSVFormat15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat0.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str20 = cSVFormat19.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat22.printer();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setIgnoreHeaderCase(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder26.setHeaderComments(strArray31);
        cSVPrinter25.printRecords((java.lang.Object[]) strArray31);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat0.withHeaderComments((java.lang.Object[]) strArray31);
        boolean boolean35 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "," + "'", str20, ",");
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVPrinter25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setQuote('|');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder13.setCommentMarker((java.lang.Character) '4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowMissingColumnNames();
        cSVPrinter5.print((java.lang.Object) cSVFormat21);
        java.lang.String[] strArray25 = cSVFormat21.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(strArray25);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder3.setHeader(resultSetMetaData12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator("hi!");
        boolean boolean9 = cSVFormat8.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('4');
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withHeader(resultSet6);
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder11.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setHeader(resultSet18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray62 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat56.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat55.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder50.setHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder37.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder29.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder19.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat5.withHeader(strArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser70 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("a");
        boolean boolean5 = cSVFormat4.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines(true);
        boolean boolean11 = cSVFormat8.getAutoFlush();
        char char12 = cSVFormat8.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\t' + "'", char12 == '\t');
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withHeader(resultSet11);
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '#');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setRecordSeparator('|');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        java.lang.String str10 = cSVFormat0.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat18 = builder15.build();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat18.printer();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = builder23.build();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean29 = cSVFormat28.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray36 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat30.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat28.withHeaderComments((java.lang.Object[]) strArray36);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder23.setHeaderComments((java.lang.Object[]) strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder45 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat43);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray63 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat57.withHeader(strArray63);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat56.withHeader(strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder51.setHeaderComments((java.lang.Object[]) strArray63);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat42.withHeaderComments((java.lang.Object[]) strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder39.setHeaderComments(strArray63);
        cSVPrinter20.printRecords((java.lang.Object[]) strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder10.setHeader(strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder10.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
        boolean boolean7 = cSVFormat6.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setDelimiter("INVALID []");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        java.lang.Appendable appendable33 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat23.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter34.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        cSVPrinter5.print((java.lang.Object) cSVParser38);
        java.lang.Class<?> wildcardClass45 = cSVParser38.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        java.lang.String str6 = cSVParser3.getHeaderComment();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        boolean boolean8 = cSVParser3.isClosed();
        java.lang.String str9 = cSVParser3.getFirstEndOfLine();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setHeader(resultSetMetaData9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setHeader(resultSetMetaData39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder36.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder28.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat18.withHeader(strArray61);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode68 = cSVFormat18.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder0.setDuplicateHeaderMode(duplicateHeaderMode68);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode68 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode68.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        boolean boolean18 = cSVFormat17.getTrim();
        boolean boolean19 = cSVFormat17.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass42 = cSVFormat41.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withSystemRecordSeparator();
        boolean boolean49 = cSVFormat48.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode57 = cSVFormat53.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat53.withSkipHeaderRecord(true);
        boolean boolean60 = cSVFormat48.equals((java.lang.Object) cSVFormat59);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat65.printer();
        cSVPrinter66.flush();
        java.lang.Appendable appendable68 = cSVPrinter66.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter69 = cSVFormat59.print(appendable68);
        cSVFormat37.print((java.lang.Object) cSVFormat41, appendable68, true);
        cSVFormat17.println(appendable68);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat0.print(appendable68);
        java.lang.String str74 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat0.withQuote('\"');
        boolean boolean77 = cSVFormat76.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + quoteMode57 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode57.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertNotNull(appendable68);
        org.junit.Assert.assertNotNull(cSVPrinter69);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\\N" + "'", str74, "\\N");
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setHeader(resultSetMetaData8);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        boolean boolean14 = cSVFormat13.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder21 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder21.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat37.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder21.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder15.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder11.setHeaderComments(strArray61);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean21 = cSVFormat20.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray28 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat22.withHeader(strArray28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray28);
        cSVPrinter18.printRecords((java.lang.Object[]) strArray28);
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat34);
        java.lang.String str36 = cSVParser35.getFirstEndOfLine();
        boolean boolean37 = cSVParser35.hasHeaderComment();
        cSVParser35.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream39 = cSVParser35.stream();
        java.lang.String str40 = cSVParser35.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator41 = cSVParser35.spliterator();
        long long42 = cSVParser35.getRecordNumber();
        boolean boolean43 = cSVParser35.isClosed();
        cSVPrinter18.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser35);
        java.lang.String str45 = cSVParser35.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withRecordSeparator('\"');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        java.lang.Object[] objArray15 = new java.lang.Object[] { true, cSVFormat9, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat3.withHeaderComments(objArray15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withCommentMarker((java.lang.Character) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass19 = cSVFormat18.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat30.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat30.withSkipHeaderRecord(true);
        boolean boolean37 = cSVFormat25.equals((java.lang.Object) cSVFormat36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat42.printer();
        cSVPrinter43.flush();
        java.lang.Appendable appendable45 = cSVPrinter43.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter46 = cSVFormat36.print(appendable45);
        cSVFormat14.print((java.lang.Object) cSVFormat18, appendable45, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withAutoFlush(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = new org.apache.commons.csv.CSVPrinter(appendable45, cSVFormat50);
        cSVPrinter54.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(appendable45);
        org.junit.Assert.assertNotNull(cSVPrinter46);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape(',');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape(',');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator("\\N");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder11.build();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder11.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser7.getHeaderMap();
        java.lang.String str9 = cSVParser7.getTrailerComment();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser7.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        boolean boolean9 = cSVFormat2.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withAllowMissingColumnNames();
        java.lang.String str11 = cSVFormat2.getNullString();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode9 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuoteMode(quoteMode9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withQuote((java.lang.Character) '4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        java.lang.String str6 = cSVFormat5.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withQuote((java.lang.Character) '\"');
        java.lang.String str13 = cSVFormat12.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat15.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat26.printer();
        cSVPrinter27.flush();
        java.lang.Appendable appendable29 = cSVPrinter27.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat21.print(appendable29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean32 = cSVFormat31.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = new org.apache.commons.csv.CSVPrinter(appendable29, cSVFormat31);
        cSVFormat12.println(appendable29);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder38.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str46 = cSVFormat45.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat48.printer();
        org.apache.commons.csv.CSVFormat.Builder builder52 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setIgnoreHeaderCase(true);
        java.lang.String[] strArray57 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder52.setHeaderComments(strArray57);
        cSVPrinter51.printRecords((java.lang.Object[]) strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder38.setHeaderComments((java.lang.Object[]) strArray57);
        cSVFormat3.printRecord(appendable29, (java.lang.Object[]) strArray57);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\r\n" + "'", str13, "\r\n");
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertNotNull(appendable29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "," + "'", str46, ",");
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setDelimiter("Delimiter=<|> Escape=<#> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        cSVPrinter83.println();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withTrim(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        java.lang.String[] strArray14 = cSVFormat7.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat7.withSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withAllowDuplicateHeaderNames(false);
        boolean boolean20 = cSVFormat17.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray35 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat29.withHeader(strArray35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat28.withHeader(strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder23.setHeaderComments((java.lang.Object[]) strArray35);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat14.withHeaderComments((java.lang.Object[]) strArray35);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray35);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode41 = cSVFormat40.getDuplicateHeaderMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode41 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode41.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        boolean boolean6 = cSVParser3.hasTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream8 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordStream8);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        java.lang.String[] strArray8 = cSVFormat7.getHeader();
        boolean boolean9 = cSVFormat7.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuote('|');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withQuote('\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator('|');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setDelimiter("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        org.apache.commons.csv.QuoteMode quoteMode18 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat34.withSystemRecordSeparator();
        boolean boolean39 = cSVFormat38.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.Character char44 = cSVFormat43.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode47 = cSVFormat43.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat43.withSkipHeaderRecord(true);
        boolean boolean50 = cSVFormat38.equals((java.lang.Object) cSVFormat49);
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.Character char53 = cSVFormat52.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter56 = cSVFormat55.printer();
        cSVPrinter56.flush();
        java.lang.Appendable appendable58 = cSVPrinter56.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter59 = cSVFormat49.print(appendable58);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder63 = cSVFormat61.builder();
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray74 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat68.withHeader(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder67.setHeader(strArray74);
        cSVFormat32.printRecord(appendable58, (java.lang.Object[]) strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder29.setHeader(strArray74);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat17.withHeader(strArray74);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + quoteMode18 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode18.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + quoteMode47 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode47.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(char53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVPrinter56);
        org.junit.Assert.assertNotNull(appendable58);
        org.junit.Assert.assertNotNull(cSVPrinter59);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(cSVFormat79);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setCommentMarker('\t');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder10.build();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setEscape('\t');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat14 = builder10.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start and the escape character cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setHeader(resultSetMetaData14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setRecordSeparator('\"');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("a");
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        java.lang.String str6 = cSVParser3.getTrailerComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        java.lang.String str12 = cSVParser11.getFirstEndOfLine();
        boolean boolean13 = cSVParser11.hasHeaderComment();
        cSVParser11.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream15 = cSVParser11.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser11.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser11.getRecords();
        java.lang.String str18 = cSVParser11.getTrailerComment();
        java.util.List<java.lang.String> strList19 = cSVParser11.getHeaderNames();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser11);
        boolean boolean21 = cSVParser11.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream15);
        org.junit.Assert.assertNotNull(cSVRecordList16);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat13);
        java.sql.ResultSet resultSet15 = null;
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withHeader(resultSet15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat20.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        cSVPrinter30.flush();
        java.lang.Appendable appendable32 = cSVPrinter30.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat20.print(appendable32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat39 = builder36.build();
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean42 = cSVFormat41.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat41.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder36.setHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat53.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder58 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.String str67 = cSVFormat66.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray76 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat70.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat69.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder64.setHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat55.withHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder52.setHeaderComments(strArray76);
        cSVFormat18.printRecord(appendable32, (java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder6.setHeaderComments((java.lang.Object[]) strArray76);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(appendable32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withHeader(resultSet8);
        boolean boolean10 = cSVFormat9.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecord(cSVRecordIterable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setNullString("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\\N");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.\\N");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        boolean boolean7 = cSVFormat3.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(true);
        boolean boolean12 = cSVFormat9.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat3.getQuoteMode();
        boolean boolean6 = cSVFormat3.isCommentMarkerSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode8 = cSVFormat3.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode8 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode8.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.sql.ResultSetMetaData resultSetMetaData4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withHeader(resultSetMetaData4);
        boolean boolean6 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        java.lang.String str8 = cSVFormat7.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withAllowMissingColumnNames();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat9.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\t" + "'", str8, "\t");
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter5.close();
        cSVPrinter5.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        boolean boolean9 = cSVFormat2.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withCommentMarker('|');
        boolean boolean20 = cSVFormat14.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setHeader(resultSetMetaData28);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray62 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat56.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat55.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder50.setHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder37.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        java.lang.Character char69 = cSVFormat68.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat71.printer();
        cSVPrinter72.close(true);
        cSVPrinter72.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined77 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat78 = predefined77.getFormat();
        java.lang.Character char79 = cSVFormat78.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder80 = cSVFormat78.builder();
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder80.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder82.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData85 = null;
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder82.setHeader(resultSetMetaData85);
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder86.setHeaderComments(strArray88);
        cSVPrinter72.printRecord((java.lang.Object[]) strArray88);
        org.apache.commons.csv.CSVFormat.Builder builder91 = builder66.setHeaderComments(strArray88);
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder27.setHeaderComments((java.lang.Object[]) strArray88);
        org.apache.commons.csv.CSVFormat cSVFormat93 = cSVFormat14.withHeader(strArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = cSVFormat2.format((java.lang.Object[]) strArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertTrue("'" + predefined77 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined77.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNull(char79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(cSVFormat93);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        java.lang.String str6 = cSVParser3.getHeaderComment();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        java.lang.String str8 = cSVParser3.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        char char6 = cSVFormat4.getDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreEmptyLines(false);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat6.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        java.lang.String[] strArray6 = cSVFormat2.getHeaderComments();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat8.print(appendable18);
        cSVFormat2.println(appendable18);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat2.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        org.apache.commons.csv.CSVFormat.Predefined predefined85 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat86 = predefined85.getFormat();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat86);
        java.lang.String str88 = cSVParser87.getFirstEndOfLine();
        boolean boolean89 = cSVParser87.hasHeaderComment();
        cSVParser87.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream91 = cSVParser87.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList92 = cSVParser87.getRecords();
        cSVPrinter83.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList92);
        java.sql.ResultSet resultSet94 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter83.printRecords(resultSet94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
        org.junit.Assert.assertTrue("'" + predefined85 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined85.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertNotNull(cSVParser87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream91);
        org.junit.Assert.assertNotNull(cSVRecordList92);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        java.lang.String str6 = cSVFormat5.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder11.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setHeader(resultSet18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray62 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat56.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat55.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder50.setHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder37.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder29.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder19.setHeader(strArray62);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray62);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withSystemRecordSeparator();
        java.lang.Character char12 = cSVFormat7.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter();
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat0.withHeader(resultSet8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
        java.io.Reader reader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = cSVFormat9.parse(reader11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        cSVPrinter5.print((java.lang.Object) cSVFormat20);
        cSVPrinter5.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(true);
        boolean boolean13 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withCommentMarker((java.lang.Character) ',');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream22 = cSVParser16.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser16.getHeaderMap();
        java.lang.String str24 = cSVParser16.getTrailerComment();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser16.getRecords();
        boolean boolean26 = cSVParser16.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(cSVRecordStream22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVRecordList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder9.setDelimiter(",");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setQuote(',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setDelimiter("\\N");
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setHeader(resultSetMetaData27);
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat42.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder37.setHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder24.setHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder16.setHeaderComments((java.lang.Object[]) strArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = cSVFormat9.format((java.lang.Object[]) strArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setHeader(resultSet3);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        java.lang.String str10 = cSVParser3.getTrailerComment();
        java.util.List<java.lang.String> strList11 = cSVParser3.getHeaderNames();
        boolean boolean12 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        boolean boolean10 = cSVParser3.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        java.lang.String str12 = cSVParser3.getFirstEndOfLine();
        java.lang.String str13 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        long long10 = cSVParser9.getCurrentLineNumber();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser9.stream();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        java.sql.ResultSet resultSet50 = null;
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setHeader(resultSet50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder56 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str62 = cSVFormat61.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat64.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode67 = cSVFormat66.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder60.setDuplicateHeaderMode(duplicateHeaderMode67);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder49.setDuplicateHeaderMode(duplicateHeaderMode67);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder69.setRecordSeparator("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "," + "'", str62, ",");
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode67 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode67.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) '|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat4.withHeader(resultSet18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat4.withIgnoreEmptyLines();
        org.apache.commons.csv.QuoteMode quoteMode21 = null;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat4.withQuoteMode(quoteMode21);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet4);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        java.lang.Appendable appendable23 = cSVPrinter22.getOut();
        cSVPrinter22.close();
        cSVPrinter22.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat28);
        java.lang.String str30 = cSVParser29.getFirstEndOfLine();
        boolean boolean31 = cSVParser29.hasHeaderComment();
        cSVParser29.close();
        cSVParser29.close();
        java.lang.String str34 = cSVParser29.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser29.getRecords();
        cSVPrinter22.print((java.lang.Object) cSVRecordList35);
        java.lang.Appendable appendable37 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat16.print(appendable37);
        java.lang.String[] strArray39 = cSVFormat16.getHeaderComments();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(appendable23);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVRecordList35);
        org.junit.Assert.assertNotNull(appendable37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
        org.junit.Assert.assertNull(strArray39);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentMarker((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withHeader(strArray44);
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat14.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat52.withSystemRecordSeparator();
        java.lang.Character char54 = cSVFormat52.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.lang.Appendable appendable0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withCommentMarker((java.lang.Character) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter16 = new org.apache.commons.csv.CSVPrinter(appendable0, cSVFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser3.iterator();
        boolean boolean10 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat3.getQuoteMode();
        boolean boolean6 = cSVFormat3.isCommentMarkerSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder5.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote('|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        java.lang.String str8 = cSVParser3.getTrailerComment();
        java.lang.String str9 = cSVParser3.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser3.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordItor10);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        cSVPrinter65.close(true);
        cSVPrinter65.printComment("\r\n");
        java.lang.Appendable appendable70 = cSVPrinter65.getOut();
        cSVPrinter65.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined74 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat75 = predefined74.getFormat();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat75);
        java.lang.String str77 = cSVParser76.getFirstEndOfLine();
        boolean boolean78 = cSVParser76.hasHeaderComment();
        cSVParser76.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream80 = cSVParser76.stream();
        java.lang.String str81 = cSVParser76.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator82 = cSVParser76.spliterator();
        long long83 = cSVParser76.getRecordNumber();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        java.util.Map<java.lang.String, java.lang.Integer> strMap85 = cSVParser76.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        java.sql.ResultSet resultSet87 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable70);
        org.junit.Assert.assertTrue("'" + predefined74 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined74.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNull(strMap85);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withAllowMissingColumnNames(true);
        boolean boolean14 = cSVFormat9.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withHeader(strArray44);
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat14.withSystemRecordSeparator();
        java.lang.String str53 = cSVFormat14.getNullString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        boolean boolean7 = cSVFormat3.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat8.builder();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setHeaderComments(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        boolean boolean40 = cSVFormat38.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet2 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray10 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withHeader(strArray10);
        boolean boolean12 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreSurroundingSpaces(false);
        boolean boolean17 = cSVFormat1.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat1.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withAutoFlush(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        java.lang.String str6 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = builder9.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSetMetaData21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.Character char50 = cSVFormat49.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter53 = cSVFormat52.printer();
        cSVPrinter53.close(true);
        cSVPrinter53.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.Character char60 = cSVFormat59.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder61 = cSVFormat59.builder();
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData66 = null;
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder63.setHeader(resultSetMetaData66);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder67.setHeaderComments(strArray69);
        cSVPrinter53.printRecord((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder47.setHeaderComments(strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat12.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat1.withHeader(strArray69);
        java.lang.String str75 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\t" + "'", str6, "\t");
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(char50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVPrinter53);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(char60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\r\n" + "'", str75, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat77);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setEscape('a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setDelimiter("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        boolean boolean3 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('4');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSet17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setHeader(resultSetMetaData39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder36.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder28.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder18.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat4.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat68.withTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(cSVFormat69);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('a');
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSetMetaData5);
        boolean boolean7 = cSVFormat6.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str36 = cSVFormat35.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setIgnoreHeaderCase(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder42.setHeaderComments(strArray47);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray47);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat53);
        java.lang.String str55 = cSVParser54.getFirstEndOfLine();
        boolean boolean56 = cSVParser54.hasHeaderComment();
        cSVParser54.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream58 = cSVParser54.stream();
        java.lang.String str59 = cSVParser54.getFirstEndOfLine();
        boolean boolean60 = cSVParser54.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList61 = cSVParser54.getRecords();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList61);
        java.sql.ResultSet resultSet63 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet63, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "," + "'", str36, ",");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVParser54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(cSVRecordList61);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat7.withQuote((java.lang.Character) '|');
        java.lang.Class<?> wildcardClass19 = cSVFormat18.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream20 = cSVParser16.stream();
        java.lang.String str21 = cSVParser16.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser16.spliterator();
        long long23 = cSVParser16.getRecordNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        boolean boolean25 = cSVParser16.hasHeaderComment();
        java.lang.String str26 = cSVParser16.getHeaderComment();
        java.lang.String str27 = cSVParser16.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        boolean boolean9 = cSVParser3.isClosed();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.flush();
        java.sql.ResultSet resultSet10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printHeaders(resultSet10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreSurroundingSpaces(false);
        boolean boolean13 = cSVFormat12.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setDelimiter("\t");
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode14 = org.apache.commons.csv.DuplicateHeaderMode.DISALLOW;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setDuplicateHeaderMode(duplicateHeaderMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setDelimiter("Delimiter=<|> Escape=<#> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setHeader(resultSetMetaData18);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode14 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.DISALLOW + "'", duplicateHeaderMode14.equals(org.apache.commons.csv.DuplicateHeaderMode.DISALLOW));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        boolean boolean7 = cSVFormat6.getTrim();
        java.io.File file8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat6.print(file8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat5.printer();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder10.build();
        boolean boolean14 = cSVFormat13.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder21 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat27.printer();
        java.lang.Appendable appendable29 = cSVPrinter28.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat19.print(appendable29);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.Character char45 = cSVFormat44.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder46 = cSVFormat44.builder();
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData51 = null;
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder48.setHeader(resultSetMetaData51);
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder55 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat53);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder57.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder57.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.String str64 = cSVFormat63.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat67 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray73 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat67.withHeader(strArray73);
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat66.withHeader(strArray73);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder61.setHeaderComments((java.lang.Object[]) strArray73);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder48.setHeader(strArray73);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder40.setHeader(strArray73);
        cSVFormat13.printRecord(appendable29, (java.lang.Object[]) strArray73);
        cSVPrinter7.printRecords((java.lang.Object[]) strArray73);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
        org.junit.Assert.assertNotNull(appendable29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setHeader(resultSetMetaData9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray31 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat25.withHeader(strArray31);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat24.withHeader(strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder19.setHeaderComments((java.lang.Object[]) strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder6.setHeader(strArray31);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat40.printer();
        cSVPrinter41.close(true);
        cSVPrinter41.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat47.builder();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setHeader(resultSetMetaData54);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder55.setHeaderComments(strArray57);
        cSVPrinter41.printRecord((java.lang.Object[]) strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder35.setHeaderComments(strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder0.setHeader(strArray57);
        org.apache.commons.csv.CSVFormat cSVFormat62 = builder61.build();
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder61.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder61.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        long long7 = cSVParser3.getCurrentLineNumber();
        long long8 = cSVParser3.getCurrentLineNumber();
        java.lang.String str9 = cSVParser3.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser3.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordItor10);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str11 = cSVFormat10.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = cSVFormat15.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder9.setDuplicateHeaderMode(duplicateHeaderMode16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str19 = cSVFormat18.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat21.printer();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setIgnoreHeaderCase(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder25.setHeaderComments(strArray30);
        cSVPrinter24.printRecords((java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder9.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setDelimiter("#");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "," + "'", str19, ",");
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.println();
        cSVPrinter5.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat3 = builder2.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean13 = cSVFormat12.isCommentMarkerSet();
        boolean boolean14 = cSVFormat12.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat12.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withNullString("\\N");
        boolean boolean21 = cSVFormat10.equals((java.lang.Object) cSVFormat18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setHeader(resultSetMetaData9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray31 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat25.withHeader(strArray31);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat24.withHeader(strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder19.setHeaderComments((java.lang.Object[]) strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder6.setHeader(strArray31);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat40.printer();
        cSVPrinter41.close(true);
        cSVPrinter41.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat47.builder();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setHeader(resultSetMetaData54);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder55.setHeaderComments(strArray57);
        cSVPrinter41.printRecord((java.lang.Object[]) strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder35.setHeaderComments(strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder0.setHeader(strArray57);
        org.apache.commons.csv.CSVFormat cSVFormat62 = builder61.build();
        java.nio.file.Path path63 = null;
        java.nio.charset.Charset charset64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat62.print(path63, charset64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVFormat62);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat4.withHeader(strArray11);
        boolean boolean14 = cSVFormat4.isQuoteCharacterSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat4.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat6.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withIgnoreHeaderCase(true);
        java.sql.ResultSet resultSet14 = null;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withHeader(resultSet14);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat82.withNullString("\n");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat84);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuote('\t');
        boolean boolean3 = cSVFormat0.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withHeader(resultSet8);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode17 = cSVFormat13.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat13.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = builder29.build();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean35 = cSVFormat34.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat34.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder29.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str50 = cSVFormat49.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder51 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat49);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder53.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.String str60 = cSVFormat59.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray69 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat63.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat62.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder57.setHeaderComments((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat48.withHeaderComments((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder45.setHeaderComments(strArray69);
        cSVFormat11.printRecord(appendable25, (java.lang.Object[]) strArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = cSVFormat0.format((java.lang.Object[]) strArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + quoteMode17 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode17.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str8 = cSVFormat7.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode13 = cSVFormat12.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setDuplicateHeaderMode(duplicateHeaderMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder6.setAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "," + "'", str8, ",");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode13 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode13.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        cSVParser13.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream18 = cSVParser13.stream();
        cSVPrinter6.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        java.sql.ResultSet resultSet20 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printRecords(resultSet20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream18);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSet10);
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setHeader(resultSet12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setDelimiter('4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        boolean boolean6 = cSVFormat2.getTrailingDelimiter();
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withHeader(resultSetMetaData7);
        boolean boolean9 = cSVFormat8.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined83 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat84 = predefined83.getFormat();
        java.lang.Character char85 = cSVFormat84.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withDelimiter('a');
        boolean boolean88 = cSVFormat84.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat84.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat90.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter93 = new org.apache.commons.csv.CSVPrinter(appendable77, cSVFormat90);
        java.lang.Appendable appendable94 = cSVPrinter93.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter95 = cSVFormat2.print(appendable94);
        cSVPrinter95.close(false);
        cSVPrinter95.close(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertTrue("'" + predefined83 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined83.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNull(char85);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNotNull(cSVFormat92);
        org.junit.Assert.assertNotNull(appendable94);
        org.junit.Assert.assertNotNull(cSVPrinter95);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        java.lang.String str12 = cSVParser11.getFirstEndOfLine();
        boolean boolean13 = cSVParser11.hasHeaderComment();
        cSVParser11.close();
        cSVParser11.close();
        java.lang.String str16 = cSVParser11.getFirstEndOfLine();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser11);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        cSVPrinter23.close(true);
        cSVPrinter23.close(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.Character char32 = cSVFormat31.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat34.printer();
        cSVPrinter35.close(true);
        cSVPrinter35.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.Character char41 = cSVFormat40.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder42 = cSVFormat40.builder();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray53 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat47.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder46.setHeader(strArray53);
        cSVPrinter35.printRecords((java.lang.Object[]) strArray53);
        cSVPrinter23.printRecords((java.lang.Object[]) strArray53);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray53);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVPrinter35);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(char41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat17.withQuote((java.lang.Character) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withRecordSeparator("hi!");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withAllowMissingColumnNames(true);
        java.lang.String str14 = cSVFormat9.toString();
        boolean boolean15 = cSVFormat9.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false" + "'", str14, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withHeader(resultSet6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withEscape(' ');
        boolean boolean10 = cSVFormat9.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withRecordSeparator("a");
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat6.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat1.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withAllowMissingColumnNames(true);
        java.lang.Class<?> wildcardClass16 = cSVFormat1.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withAutoFlush(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        cSVPrinter5.close(true);
        java.lang.Appendable appendable22 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertNotNull(appendable22);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat5.getQuoteMode();
        boolean boolean7 = cSVFormat5.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(quoteMode6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        boolean boolean7 = cSVFormat1.isCommentMarkerSet();
        boolean boolean8 = cSVFormat1.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat25.withFirstRecordAsHeader();
        java.sql.ResultSet resultSet27 = null;
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withHeader(resultSet27);
        java.lang.String[] strArray29 = cSVFormat25.getHeaderComments();
        cSVPrinter5.printRecords((java.lang.Object[]) strArray29);
        java.sql.ResultSet resultSet31 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray29);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        boolean boolean3 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean4 = cSVFormat1.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setNullString("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setDelimiter("|");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser7.getHeaderMap();
        java.lang.String str9 = cSVParser7.getTrailerComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser7.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordItor10);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrim();
        boolean boolean6 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat6.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat6);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setRecordSeparator("\\N");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined83 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat84 = predefined83.getFormat();
        java.lang.Character char85 = cSVFormat84.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withDelimiter('a');
        boolean boolean88 = cSVFormat84.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat84.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat90.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter93 = new org.apache.commons.csv.CSVPrinter(appendable77, cSVFormat90);
        java.lang.Appendable appendable94 = cSVPrinter93.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter95 = cSVFormat2.print(appendable94);
        cSVPrinter95.close(false);
        java.sql.ResultSet resultSet98 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter95.printHeaders(resultSet98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertTrue("'" + predefined83 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined83.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNull(char85);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNotNull(cSVFormat92);
        org.junit.Assert.assertNotNull(appendable94);
        org.junit.Assert.assertNotNull(cSVPrinter95);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        long long9 = cSVParser3.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        boolean boolean10 = cSVParser3.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        java.lang.String str12 = cSVParser3.getFirstEndOfLine();
        java.lang.String str13 = cSVParser3.getHeaderComment();
        boolean boolean14 = cSVParser3.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        boolean boolean6 = cSVParser3.isClosed();
        long long7 = cSVParser3.getCurrentLineNumber();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuote((java.lang.Character) '|');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        boolean boolean31 = cSVParser25.hasTrailerComment();
        boolean boolean32 = cSVParser25.isClosed();
        boolean boolean33 = cSVParser25.isClosed();
        long long34 = cSVParser25.getRecordNumber();
        java.util.List<java.lang.String> strList35 = cSVParser25.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(strList35);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat13.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        java.lang.Object[] objArray28 = new java.lang.Object[] { true, cSVFormat22, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat16.withHeaderComments(objArray28);
        cSVPrinter14.printRecord(objArray28);
        cSVPrinter14.close(false);
        cSVPrinter14.printComment("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str36 = cSVFormat35.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setIgnoreHeaderCase(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder42.setHeaderComments(strArray47);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray47);
        cSVPrinter14.printRecord((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder2.setHeaderComments(strArray47);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "," + "'", str36, ",");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSetMetaData6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat13.printer();
        cSVPrinter14.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = cSVFormat28.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        java.lang.Object[] objArray43 = new java.lang.Object[] { true, cSVFormat37, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat31.withHeaderComments(objArray43);
        cSVPrinter29.printRecord(objArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder19.setHeaderComments(objArray43);
        cSVPrinter14.printRecord(objArray43);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder8.setHeaderComments(objArray43);
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat51.withSystemRecordSeparator();
        boolean boolean56 = cSVFormat55.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        java.lang.Character char61 = cSVFormat60.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode64 = cSVFormat60.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat60.withSkipHeaderRecord(true);
        boolean boolean67 = cSVFormat55.equals((java.lang.Object) cSVFormat66);
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat69 = predefined68.getFormat();
        java.lang.Character char70 = cSVFormat69.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat69.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat72.printer();
        cSVPrinter73.flush();
        java.lang.Appendable appendable75 = cSVPrinter73.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter76 = cSVFormat66.print(appendable75);
        org.apache.commons.csv.CSVFormat.Predefined predefined77 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat78 = predefined77.getFormat();
        java.lang.Character char79 = cSVFormat78.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder80 = cSVFormat78.builder();
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder80.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder82.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat85 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray91 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat85.withHeader(strArray91);
        org.apache.commons.csv.CSVFormat.Builder builder93 = builder84.setHeader(strArray91);
        cSVFormat49.printRecord(appendable75, (java.lang.Object[]) strArray91);
        org.apache.commons.csv.CSVFormat.Builder builder95 = builder8.setHeader(strArray91);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVPrinter29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + quoteMode64 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode64.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNull(char70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(appendable75);
        org.junit.Assert.assertNotNull(cSVPrinter76);
        org.junit.Assert.assertTrue("'" + predefined77 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined77.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNull(char79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(cSVFormat92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat25.withEscape('4');
        boolean boolean31 = cSVFormat1.equals((java.lang.Object) cSVFormat30);
        java.sql.ResultSet resultSet32 = null;
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(resultSet32);
        java.lang.String str34 = cSVFormat1.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str34, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str27 = cSVFormat26.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat29.printer();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setIgnoreHeaderCase(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder33.setHeaderComments(strArray38);
        cSVPrinter32.printRecords((java.lang.Object[]) strArray38);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray38);
        java.lang.Class<?> wildcardClass42 = cSVPrinter5.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "," + "'", str27, ",");
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        boolean boolean5 = cSVFormat3.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder2.setDelimiter("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder2.setHeader(resultSet8);
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder2.setHeader(resultSetMetaData10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator();
        long long10 = cSVParser3.getRecordNumber();
        java.lang.String str11 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        cSVPrinter83.flush();
        java.sql.ResultSet resultSet85 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter83.printRecords(resultSet85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass19 = cSVFormat18.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat30.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat30.withSkipHeaderRecord(true);
        boolean boolean37 = cSVFormat25.equals((java.lang.Object) cSVFormat36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat42.printer();
        cSVPrinter43.flush();
        java.lang.Appendable appendable45 = cSVPrinter43.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter46 = cSVFormat36.print(appendable45);
        cSVFormat14.print((java.lang.Object) cSVFormat18, appendable45, true);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withDelimiter(',');
        java.lang.String str51 = cSVFormat14.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(appendable45);
        org.junit.Assert.assertNotNull(cSVPrinter46);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\t" + "'", str51, "\t");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withIgnoreHeaderCase();
        boolean boolean20 = cSVFormat2.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setTrailingDelimiter(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setDelimiter("\r\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        boolean boolean7 = cSVFormat1.isCommentMarkerSet();
        java.lang.String str8 = cSVFormat1.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str8, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
        java.lang.String str6 = cSVFormat5.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<a> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<\t> Escape=<\"> QuoteChar=<a> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('4');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSet17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setHeader(resultSetMetaData39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder36.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder28.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder18.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat4.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withRecordSeparator('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(cSVFormat70);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setHeaderComments(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape(',');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat4.printer();
        cSVPrinter18.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVPrinter18);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        boolean boolean7 = cSVFormat3.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined78 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat79 = predefined78.getFormat();
        java.lang.Character char80 = cSVFormat79.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat79.withDelimiter('a');
        boolean boolean83 = cSVFormat79.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat79.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter88 = new org.apache.commons.csv.CSVPrinter(appendable72, cSVFormat85);
        cSVPrinter88.flush();
        java.sql.ResultSet resultSet90 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter88.printRecords(resultSet90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertTrue("'" + predefined78 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined78.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNull(char80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVFormat87);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setDuplicateHeaderMode(duplicateHeaderMode16);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withHeader(resultSet22);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        cSVPrinter37.flush();
        java.lang.Appendable appendable39 = cSVPrinter37.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat27.print(appendable39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder43.build();
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean49 = cSVFormat48.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat48.withHeaderComments((java.lang.Object[]) strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder43.setHeaderComments((java.lang.Object[]) strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str64 = cSVFormat63.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder65 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat63);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder67.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        java.lang.String str74 = cSVFormat73.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat73.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray83 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat77.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat76.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder71.setHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat62.withHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder59.setHeaderComments(strArray83);
        cSVFormat25.printRecord(appendable39, (java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder17.setHeaderComments(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder17.setQuote((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser8.getHeaderMap();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser8.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(cSVRecordItor10);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray14 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withHeader(strArray14);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder7.setHeader(strArray14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setQuote((java.lang.Character) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setDelimiter("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        boolean boolean10 = cSVParser3.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        boolean boolean12 = cSVParser3.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        cSVPrinter65.close(true);
        cSVPrinter65.printComment("\r\n");
        java.lang.Appendable appendable70 = cSVPrinter65.getOut();
        cSVPrinter65.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined74 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat75 = predefined74.getFormat();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat75);
        java.lang.String str77 = cSVParser76.getFirstEndOfLine();
        boolean boolean78 = cSVParser76.hasHeaderComment();
        cSVParser76.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream80 = cSVParser76.stream();
        java.lang.String str81 = cSVParser76.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator82 = cSVParser76.spliterator();
        long long83 = cSVParser76.getRecordNumber();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        java.util.Map<java.lang.String, java.lang.Integer> strMap85 = cSVParser76.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        boolean boolean87 = cSVParser76.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable70);
        org.junit.Assert.assertTrue("'" + predefined74 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined74.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNull(strMap85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        java.lang.String[] strArray14 = cSVFormat7.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat16.withIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape('4');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setRecordSeparator('\"');
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setHeader(resultSet21);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withHeaderComments((java.lang.Object[]) strArray9);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withDelimiter('a');
        boolean boolean17 = cSVFormat13.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass40 = cSVFormat39.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat42.withSystemRecordSeparator();
        boolean boolean47 = cSVFormat46.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode55 = cSVFormat51.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat51.withSkipHeaderRecord(true);
        boolean boolean58 = cSVFormat46.equals((java.lang.Object) cSVFormat57);
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        java.lang.Character char61 = cSVFormat60.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter64 = cSVFormat63.printer();
        cSVPrinter64.flush();
        java.lang.Appendable appendable66 = cSVPrinter64.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat57.print(appendable66);
        cSVFormat35.print((java.lang.Object) cSVFormat39, appendable66, true);
        cSVFormat20.println(appendable66);
        cSVFormat11.println(appendable66);
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        java.lang.Character char74 = cSVFormat73.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat73.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode77 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat76.withQuoteMode(quoteMode77);
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat76.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined81 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat82 = predefined81.getFormat();
        java.lang.Character char83 = cSVFormat82.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder84 = cSVFormat82.builder();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat82.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined86 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat87 = predefined86.getFormat();
        java.lang.Character char88 = cSVFormat87.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat87.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter91 = cSVFormat90.printer();
        java.lang.Appendable appendable92 = cSVPrinter91.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter93 = cSVFormat82.print(appendable92);
        cSVFormat11.print((java.lang.Object) false, appendable92, true);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + quoteMode55 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode55.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVPrinter64);
        org.junit.Assert.assertNotNull(appendable66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNull(char74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertTrue("'" + quoteMode77 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode77.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertTrue("'" + predefined81 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined81.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNull(char83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertTrue("'" + predefined86 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined86.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNull(char88);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNotNull(cSVPrinter91);
        org.junit.Assert.assertNotNull(appendable92);
        org.junit.Assert.assertNotNull(cSVPrinter93);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator(' ');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str36 = cSVFormat35.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setIgnoreHeaderCase(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder42.setHeaderComments(strArray47);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray47);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat53);
        java.lang.String str55 = cSVParser54.getFirstEndOfLine();
        boolean boolean56 = cSVParser54.hasHeaderComment();
        cSVParser54.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream58 = cSVParser54.stream();
        java.lang.String str59 = cSVParser54.getFirstEndOfLine();
        boolean boolean60 = cSVParser54.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList61 = cSVParser54.getRecords();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList61);
        org.apache.commons.csv.CSVFormat.Predefined predefined64 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat65 = predefined64.getFormat();
        org.apache.commons.csv.CSVParser cSVParser66 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat65);
        java.lang.String str67 = cSVParser66.getFirstEndOfLine();
        boolean boolean68 = cSVParser66.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor69 = cSVParser66.iterator();
        java.lang.String str70 = cSVParser66.getFirstEndOfLine();
        java.lang.String str71 = cSVParser66.getHeaderComment();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser66);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "," + "'", str36, ",");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVParser54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(cSVRecordList61);
        org.junit.Assert.assertTrue("'" + predefined64 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined64.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVParser66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        java.lang.String[] strArray11 = cSVFormat8.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withSkipHeaderRecord(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        java.lang.String str6 = cSVFormat5.getNullString();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withTrim(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat10.withHeader(strArray44);
        java.lang.Class<?> wildcardClass51 = strArray44.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        java.util.List<java.lang.String> strList35 = cSVParser27.getHeaderNames();
        java.util.Map<java.lang.String, java.lang.Integer> strMap36 = cSVParser27.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(strMap36);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
        boolean boolean9 = cSVParser3.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setHeader(resultSetMetaData18);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder19.setHeaderComments(strArray21);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray21);
        cSVPrinter5.flush();
        cSVPrinter5.close(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat10.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDuplicateHeaderMode(duplicateHeaderMode11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder5.setAllowMissingColumnNames(true);
        java.sql.ResultSetMetaData resultSetMetaData15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setHeader(resultSetMetaData15);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        boolean boolean6 = cSVFormat1.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withHeader(resultSet16);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat17.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat13.printer();
        cSVPrinter14.flush();
        java.lang.Appendable appendable16 = cSVPrinter14.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat8.print(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat8.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("a", cSVFormat18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withAllowDuplicateHeaderNames(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The header contains a duplicate name: \",\" in [,, hi!, ,, hi!, ,]. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSet10);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder21.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder11.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAllowDuplicateHeaderNames(true);
        java.sql.ResultSetMetaData resultSetMetaData63 = null;
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setHeader(resultSetMetaData63);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        cSVPrinter20.printRecord(objArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder10.setHeaderComments(objArray34);
        cSVPrinter5.printRecord(objArray34);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.Character char43 = cSVFormat42.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder44 = cSVFormat42.builder();
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        java.lang.String str61 = cSVFormat60.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withQuote('a');
        java.lang.Object[] objArray64 = new java.lang.Object[] { true, cSVFormat58, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat52.withHeaderComments(objArray64);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder50.setHeaderComments(objArray64);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder50.setAllowMissingColumnNames(false);
        cSVPrinter5.print((java.lang.Object) builder68);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(char43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder4.setHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.Character char53 = cSVFormat52.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder54 = cSVFormat52.builder();
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData59 = null;
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder56.setHeader(resultSetMetaData59);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder60.setHeaderComments(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder4.setHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined71 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat72 = predefined71.getFormat();
        java.lang.String str73 = cSVFormat72.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat72.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined77 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat78 = predefined77.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined79 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat80 = predefined79.getFormat();
        java.lang.String str81 = cSVFormat80.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat80.withQuote('a');
        java.lang.Object[] objArray84 = new java.lang.Object[] { true, cSVFormat78, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat72.withHeaderComments(objArray84);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat85.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat85.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat90.withFirstRecordAsHeader();
        java.sql.ResultSet resultSet92 = null;
        org.apache.commons.csv.CSVFormat cSVFormat93 = cSVFormat90.withHeader(resultSet92);
        java.lang.String[] strArray94 = cSVFormat90.getHeaderComments();
        cSVPrinter70.printRecords((java.lang.Object[]) strArray94);
        org.apache.commons.csv.CSVFormat.Builder builder96 = builder64.setHeader(strArray94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = cSVFormat0.format((java.lang.Object[]) strArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(char53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertTrue("'" + predefined71 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined71.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertTrue("'" + predefined77 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined77.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertTrue("'" + predefined79 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined79.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNotNull(cSVFormat91);
        org.junit.Assert.assertNotNull(cSVFormat93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withHeader(resultSet16);
        java.lang.String str18 = cSVFormat17.getNullString();
        java.nio.file.Path path19 = null;
        java.nio.charset.Charset charset20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat17.print(path19, charset20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setHeader(resultSetMetaData41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.Character char47 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder48 = cSVFormat46.builder();
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray59 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withHeader(strArray59);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder52.setHeader(strArray59);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder42.setHeader(strArray59);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder26.setHeader(strArray59);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray59);
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(char47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        java.sql.ResultSet resultSet50 = null;
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setHeader(resultSet50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder56 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str62 = cSVFormat61.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat64.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode67 = cSVFormat66.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder60.setDuplicateHeaderMode(duplicateHeaderMode67);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder49.setDuplicateHeaderMode(duplicateHeaderMode67);
        java.lang.String[] strArray70 = null;
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder49.setHeaderComments(strArray70);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "," + "'", str62, ",");
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode67 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode67.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        java.lang.Object[] objArray35 = new java.lang.Object[] { true, cSVFormat29, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat23.withHeaderComments(objArray35);
        cSVPrinter21.printRecord(objArray35);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat40);
        java.lang.String str42 = cSVParser41.getFirstEndOfLine();
        boolean boolean43 = cSVParser41.hasHeaderComment();
        cSVParser41.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser41.stream();
        long long46 = cSVParser41.getCurrentLineNumber();
        cSVPrinter21.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser41);
        java.lang.String str48 = cSVParser41.getHeaderComment();
        boolean boolean49 = cSVFormat1.equals((java.lang.Object) cSVParser41);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat1.withIgnoreSurroundingSpaces();
        boolean boolean51 = cSVFormat1.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) '\t');
        boolean boolean4 = cSVFormat3.getSkipHeaderRecord();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker((java.lang.Character) '\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + quoteMode1 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode1.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.sql.ResultSetMetaData resultSetMetaData4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withHeader(resultSetMetaData4);
        java.lang.Character char6 = cSVFormat1.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder2.setHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeaderComments(strArray42);
        java.sql.ResultSet resultSet48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder18.setHeader(resultSet48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder18.setHeaderComments(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.String str63 = cSVFormat62.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat62.withSystemRecordSeparator();
        boolean boolean67 = cSVFormat66.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat71.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined74 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat75 = predefined74.getFormat();
        java.lang.Character char76 = cSVFormat75.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat75.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter79 = cSVFormat78.printer();
        cSVPrinter79.close(true);
        cSVPrinter79.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined84 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat85 = predefined84.getFormat();
        java.lang.Character char86 = cSVFormat85.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder87 = cSVFormat85.builder();
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder87.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder91 = builder89.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData92 = null;
        org.apache.commons.csv.CSVFormat.Builder builder93 = builder89.setHeader(resultSetMetaData92);
        java.lang.String[] strArray95 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder96 = builder93.setHeaderComments(strArray95);
        cSVPrinter79.printRecord((java.lang.Object[]) strArray95);
        org.apache.commons.csv.CSVFormat cSVFormat98 = cSVFormat73.withHeader(strArray95);
        org.apache.commons.csv.CSVFormat.Builder builder99 = builder18.setHeader(strArray95);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertTrue("'" + predefined74 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined74.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNull(char76);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVPrinter79);
        org.junit.Assert.assertTrue("'" + predefined84 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined84.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(cSVFormat98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.QuoteMode quoteMode9 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setQuoteMode(quoteMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowDuplicateHeaderNames(false);
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setHeader(resultSet13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAllowMissingColumnNames(false);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setHeader(resultSet17);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat2.withSkipHeaderRecord();
        boolean boolean21 = cSVFormat20.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withSkipHeaderRecord(false);
        boolean boolean13 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        java.lang.String str10 = cSVParser3.getTrailerComment();
        java.util.List<java.lang.String> strList11 = cSVParser3.getHeaderNames();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser3.stream();
        boolean boolean13 = cSVParser3.isClosed();
        java.lang.String str14 = cSVParser3.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentMarker((java.lang.Character) ' ');
        java.lang.String[] strArray10 = cSVFormat5.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withCommentMarker('#');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat14.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.List<java.lang.String> strList22 = cSVParser16.getHeaderNames();
        java.lang.String str23 = cSVParser16.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) ' ');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode4 = cSVFormat0.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode4 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode4.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat11.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, cSVFormat20, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withHeaderComments(objArray26);
        cSVPrinter12.printRecord(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder2.setHeaderComments(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String[] strArray2 = cSVFormat1.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(strArray2);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuote('\t');
        boolean boolean3 = cSVFormat2.isQuoteCharacterSet();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat2.parse(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat12.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray22 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withHeader(strArray22);
        boolean boolean24 = cSVFormat23.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat30 = builder27.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode36 = cSVFormat32.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat32.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withQuote((java.lang.Character) '|');
        org.apache.commons.csv.QuoteMode quoteMode40 = cSVFormat39.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder27.setQuoteMode(quoteMode40);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat12.withQuoteMode(quoteMode40);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + quoteMode36 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode36.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + quoteMode40 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode40.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat19.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat19.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withHeader(strArray44);
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat14.withSkipHeaderRecord();
        boolean boolean53 = cSVFormat52.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) ',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser10.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.QuoteMode quoteMode9 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setQuoteMode(quoteMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowDuplicateHeaderNames(false);
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setHeader(resultSet13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder18 = cSVFormat16.builder();
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str32 = cSVFormat31.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withTrailingDelimiter(false);
        java.lang.Character char35 = cSVFormat34.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode36 = cSVFormat34.getQuoteMode();
        java.lang.Character char37 = cSVFormat34.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat34.withIgnoreEmptyLines(false);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode40 = cSVFormat34.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder28.setDuplicateHeaderMode(duplicateHeaderMode40);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder10.setDuplicateHeaderMode(duplicateHeaderMode40);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "," + "'", str32, ",");
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertTrue("'" + quoteMode36 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode36.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode40 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode40.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setHeader(resultSetMetaData18);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder19.setHeaderComments(strArray21);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray21);
        java.sql.ResultSet resultSet24 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withAllowMissingColumnNames(true);
        java.lang.String str15 = cSVFormat10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false" + "'", str15, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.String str7 = cSVFormat6.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withSystemRecordSeparator();
        boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        cSVPrinter20.flush();
        java.lang.Appendable appendable22 = cSVPrinter20.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat10.print(appendable22);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat2.print(appendable22);
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(appendable22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        java.lang.Object[] objArray27 = new java.lang.Object[] { true, cSVFormat21, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat15.withHeaderComments(objArray27);
        cSVPrinter13.printRecord(objArray27);
        cSVPrinter13.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat34);
        java.lang.String str36 = cSVParser35.getFirstEndOfLine();
        boolean boolean37 = cSVParser35.hasHeaderComment();
        cSVParser35.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream39 = cSVParser35.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList40 = cSVParser35.getRecords();
        java.lang.String str41 = cSVParser35.getTrailerComment();
        cSVPrinter13.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser35);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str44 = cSVFormat43.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter49 = cSVFormat46.printer();
        org.apache.commons.csv.CSVFormat.Builder builder50 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setIgnoreHeaderCase(true);
        java.lang.String[] strArray55 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder50.setHeaderComments(strArray55);
        cSVPrinter49.printRecords((java.lang.Object[]) strArray55);
        cSVPrinter13.printRecord((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray55);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream39);
        org.junit.Assert.assertNotNull(cSVRecordList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "," + "'", str44, ",");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVPrinter49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat59);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withAllowMissingColumnNames();
        boolean boolean9 = cSVFormat4.getAutoFlush();
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withHeader(resultSet10);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withHeader(resultSet16);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.QuoteMode quoteMode21 = cSVFormat17.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + quoteMode21 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode21.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder3.setRecordSeparator(',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        boolean boolean83 = cSVFormat7.isQuoteCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat7.withEscape((java.lang.Character) ',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        long long6 = cSVParser3.getCurrentLineNumber();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines(true);
        boolean boolean11 = cSVFormat8.getAutoFlush();
        java.nio.file.Path path12 = null;
        java.nio.charset.Charset charset13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat8.print(path12, charset13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        java.sql.ResultSetMetaData resultSetMetaData26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setHeader(resultSetMetaData26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder30 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat28);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder32.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat41.withSystemRecordSeparator();
        boolean boolean46 = cSVFormat45.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.Character char51 = cSVFormat50.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode54 = cSVFormat50.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat50.withSkipHeaderRecord(true);
        boolean boolean57 = cSVFormat45.equals((java.lang.Object) cSVFormat56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.Character char60 = cSVFormat59.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter63 = cSVFormat62.printer();
        cSVPrinter63.flush();
        java.lang.Appendable appendable65 = cSVPrinter63.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat56.print(appendable65);
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        java.lang.Character char69 = cSVFormat68.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder70 = cSVFormat68.builder();
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder70.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder72.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat75 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray81 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat75.withHeader(strArray81);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder74.setHeader(strArray81);
        cSVFormat39.printRecord(appendable65, (java.lang.Object[]) strArray81);
        org.apache.commons.csv.CSVFormat.Builder builder85 = builder36.setHeader(strArray81);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder25.setHeaderComments(strArray81);
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder25.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + quoteMode54 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode54.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(char60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVPrinter63);
        org.junit.Assert.assertNotNull(appendable65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<|> Escape=<#> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<|> Escape=<#> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat0.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat3 = builder0.build();
        boolean boolean4 = cSVFormat3.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat3.getAutoFlush();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withSystemRecordSeparator();
        boolean boolean27 = cSVFormat26.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat33.withHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat30.withHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode60 = cSVFormat59.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder16.setDuplicateHeaderMode(duplicateHeaderMode60);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder9.setDuplicateHeaderMode(duplicateHeaderMode60);
        java.sql.ResultSetMetaData resultSetMetaData63 = null;
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setHeader(resultSetMetaData63);
        java.sql.ResultSetMetaData resultSetMetaData65 = null;
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder62.setHeader(resultSetMetaData65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder62.setCommentMarker((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode60 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode60.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setDelimiter('\t');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        cSVParser9.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser9.getHeaderMap();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser9.stream();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withNullString("INVALID []");
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuote('a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat18.withTrim();
        boolean boolean20 = cSVFormat19.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = cSVFormat15.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder10.setDuplicateHeaderMode(duplicateHeaderMode16);
        java.lang.Object[] objArray18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setHeaderComments(objArray18);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        boolean boolean24 = cSVFormat1.equals((java.lang.Object) builder21);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat5.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withSystemRecordSeparator();
        boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat13.print(appendable25);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat5.print(appendable25);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat29.builder();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.Character char44 = cSVFormat43.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder45 = cSVFormat43.builder();
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder45.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder45.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.Character char56 = cSVFormat55.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode59 = cSVFormat55.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str64 = cSVFormat63.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder65 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat63);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder67.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        java.lang.String str74 = cSVFormat73.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat73.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray83 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat77.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat76.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder71.setHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat62.withHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat55.withHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder53.setHeader(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder39.setHeaderComments((java.lang.Object[]) strArray83);
        cSVFormat3.printRecord(appendable25, (java.lang.Object[]) strArray83);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(char56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertTrue("'" + quoteMode59 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode59.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withNullString("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        boolean boolean7 = cSVFormat4.getAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withCommentMarker('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat1.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(',');
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        java.lang.Character char3 = cSVFormat1.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withHeader(resultSet13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withIgnoreEmptyLines(true);
        org.apache.commons.csv.QuoteMode quoteMode17 = cSVFormat12.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + quoteMode17 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode17.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker('|');
        boolean boolean7 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setHeader(resultSetMetaData15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setHeader(resultSetMetaData27);
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat42.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder37.setHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder24.setHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.Character char56 = cSVFormat55.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter59 = cSVFormat58.printer();
        cSVPrinter59.close(true);
        cSVPrinter59.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined64 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat65 = predefined64.getFormat();
        java.lang.Character char66 = cSVFormat65.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder67 = cSVFormat65.builder();
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder69.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData72 = null;
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder69.setHeader(resultSetMetaData72);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder73.setHeaderComments(strArray75);
        cSVPrinter59.printRecord((java.lang.Object[]) strArray75);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder53.setHeaderComments(strArray75);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder14.setHeaderComments((java.lang.Object[]) strArray75);
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat1.withHeader(strArray75);
        java.lang.Class<?> wildcardClass81 = cSVFormat1.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(char56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVPrinter59);
        org.junit.Assert.assertTrue("'" + predefined64 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined64.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNull(char66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat6.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = builder9.build();
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withHeader(resultSetMetaData11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str14 = cSVFormat13.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowDuplicateHeaderNames(true);
        boolean boolean19 = cSVFormat18.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode26 = cSVFormat22.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        cSVPrinter32.flush();
        java.lang.Appendable appendable34 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat22.print(appendable34);
        cSVFormat12.print((java.lang.Object) cSVFormat18, appendable34, false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "," + "'", str14, ",");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + quoteMode26 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode26.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable34);
        org.junit.Assert.assertNotNull(cSVPrinter35);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withIgnoreEmptyLines(false);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode13 = cSVFormat5.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode13 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode13.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, cSVFormat15, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat9.withHeaderComments(objArray21);
        cSVPrinter7.printRecord(objArray21);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        cSVParser27.close();
        cSVPrinter7.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        boolean boolean33 = cSVParser27.hasTrailerComment();
        boolean boolean34 = cSVParser27.isClosed();
        boolean boolean35 = cSVParser27.isClosed();
        long long36 = cSVParser27.getRecordNumber();
        boolean boolean37 = cSVFormat1.equals((java.lang.Object) long36);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        boolean boolean13 = cSVFormat12.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat12.withQuote((java.lang.Character) '\"');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat12.withAllowDuplicateHeaderNames(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The header contains a duplicate name: \",\" in [,, hi!, ,, hi!, ,]. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        boolean boolean9 = cSVFormat5.isNullStringSet();
        boolean boolean10 = cSVFormat5.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        boolean boolean10 = cSVFormat9.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        long long8 = cSVParser3.getCurrentLineNumber();
        cSVParser3.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter();
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat0.withHeader(resultSet8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        java.lang.String str16 = cSVFormat14.toString();
        boolean boolean17 = cSVFormat14.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder21 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setSkipHeaderRecord(false);
        boolean boolean28 = cSVFormat14.equals((java.lang.Object) false);
        java.lang.String[] strArray29 = cSVFormat14.getHeaderComments();
        cSVPrinter5.print((java.lang.Object) cSVFormat14);
        cSVPrinter5.printComment("INVALID []");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str16, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strArray29);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder5.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder5.setEscape(' ');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode14 = org.apache.commons.csv.DuplicateHeaderMode.DISALLOW;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder5.setDuplicateHeaderMode(duplicateHeaderMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder5.setDelimiter("INVALID []");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode14 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.DISALLOW + "'", duplicateHeaderMode14.equals(org.apache.commons.csv.DuplicateHeaderMode.DISALLOW));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        boolean boolean3 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode4 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode4 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode4.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        boolean boolean6 = cSVFormat5.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode9 = cSVFormat5.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        boolean boolean5 = cSVFormat0.getIgnoreSurroundingSpaces();
        java.lang.String str6 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "," + "'", str6, ",");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withNullString("#");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode50 = cSVFormat49.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder6.setDuplicateHeaderMode(duplicateHeaderMode50);
        org.apache.commons.csv.CSVFormat cSVFormat52 = builder51.build();
        org.apache.commons.csv.CSVFormat cSVFormat53 = builder51.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode50 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode50.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withIgnoreHeaderCase();
        char char20 = cSVFormat19.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\t' + "'", char20 == '\t');
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setNullString("\t");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        boolean boolean7 = cSVFormat6.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter(' ');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode17 = cSVFormat13.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat13.print(appendable25);
        cSVFormat11.println(appendable25);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + quoteMode17 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode17.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray22 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withHeader(strArray22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder39 = cSVFormat37.builder();
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData44 = null;
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder41.setHeader(resultSetMetaData44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str47 = cSVFormat46.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder48 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat46);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray66 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat60.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat59.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder54.setHeaderComments((java.lang.Object[]) strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder33.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat23.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder11.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder11.setNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser13.getHeaderMap();
        java.lang.String str18 = cSVParser13.getFirstEndOfLine();
        java.util.List<java.lang.String> strList19 = cSVParser13.getHeaderNames();
        boolean boolean20 = cSVParser13.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream21 = cSVParser13.stream();
        long long22 = cSVParser13.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        java.sql.ResultSet resultSet24 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat5.getDuplicateHeaderMode();
        java.lang.String str7 = cSVFormat5.getNullString();
        java.lang.Character char8 = cSVFormat5.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(char8);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        org.apache.commons.csv.CSVFormat.Builder builder78 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat79 = builder78.build();
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder78.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet82 = null;
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder81.setHeader(resultSet82);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        cSVPrinter17.flush();
        java.lang.Appendable appendable19 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat11.print(appendable19);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat6.print(appendable19);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder10.setHeaderComments((java.lang.Object[]) strArray17);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.lang.String[] strArray7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat0.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        long long16 = cSVParser10.getRecordNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser10.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(strMap17);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet4);
        java.nio.file.Path path6 = null;
        java.nio.charset.Charset charset7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat5.print(path6, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        boolean boolean14 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withQuote('a');
        java.lang.Object[] objArray31 = new java.lang.Object[] { true, cSVFormat25, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat19.withHeaderComments(objArray31);
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass37 = cSVFormat36.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat39.withSystemRecordSeparator();
        boolean boolean44 = cSVFormat43.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode52 = cSVFormat48.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat48.withSkipHeaderRecord(true);
        boolean boolean55 = cSVFormat43.equals((java.lang.Object) cSVFormat54);
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat60.printer();
        cSVPrinter61.flush();
        java.lang.Appendable appendable63 = cSVPrinter61.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter64 = cSVFormat54.print(appendable63);
        cSVFormat32.print((java.lang.Object) cSVFormat36, appendable63, true);
        cSVFormat12.println(appendable63);
        org.apache.commons.csv.CSVPrinter cSVPrinter68 = cSVFormat3.print(appendable63);
        java.lang.String[] strArray69 = cSVFormat3.getHeaderComments();
        java.lang.String[] strArray70 = cSVFormat3.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + quoteMode52 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode52.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVPrinter61);
        org.junit.Assert.assertNotNull(appendable63);
        org.junit.Assert.assertNotNull(cSVPrinter64);
        org.junit.Assert.assertNotNull(cSVPrinter68);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNull(strArray70);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat11.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat17.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean28 = cSVFormat27.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = new org.apache.commons.csv.CSVPrinter(appendable25, cSVFormat27);
        cSVFormat8.println(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat8.withEscape((java.lang.Character) '\"');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVFormat32);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        cSVPrinter18.close(true);
        cSVPrinter18.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder26 = cSVFormat24.builder();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setHeader(resultSetMetaData31);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder32.setHeaderComments(strArray34);
        cSVPrinter18.printRecord((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat12.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat12.withAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        java.sql.ResultSet resultSet50 = null;
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setHeader(resultSet50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder49.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder49.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder49.setIgnoreHeaderCase(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withAllowMissingColumnNames();
        boolean boolean9 = cSVFormat4.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withHeader(resultSet13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray21 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withHeader(strArray21);
        boolean boolean23 = cSVFormat22.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withIgnoreSurroundingSpaces(false);
        boolean boolean28 = cSVFormat12.equals((java.lang.Object) cSVFormat27);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat12.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str32 = cSVFormat31.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat34.printer();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setIgnoreHeaderCase(true);
        java.lang.String[] strArray43 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder38.setHeaderComments(strArray43);
        cSVPrinter37.printRecords((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat4.withHeader(strArray43);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "," + "'", str32, ",");
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat47);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat11.printer();
        java.lang.Appendable appendable13 = cSVPrinter12.getOut();
        java.lang.Appendable appendable14 = cSVPrinter12.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat5.print(appendable14);
        cSVPrinter15.printComment("|");
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        cSVPrinter23.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str28 = cSVFormat27.getDelimiterString();
        boolean boolean29 = cSVFormat27.isEscapeCharacterSet();
        cSVPrinter23.print((java.lang.Object) boolean29);
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat33);
        java.util.List<java.lang.String> strList35 = cSVParser34.getHeaderNames();
        boolean boolean36 = cSVParser34.hasTrailerComment();
        boolean boolean37 = cSVParser34.hasHeaderComment();
        java.lang.String str38 = cSVParser34.getTrailerComment();
        cSVPrinter23.print((java.lang.Object) cSVParser34);
        boolean boolean40 = cSVParser34.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter15.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser34);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(quoteMode6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(appendable14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "," + "'", str28, ",");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        java.lang.Object[] objArray35 = new java.lang.Object[] { true, cSVFormat29, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat23.withHeaderComments(objArray35);
        cSVPrinter21.printRecord(objArray35);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat40);
        java.lang.String str42 = cSVParser41.getFirstEndOfLine();
        boolean boolean43 = cSVParser41.hasHeaderComment();
        cSVParser41.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser41.stream();
        long long46 = cSVParser41.getCurrentLineNumber();
        cSVPrinter21.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser41);
        java.lang.String str48 = cSVParser41.getHeaderComment();
        boolean boolean49 = cSVFormat1.equals((java.lang.Object) cSVParser41);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser41.getRecords();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVRecordList50);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.lang.String str9 = cSVParser3.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray30 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withHeader(strArray30);
        boolean boolean32 = cSVFormat31.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet35 = null;
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat31.withHeader(resultSet35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat36.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = new org.apache.commons.csv.CSVPrinter(appendable21, cSVFormat36);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuote('|');
        boolean boolean43 = cSVFormat40.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }
}

