import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.csv.CSVFormat cSVFormat0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder1 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, 0L, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        java.lang.String str4 = cSVFormat2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MySQL;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MySQL + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MySQL));
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat2.print((java.lang.Object) '#', appendable5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withEscape((java.lang.Character) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape((java.lang.Character) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withHeader(resultSet10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        boolean boolean7 = cSVFormat3.isQuoteCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf(",");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.,");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withHeader(resultSet6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv));
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withHeader(resultSet8);
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat9.parse(reader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.Excel;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.Excel + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.Excel));
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode0 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode0 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode0.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        java.nio.file.Path path6 = null;
        java.nio.charset.Charset charset7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat1.print(path6, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat3.builder();
        java.lang.String str6 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withHeader(resultSet7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        java.io.File file7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat6.print(file7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray13 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withHeader(strArray13);
        boolean boolean15 = cSVFormat14.getTrim();
        boolean boolean16 = cSVFormat14.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode19 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withRecordSeparator("a");
        java.lang.Object[] objArray24 = new java.lang.Object[] { cSVFormat18, duplicateHeaderMode19, cSVFormat23 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = cSVFormat5.format(objArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode19 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode19.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[Delimiter=<,> QuoteChar=<a> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,], ALLOW_EMPTY, Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<a> SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[Delimiter=<,> QuoteChar=<a> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,], ALLOW_EMPTY, Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<a> SkipHeaderRecord:false]");
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a" + "'", str3, "a");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.sql.ResultSet resultSet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        java.sql.ResultSet resultSet8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (byte) 100, (long) '\"');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) ',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentMarker('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withHeader(resultSet9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.sql.ResultSet resultSet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setHeader(resultSetMetaData12);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat3.builder();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDelimiter("\r\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = cSVFormat0.format(objArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        java.sql.ResultSet resultSet26 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat0.parse(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        java.lang.Class<?> wildcardClass8 = appendable7.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        java.sql.ResultSet resultSet8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        java.sql.ResultSet resultSet22 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet22, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuote(',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str6 = cSVFormat5.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray25 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat19.withHeader(strArray25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat18.withHeader(strArray25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder13.setHeaderComments((java.lang.Object[]) strArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = cSVFormat3.format((java.lang.Object[]) strArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter("\\N");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setDelimiter("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat4.withHeader(resultSet18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat4.withIgnoreEmptyLines();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentMarker('\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        boolean boolean7 = cSVFormat2.getTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (-1), (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        java.util.List<java.lang.String> strList12 = cSVParser11.getHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser11);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        java.lang.String[] strArray10 = cSVFormat5.getHeaderComments();
        boolean boolean11 = cSVFormat5.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\t');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = cSVFormat0.format(objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat5.print(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray14 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withHeader(strArray14);
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat15);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setAutoFlush(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
        java.lang.String str9 = cSVParser3.getTrailerComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser3.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator10);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        boolean boolean6 = cSVFormat1.getTrailingDelimiter();
        java.io.File file7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat1.print(file7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder16.setHeader(strArray23);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray23);
        cSVPrinter5.flush();
        java.sql.ResultSet resultSet28 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        java.nio.file.Path path7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat6.print(path7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setNullString("a");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        java.nio.file.Path path8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat5.print(path8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat6.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withQuoteMode(quoteMode10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withCommentMarker('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat30);
        java.lang.String str32 = cSVParser31.getFirstEndOfLine();
        boolean boolean33 = cSVParser31.hasHeaderComment();
        cSVParser31.close();
        long long35 = cSVParser31.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser31);
        boolean boolean37 = cSVParser31.hasTrailerComment();
        boolean boolean38 = cSVParser31.isClosed();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor39 = cSVParser31.iterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(cSVRecordItor39);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        char char5 = cSVFormat3.getDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat3, (long) (byte) 100, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t');
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        java.lang.Class<?> wildcardClass18 = cSVFormat16.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        java.lang.String[] strArray14 = cSVFormat13.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(strArray14);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setDuplicateHeaderMode(duplicateHeaderMode8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: duplicateHeaderMode");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("INVALID []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.INVALID []");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        boolean boolean6 = cSVFormat4.getTrailingDelimiter();
        java.io.File file7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat4.print(file7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\t", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat26.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder21.setHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray33);
        java.nio.file.Path path39 = null;
        java.nio.charset.Charset charset40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat9.print(path39, charset40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        java.io.File file2 = null;
        java.nio.charset.Charset charset3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.print(file2, charset3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        java.nio.file.Path path18 = null;
        java.nio.charset.Charset charset19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat4.print(path18, charset19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuote('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withQuote('a');
        java.lang.Object[] objArray20 = new java.lang.Object[] { true, cSVFormat14, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat8.withHeaderComments(objArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = cSVFormat4.format(objArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        java.lang.String str13 = cSVFormat11.toString();
        boolean boolean14 = cSVFormat11.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder18 = cSVFormat16.builder();
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setSkipHeaderRecord(false);
        boolean boolean25 = cSVFormat11.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat11.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        java.lang.Object[] objArray41 = new java.lang.Object[] { true, cSVFormat35, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat29.withHeaderComments(objArray41);
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass47 = cSVFormat46.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.String str50 = cSVFormat49.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat49.withSystemRecordSeparator();
        boolean boolean54 = cSVFormat53.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.Character char59 = cSVFormat58.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode62 = cSVFormat58.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat58.withSkipHeaderRecord(true);
        boolean boolean65 = cSVFormat53.equals((java.lang.Object) cSVFormat64);
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.Character char68 = cSVFormat67.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter71 = cSVFormat70.printer();
        cSVPrinter71.flush();
        java.lang.Appendable appendable73 = cSVPrinter71.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat64.print(appendable73);
        cSVFormat42.print((java.lang.Object) cSVFormat46, appendable73, true);
        cSVFormat8.print((java.lang.Object) '\t', appendable73, true);
        java.lang.String str79 = cSVFormat8.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat8.withTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser81 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str13, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(char59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertTrue("'" + quoteMode62 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode62.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(char68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVPrinter71);
        org.junit.Assert.assertNotNull(appendable73);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\n" + "'", str79, "\n");
        org.junit.Assert.assertNotNull(cSVFormat80);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withCommentMarker((java.lang.Character) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat11.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withSkipHeaderRecord(true);
        boolean boolean18 = cSVFormat6.equals((java.lang.Object) cSVFormat17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat23.printer();
        cSVPrinter24.flush();
        java.lang.Appendable appendable26 = cSVPrinter24.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat17.print(appendable26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat17.withIgnoreHeaderCase();
        java.sql.ResultSet resultSet29 = null;
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withHeader(resultSet29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser33 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat28, 0L, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(appendable26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.nio.file.Path path9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat7.print(path9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        java.lang.Class<?> wildcardClass8 = quoteMode7.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder12.build();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setEscape((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter5.close();
        java.sql.ResultSet resultSet29 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withHeader(resultSet6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreHeaderCase(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder11.setHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat2.withHeaderComments((java.lang.Object[]) strArray23);
        java.lang.String str28 = cSVFormat2.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str28, "Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat6.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        cSVPrinter5.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withNullString("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        long long16 = cSVParser10.getRecordNumber();
        java.lang.String str17 = cSVParser10.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAllowMissingColumnNames(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat26.printer();
        cSVPrinter27.close(true);
        cSVPrinter27.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder41.setHeaderComments(strArray43);
        cSVPrinter27.printRecord((java.lang.Object[]) strArray43);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray43);
        java.sql.ResultSet resultSet47 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet47, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        java.lang.String str14 = cSVFormat12.toString();
        boolean boolean15 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setSkipHeaderRecord(false);
        boolean boolean26 = cSVFormat12.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat12.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuote('a');
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, cSVFormat36, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat30.withHeaderComments(objArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat45.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass48 = cSVFormat47.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat50.withSystemRecordSeparator();
        boolean boolean55 = cSVFormat54.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.Character char60 = cSVFormat59.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode63 = cSVFormat59.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat59.withSkipHeaderRecord(true);
        boolean boolean66 = cSVFormat54.equals((java.lang.Object) cSVFormat65);
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        java.lang.Character char69 = cSVFormat68.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat71.printer();
        cSVPrinter72.flush();
        java.lang.Appendable appendable74 = cSVPrinter72.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat65.print(appendable74);
        cSVFormat43.print((java.lang.Object) cSVFormat47, appendable74, true);
        cSVFormat9.print((java.lang.Object) '\t', appendable74, true);
        java.lang.String str80 = cSVFormat9.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat9.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat9.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat83.withTrailingDelimiter(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser86 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str14, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(char60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + quoteMode63 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode63.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertNotNull(appendable74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\n" + "'", str80, "\n");
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(cSVFormat85);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.printer();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreHeaderCase(true);
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setHeaderComments(strArray12);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray12);
        java.sql.ResultSet resultSet15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printRecords(resultSet15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        char char12 = cSVFormat10.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        java.lang.Appendable appendable24 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat14.print(appendable24);
        cSVFormat10.println(appendable24);
        cSVFormat1.println(appendable24);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\t' + "'", char12 == '\t');
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable24);
        org.junit.Assert.assertNotNull(cSVPrinter25);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines(true);
        java.io.File file11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat8.print(file11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withSkipHeaderRecord(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        java.sql.ResultSet resultSet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printHeaders(resultSet7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat6.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray14 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withHeader(strArray14);
        boolean boolean16 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        boolean boolean18 = cSVFormat6.equals((java.lang.Object) cSVFormat15);
        boolean boolean19 = cSVFormat6.getIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withEscape('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9, (long) (short) 10, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote('\t');
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder4.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentMarker((java.lang.Character) ' ');
        java.lang.String str10 = cSVFormat9.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode0 = org.apache.commons.csv.DuplicateHeaderMode.DISALLOW;
        java.lang.Class<?> wildcardClass1 = duplicateHeaderMode0.getClass();
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode0 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.DISALLOW + "'", duplicateHeaderMode0.equals(org.apache.commons.csv.DuplicateHeaderMode.DISALLOW));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat0.parse(reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder7.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker((java.lang.Character) '\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        java.io.File file3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat2.print(file3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat3.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat3.withQuote('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat3.getAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        java.sql.ResultSet resultSet11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setDelimiter("\r\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        long long16 = cSVParser10.getRecordNumber();
        long long17 = cSVParser10.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat3.builder();
        java.lang.String str6 = cSVFormat3.getNullString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        cSVPrinter5.printComment("hi!");
        java.sql.ResultSet resultSet15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        java.lang.Class<?> wildcardClass5 = cSVFormat4.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreEmptyLines(false);
        boolean boolean12 = cSVFormat11.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        boolean boolean80 = cSVFormat7.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowDuplicateHeaderNames(true);
        boolean boolean8 = cSVFormat5.getIgnoreEmptyLines();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.lang.Appendable appendable0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withIgnoreEmptyLines(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter13 = new org.apache.commons.csv.CSVPrinter(appendable0, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        boolean boolean8 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        char char9 = cSVFormat8.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '|' + "'", char9 == '|');
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat9.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withTrim(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("a");
        java.lang.String[] strArray5 = cSVFormat4.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker(' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7, (long) (short) 10, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat12.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setHeader(resultSet19);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray51 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat45.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat44.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder39.setHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder26.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder16.setHeaderComments((java.lang.Object[]) strArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = cSVFormat13.format((java.lang.Object[]) strArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        boolean boolean8 = cSVFormat7.getAllowDuplicateHeaderNames();
        boolean boolean9 = cSVFormat7.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setHeader(resultSet9);
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSetMetaData11);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        java.lang.Class<?> wildcardClass7 = cSVFormat6.getClass();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrim();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat12 = builder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start and the escape character cannot be the same ('#')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        boolean boolean9 = cSVParser8.isClosed();
        java.lang.String str10 = cSVParser8.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder6.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        cSVPrinter5.close();
        java.sql.ResultSet resultSet9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser8.getHeaderMap();
        java.lang.String str10 = cSVParser8.getTrailerComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser8.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVRecordItor11);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withAllowDuplicateHeaderNames();
        java.io.Reader reader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = cSVFormat8.parse(reader11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf(" ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined. ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.InformixUnload;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode9 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withAllowDuplicateHeaderNames();
        boolean boolean12 = cSVFormat3.equals((java.lang.Object) cSVFormat10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.InformixUnload + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.InformixUnload));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strList9.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList9.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strSpliterator10);
        org.junit.Assert.assertNotNull(strSpliterator11);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        org.apache.commons.csv.CSVFormat.Predefined predefined84 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat85 = predefined84.getFormat();
        java.lang.Character char86 = cSVFormat85.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder87 = cSVFormat85.builder();
        java.lang.String str88 = cSVFormat85.getNullString();
        java.sql.ResultSet resultSet89 = null;
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat85.withHeader(resultSet89);
        java.lang.Character char91 = cSVFormat90.getCommentMarker();
        cSVPrinter83.print((java.lang.Object) cSVFormat90);
        java.sql.ResultSet resultSet93 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter83.printRecords(resultSet93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
        org.junit.Assert.assertTrue("'" + predefined84 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined84.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNull(char91);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat5.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withSystemRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder11.setHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat2.withHeaderComments((java.lang.Object[]) strArray23);
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder32 = cSVFormat30.builder();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData37 = null;
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setHeader(resultSetMetaData37);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder38.setHeaderComments(strArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = cSVFormat27.format((java.lang.Object[]) strArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\\N" + "'", str28, "\\N");
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        java.lang.String[] strArray12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setHeader(strArray12);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass19 = cSVFormat18.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat30.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat30.withSkipHeaderRecord(true);
        boolean boolean37 = cSVFormat25.equals((java.lang.Object) cSVFormat36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat42.printer();
        cSVPrinter43.flush();
        java.lang.Appendable appendable45 = cSVPrinter43.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter46 = cSVFormat36.print(appendable45);
        cSVFormat14.print((java.lang.Object) cSVFormat18, appendable45, true);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withDelimiter(',');
        char char51 = cSVFormat50.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(appendable45);
        org.junit.Assert.assertNotNull(cSVPrinter46);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + ',' + "'", char51 == ',');
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setQuote(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strList4.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strList4.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strList4.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(strSpliterator7);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText));
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.sql.ResultSet resultSet6 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        boolean boolean9 = cSVFormat8.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        java.sql.ResultSet resultSet13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat1.builder();
        boolean boolean7 = cSVFormat1.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        java.nio.file.Path path7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat3.print(path7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat26.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder21.setHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode39 = cSVFormat38.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreHeaderCase();
        java.nio.file.Path path41 = null;
        java.nio.charset.Charset charset42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat40.print(path41, charset42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode39 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode39.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat40);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreEmptyLines();
        java.lang.Character char13 = cSVFormat12.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreHeaderCase(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode9 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuoteMode(quoteMode9);
        boolean boolean11 = cSVFormat8.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat30);
        java.lang.String str32 = cSVParser31.getFirstEndOfLine();
        boolean boolean33 = cSVParser31.hasHeaderComment();
        cSVParser31.close();
        long long35 = cSVParser31.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser31);
        cSVPrinter5.printComment("");
        java.sql.ResultSet resultSet39 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        java.lang.Class<?> wildcardClass8 = cSVFormat7.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat81.withTrailingDelimiter(false);
        boolean boolean84 = cSVFormat81.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(' ');
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat6.parse(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withIgnoreHeaderCase();
        java.sql.ResultSet resultSet28 = null;
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withHeader(resultSet28);
        char char30 = cSVFormat27.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + char30 + "' != '" + '\t' + "'", char30 == '\t');
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuote('\t');
        char char3 = cSVFormat2.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + ',' + "'", char3 == ',');
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        boolean boolean12 = cSVFormat7.getIgnoreSurroundingSpaces();
        java.io.File file13 = null;
        java.nio.charset.Charset charset14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat7.print(file13, charset14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
        boolean boolean5 = cSVFormat4.isNullStringSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat5.getDuplicateHeaderMode();
        boolean boolean7 = cSVFormat5.getAllowDuplicateHeaderNames();
        boolean boolean8 = cSVFormat5.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat3, (long) '\t', (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined83 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat84 = predefined83.getFormat();
        java.lang.Character char85 = cSVFormat84.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withDelimiter('a');
        boolean boolean88 = cSVFormat84.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat84.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat90.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter93 = new org.apache.commons.csv.CSVPrinter(appendable77, cSVFormat90);
        java.lang.Appendable appendable94 = cSVPrinter93.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter95 = cSVFormat2.print(appendable94);
        cSVPrinter95.close(false);
        cSVPrinter95.println();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertTrue("'" + predefined83 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined83.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNull(char85);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNotNull(cSVFormat92);
        org.junit.Assert.assertNotNull(appendable94);
        org.junit.Assert.assertNotNull(cSVPrinter95);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker((java.lang.Character) ',');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        boolean boolean4 = cSVFormat2.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withSkipHeaderRecord();
        java.lang.String[] strArray9 = cSVFormat8.getHeaderComments();
        boolean boolean10 = cSVFormat8.getAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean18 = cSVFormat17.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = new org.apache.commons.csv.CSVPrinter(appendable15, cSVFormat17);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat22);
        java.lang.String str24 = cSVParser23.getFirstEndOfLine();
        boolean boolean25 = cSVParser23.hasHeaderComment();
        cSVParser23.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream27 = cSVParser23.stream();
        java.lang.String str28 = cSVParser23.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator29 = cSVParser23.spliterator();
        long long30 = cSVParser23.getRecordNumber();
        cSVPrinter19.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser23);
        java.sql.ResultSet resultSet32 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter19.printRecords(resultSet32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) (short) 100, (long) ',');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        cSVParser3.close();
        cSVParser3.close();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        java.lang.String str5 = cSVParser3.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        boolean boolean3 = cSVFormat1.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat10.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\t");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.Oracle;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        boolean boolean3 = cSVFormat1.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.Oracle + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.Oracle));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        cSVPrinter26.printRecord((java.lang.Object[]) strArray33);
        java.lang.Appendable appendable36 = cSVPrinter26.getOut();
        java.sql.ResultSet resultSet37 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter26.printHeaders(resultSet37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(appendable36);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7, (long) '\"', (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withIgnoreHeaderCase();
        boolean boolean28 = cSVFormat16.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        boolean boolean83 = cSVFormat82.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("a");
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withAllowMissingColumnNames(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat26.printer();
        cSVPrinter27.close(true);
        cSVPrinter27.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder41.setHeaderComments(strArray43);
        cSVPrinter27.printRecord((java.lang.Object[]) strArray43);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat49);
        java.lang.String str51 = cSVParser50.getFirstEndOfLine();
        boolean boolean52 = cSVParser50.hasHeaderComment();
        cSVParser50.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream54 = cSVParser50.stream();
        java.lang.String str55 = cSVParser50.getFirstEndOfLine();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser50);
        java.sql.ResultSet resultSet57 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet57, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream54);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser8.getHeaderMap();
        boolean boolean10 = cSVParser8.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        java.sql.ResultSet resultSet8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable7);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withHeader(resultSet8);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withSkipHeaderRecord(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape('4');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setDelimiter('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withAllowMissingColumnNames();
        java.lang.String str9 = cSVFormat4.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\t" + "'", str9, "\t");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        boolean boolean18 = cSVFormat17.getTrim();
        boolean boolean19 = cSVFormat17.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass42 = cSVFormat41.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withSystemRecordSeparator();
        boolean boolean49 = cSVFormat48.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode57 = cSVFormat53.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat53.withSkipHeaderRecord(true);
        boolean boolean60 = cSVFormat48.equals((java.lang.Object) cSVFormat59);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat65.printer();
        cSVPrinter66.flush();
        java.lang.Appendable appendable68 = cSVPrinter66.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter69 = cSVFormat59.print(appendable68);
        cSVFormat37.print((java.lang.Object) cSVFormat41, appendable68, true);
        cSVFormat17.println(appendable68);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat0.print(appendable68);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat0.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + quoteMode57 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode57.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertNotNull(appendable68);
        org.junit.Assert.assertNotNull(cSVPrinter69);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVFormat74);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat11.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withSkipHeaderRecord(true);
        boolean boolean18 = cSVFormat6.equals((java.lang.Object) cSVFormat17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat23.printer();
        cSVPrinter24.flush();
        java.lang.Appendable appendable26 = cSVPrinter24.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat17.print(appendable26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat17.withIgnoreHeaderCase();
        java.sql.ResultSet resultSet29 = null;
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withHeader(resultSet29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(appendable26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream20 = cSVParser16.stream();
        java.lang.String str21 = cSVParser16.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser16.spliterator();
        long long23 = cSVParser16.getRecordNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.Map<java.lang.String, java.lang.Integer> strMap25 = cSVParser16.getHeaderMap();
        long long26 = cSVParser16.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setDuplicateHeaderMode(duplicateHeaderMode16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder19 = builder13.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.printer();
        java.sql.ResultSet resultSet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printRecords(resultSet7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        java.lang.String[] strArray6 = cSVFormat4.getHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat11.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, cSVFormat20, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withHeaderComments(objArray26);
        cSVPrinter12.printRecord(objArray26);
        cSVPrinter12.println();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str31 = cSVFormat30.getDelimiterString();
        boolean boolean32 = cSVFormat30.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat34.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat38);
        char char40 = cSVFormat38.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.Character char43 = cSVFormat42.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder44 = cSVFormat42.builder();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat50.printer();
        java.lang.Appendable appendable52 = cSVPrinter51.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter53 = cSVFormat42.print(appendable52);
        cSVFormat38.println(appendable52);
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.Character char57 = cSVFormat56.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter60 = cSVFormat59.printer();
        cSVPrinter60.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str64 = cSVFormat63.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder65 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat63);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder65.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined76 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat77 = predefined76.getFormat();
        java.lang.String str78 = cSVFormat77.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat77.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined82 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat83 = predefined82.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined84 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat85 = predefined84.getFormat();
        java.lang.String str86 = cSVFormat85.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat85.withQuote('a');
        java.lang.Object[] objArray89 = new java.lang.Object[] { true, cSVFormat83, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat77.withHeaderComments(objArray89);
        cSVPrinter75.printRecord(objArray89);
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder65.setHeaderComments(objArray89);
        cSVPrinter60.printRecord(objArray89);
        cSVFormat35.printRecord(appendable52, objArray89);
        cSVFormat4.print((java.lang.Object) cSVPrinter12, appendable52, true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "," + "'", str31, ",");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVParser39);
        org.junit.Assert.assertTrue("'" + char40 + "' != '" + '\t' + "'", char40 == '\t');
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(char43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(appendable52);
        org.junit.Assert.assertNotNull(cSVPrinter53);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(char57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVPrinter60);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertTrue("'" + predefined76 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined76.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertTrue("'" + predefined82 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined82.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertTrue("'" + predefined84 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined84.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        boolean boolean80 = cSVFormat7.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean21 = cSVFormat20.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray28 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat22.withHeader(strArray28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray28);
        cSVPrinter18.printRecords((java.lang.Object[]) strArray28);
        cSVPrinter18.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        cSVParser27.close();
        cSVParser27.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat35.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat35.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.Character char44 = cSVFormat43.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter47 = cSVFormat46.printer();
        cSVPrinter47.flush();
        java.lang.Appendable appendable49 = cSVPrinter47.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter50 = cSVFormat41.print(appendable49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean52 = cSVFormat51.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter53 = new org.apache.commons.csv.CSVPrinter(appendable49, cSVFormat51);
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat56);
        java.lang.String str58 = cSVParser57.getFirstEndOfLine();
        boolean boolean59 = cSVParser57.hasHeaderComment();
        cSVParser57.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream61 = cSVParser57.stream();
        java.lang.String str62 = cSVParser57.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator63 = cSVParser57.spliterator();
        long long64 = cSVParser57.getRecordNumber();
        cSVPrinter53.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser57);
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser57);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVPrinter47);
        org.junit.Assert.assertNotNull(appendable49);
        org.junit.Assert.assertNotNull(cSVPrinter50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVParser57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode5);
        boolean boolean7 = cSVFormat6.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withSystemRecordSeparator();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withAllowDuplicateHeaderNames();
        boolean boolean10 = cSVFormat8.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser9.spliterator();
        java.lang.Class<?> wildcardClass11 = cSVRecordSpliterator10.getClass();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat24 = builder21.build();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder21.setHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat2.withHeader(strArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withQuote((java.lang.Character) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setHeader(resultSetMetaData18);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder19.setHeaderComments(strArray21);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray21);
        cSVPrinter5.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        java.nio.file.Path path7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat6.print(path7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setHeader(resultSetMetaData12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setIgnoreEmptyLines(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        java.sql.ResultSet resultSet35 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat8.getAllowMissingColumnNames();
        boolean boolean10 = cSVFormat8.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder20.setHeaderComments(objArray34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder20.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.Character char41 = cSVFormat40.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder42 = cSVFormat40.builder();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData47 = null;
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setHeader(resultSetMetaData47);
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str50 = cSVFormat49.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder51 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat49);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder53.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.String str60 = cSVFormat59.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray69 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat63.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat62.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder57.setHeaderComments((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder44.setHeader(strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder20.setHeaderComments((java.lang.Object[]) strArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = cSVFormat8.format((java.lang.Object[]) strArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(char41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        boolean boolean14 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withQuote('a');
        java.lang.Object[] objArray31 = new java.lang.Object[] { true, cSVFormat25, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat19.withHeaderComments(objArray31);
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass37 = cSVFormat36.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat39.withSystemRecordSeparator();
        boolean boolean44 = cSVFormat43.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode52 = cSVFormat48.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat48.withSkipHeaderRecord(true);
        boolean boolean55 = cSVFormat43.equals((java.lang.Object) cSVFormat54);
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat60.printer();
        cSVPrinter61.flush();
        java.lang.Appendable appendable63 = cSVPrinter61.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter64 = cSVFormat54.print(appendable63);
        cSVFormat32.print((java.lang.Object) cSVFormat36, appendable63, true);
        cSVFormat12.println(appendable63);
        org.apache.commons.csv.CSVPrinter cSVPrinter68 = cSVFormat3.print(appendable63);
        java.sql.ResultSet resultSet69 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter68.printRecords(resultSet69, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + quoteMode52 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode52.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVPrinter61);
        org.junit.Assert.assertNotNull(appendable63);
        org.junit.Assert.assertNotNull(cSVPrinter64);
        org.junit.Assert.assertNotNull(cSVPrinter68);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        char char5 = cSVFormat3.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat15.printer();
        java.lang.Appendable appendable17 = cSVPrinter16.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat7.print(appendable17);
        cSVFormat3.println(appendable17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t');
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(appendable17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.List<java.lang.String> strList22 = cSVParser16.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strList22.spliterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strSpliterator23);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withHeader(resultSet6);
        char char8 = cSVFormat4.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withNullString(",");
        java.lang.String[] strArray11 = cSVFormat4.getHeader();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(strArray11);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat6.parse(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode10 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuoteMode(quoteMode10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser3.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        java.nio.file.Path path8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat7.print(path8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat4.withHeader(resultSet18);
        java.lang.String str20 = cSVFormat4.getRecordSeparator();
        char char21 = cSVFormat4.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\t' + "'", char21 == '\t');
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuote((java.lang.Character) '|');
        boolean boolean9 = cSVFormat8.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream20 = cSVParser16.stream();
        java.lang.String str21 = cSVParser16.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser16.spliterator();
        long long23 = cSVParser16.getRecordNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        cSVPrinter5.printComment("\n");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        boolean boolean7 = cSVFormat3.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withNullString("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        char char5 = cSVFormat1.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t');
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray32 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat26.withHeader(strArray32);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder37 = cSVFormat35.builder();
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat47.builder();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setHeader(resultSetMetaData54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder58 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.String str67 = cSVFormat66.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray76 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat70.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat69.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder64.setHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder51.setHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder43.setHeader(strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat33.withHeader(strArray76);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray76);
        java.sql.ResultSet resultSet84 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet84, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(cSVFormat82);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        boolean boolean4 = cSVFormat2.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        char char12 = cSVFormat10.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        java.lang.Appendable appendable24 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat14.print(appendable24);
        cSVFormat10.println(appendable24);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        cSVPrinter32.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str36 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.Character char44 = cSVFormat43.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter47 = cSVFormat46.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.String str50 = cSVFormat49.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withQuote('a');
        java.lang.Object[] objArray61 = new java.lang.Object[] { true, cSVFormat55, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat49.withHeaderComments(objArray61);
        cSVPrinter47.printRecord(objArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder37.setHeaderComments(objArray61);
        cSVPrinter32.printRecord(objArray61);
        cSVFormat7.printRecord(appendable24, objArray61);
        cSVFormat0.println(appendable24);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\t' + "'", char12 == '\t');
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable24);
        org.junit.Assert.assertNotNull(cSVPrinter25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVPrinter47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str11 = cSVFormat10.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = cSVFormat15.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder9.setDuplicateHeaderMode(duplicateHeaderMode16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str19 = cSVFormat18.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat21.printer();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setIgnoreHeaderCase(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder25.setHeaderComments(strArray30);
        cSVPrinter24.printRecords((java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder9.setHeaderComments(strArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder35 = builder9.setDelimiter("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "," + "'", str19, ",");
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream22 = cSVParser16.stream();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator23 = cSVParser16.spliterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(cSVRecordStream22);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator23);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.println();
        java.sql.ResultSet resultSet27 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("a");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet3 = null;
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet3);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        java.lang.Object[] objArray15 = new java.lang.Object[] { true, cSVFormat9, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat3.withHeaderComments(objArray15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withNullString("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        java.sql.ResultSet resultSet13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter12.printRecords(resultSet13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        java.lang.String str6 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList7 = cSVParser3.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withTrailingDelimiter(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withDelimiter('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withCommentMarker((java.lang.Character) '#');
        java.lang.String[] strArray13 = cSVFormat12.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(strArray13);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setHeader(resultSetMetaData8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray30 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withHeader(strArray30);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat23.withHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder18.setHeaderComments((java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder5.setHeader(strArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('#');
        java.lang.String str8 = cSVFormat7.getNullString();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        boolean boolean31 = cSVParser25.hasTrailerComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor32 = cSVParser25.iterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor32);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withTrim(true);
        java.lang.String str20 = cSVFormat19.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\t" + "'", str20, "\t");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setDelimiter("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        long long6 = cSVParser3.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        java.lang.String str8 = cSVFormat3.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withDelimiter('\t');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\t" + "'", str8, "\t");
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat4.withHeader(resultSet18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat4.withIgnoreEmptyLines();
        java.nio.file.Path path21 = null;
        java.nio.charset.Charset charset22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat4.print(path21, charset22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreHeaderCase(true);
        boolean boolean10 = cSVFormat9.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withAllowMissingColumnNames();
        boolean boolean9 = cSVFormat4.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withAutoFlush(false);
        java.nio.file.Path path12 = null;
        java.nio.charset.Charset charset13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat4.print(path12, charset13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        boolean boolean20 = cSVFormat14.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString("INVALID []");
        boolean boolean9 = cSVFormat8.getTrim();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker(',');
        java.lang.Character char20 = cSVFormat17.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean21 = cSVFormat20.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray28 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat22.withHeader(strArray28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray28);
        cSVPrinter18.printRecords((java.lang.Object[]) strArray28);
        java.sql.ResultSet resultSet32 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter18.printRecords(resultSet32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withQuoteMode(quoteMode10);
        java.lang.Class<?> wildcardClass12 = cSVFormat0.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        long long10 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        char char10 = cSVFormat9.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '|' + "'", char10 == '|');
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser3.iterator();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        java.lang.String str8 = cSVParser3.getHeaderComment();
        java.lang.String str9 = cSVParser3.getHeaderComment();
        boolean boolean10 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder2.setHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.String str50 = cSVFormat49.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat49.withSystemRecordSeparator();
        boolean boolean54 = cSVFormat53.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str62 = cSVFormat61.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder63 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder65.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.String str72 = cSVFormat71.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat75 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray81 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat75.withHeader(strArray81);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat74.withHeader(strArray81);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder69.setHeaderComments((java.lang.Object[]) strArray81);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat60.withHeaderComments((java.lang.Object[]) strArray81);
        org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat57.withHeaderComments((java.lang.Object[]) strArray81);
        org.apache.commons.csv.CSVFormat.Builder builder87 = builder47.setHeaderComments(strArray81);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSet10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreEmptyLines(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat26.printer();
        cSVPrinter27.close(true);
        cSVPrinter27.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder41.setHeaderComments(strArray43);
        cSVPrinter27.printRecord((java.lang.Object[]) strArray43);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat49);
        java.lang.String str51 = cSVParser50.getFirstEndOfLine();
        boolean boolean52 = cSVParser50.hasHeaderComment();
        cSVParser50.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream54 = cSVParser50.stream();
        java.lang.String str55 = cSVParser50.getFirstEndOfLine();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser50);
        java.lang.String str57 = cSVParser50.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        java.lang.String str5 = cSVFormat3.toString();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        boolean boolean17 = cSVFormat3.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat3.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray26 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat20.withHeader(strArray26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat19.withHeader(strArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        boolean boolean6 = cSVParser3.hasHeaderComment();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        boolean boolean6 = cSVFormat2.isQuoteCharacterSet();
        java.lang.Character char7 = cSVFormat2.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (byte) 0, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(char7);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        boolean boolean31 = cSVParser25.hasTrailerComment();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser25.getRecords();
        java.lang.String str33 = cSVParser25.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withCommentMarker((java.lang.Character) '#');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat7.printer();
        java.sql.ResultSet resultSet10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter9.printRecords(resultSet10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVPrinter9);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String[] strArray2 = cSVFormat0.getHeaderComments();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withTrim(false);
        java.lang.String str9 = cSVFormat8.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> CommentStart=<4> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str9, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> CommentStart=<4> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withIgnoreEmptyLines();
        boolean boolean17 = cSVFormat1.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str36 = cSVFormat35.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setIgnoreHeaderCase(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder42.setHeaderComments(strArray47);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray47);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray47);
        java.sql.ResultSet resultSet51 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet51, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "," + "'", str36, ",");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        cSVPrinter5.print((java.lang.Object) cSVFormat20);
        java.sql.ResultSet resultSet22 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        char char11 = cSVFormat10.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '|' + "'", char11 == '|');
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(',');
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        boolean boolean3 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        boolean boolean18 = cSVFormat17.getTrim();
        boolean boolean19 = cSVFormat17.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass42 = cSVFormat41.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withSystemRecordSeparator();
        boolean boolean49 = cSVFormat48.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode57 = cSVFormat53.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat53.withSkipHeaderRecord(true);
        boolean boolean60 = cSVFormat48.equals((java.lang.Object) cSVFormat59);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat65.printer();
        cSVPrinter66.flush();
        java.lang.Appendable appendable68 = cSVPrinter66.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter69 = cSVFormat59.print(appendable68);
        cSVFormat37.print((java.lang.Object) cSVFormat41, appendable68, true);
        cSVFormat17.println(appendable68);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat0.print(appendable68);
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat0.withRecordSeparator("INVALID []");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + quoteMode57 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode57.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertNotNull(appendable68);
        org.junit.Assert.assertNotNull(cSVPrinter69);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVFormat75);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream29 = cSVParser25.stream();
        long long30 = cSVParser25.getCurrentLineNumber();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        java.sql.ResultSet resultSet32 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDelimiter("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withAutoFlush(true);
        boolean boolean38 = cSVFormat35.getAllowMissingColumnNames();
        boolean boolean39 = cSVFormat11.equals((java.lang.Object) boolean38);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser17 = cSVFormat1.parse(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        java.lang.Character char9 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        boolean boolean6 = cSVParser3.isClosed();
        java.lang.String str7 = cSVParser3.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        cSVPrinter14.close(false);
        java.sql.ResultSet resultSet17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter14.printHeaders(resultSet17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withHeader(resultSet10);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder21.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder63 = cSVFormat61.builder();
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray74 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat68.withHeader(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder67.setHeader(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder21.setHeader(strArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = cSVFormat8.format((java.lang.Object[]) strArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        java.lang.String str5 = cSVFormat2.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\t" + "'", str5, "\t");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withHeader(resultSet16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray31 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat25.withHeader(strArray31);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat24.withHeader(strArray31);
        boolean boolean34 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat24.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat37.withSystemRecordSeparator();
        boolean boolean42 = cSVFormat41.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat41.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str50 = cSVFormat49.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder51 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat49);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder53.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.String str60 = cSVFormat59.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray69 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat63.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat62.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder57.setHeaderComments((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat48.withHeaderComments((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat45.withHeaderComments((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat35.withHeaderComments((java.lang.Object[]) strArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = cSVFormat17.format((java.lang.Object[]) strArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVFormat75);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat30);
        java.lang.String str32 = cSVParser31.getFirstEndOfLine();
        boolean boolean33 = cSVParser31.hasHeaderComment();
        cSVParser31.close();
        long long35 = cSVParser31.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser31);
        cSVPrinter5.printComment("");
        java.lang.Object[] objArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecord(objArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setHeader(resultSetMetaData12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withIgnoreHeaderCase(false);
        boolean boolean20 = cSVFormat19.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        java.lang.String str19 = cSVParser16.getTrailerComment();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean3 = cSVFormat2.isCommentMarkerSet();
        boolean boolean4 = cSVFormat2.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withAllowDuplicateHeaderNames(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(',');
        boolean boolean2 = cSVFormat1.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str19 = cSVFormat18.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode24 = cSVFormat23.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder17.setDuplicateHeaderMode(duplicateHeaderMode24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder5.setDuplicateHeaderMode(duplicateHeaderMode24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder5.setAutoFlush(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "," + "'", str19, ",");
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode24 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode24.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '#');
        java.lang.Character char15 = cSVFormat12.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setCommentMarker((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
        java.lang.String[] strArray7 = cSVFormat5.getHeader();
        boolean boolean8 = cSVFormat5.getIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5, (long) (byte) 100, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "," + "'", str2, ",");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined78 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat79 = predefined78.getFormat();
        java.lang.Character char80 = cSVFormat79.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat79.withDelimiter('a');
        boolean boolean83 = cSVFormat79.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat79.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter88 = new org.apache.commons.csv.CSVPrinter(appendable72, cSVFormat85);
        java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter88.printRecord(cSVRecordIterable89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertTrue("'" + predefined78 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined78.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNull(char80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVFormat87);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        long long7 = cSVParser3.getCurrentLineNumber();
        boolean boolean8 = cSVParser3.hasTrailerComment();
        boolean boolean9 = cSVParser3.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat6.builder();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat4.withHeader(strArray11);
        boolean boolean14 = cSVFormat4.isQuoteCharacterSet();
        boolean boolean15 = cSVFormat4.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        boolean boolean3 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withNullString("hi!");
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1);
        java.lang.String str9 = cSVParser8.getFirstEndOfLine();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuote('4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setHeader(resultSetMetaData8);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder9.setHeaderComments(strArray11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder9.setRecordSeparator('\t');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator("");
        boolean boolean6 = cSVFormat5.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\\N" + "'", str3, "\\N");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat7.printer();
        java.lang.Character char10 = cSVFormat7.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertNull(char10);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        java.nio.file.Path path13 = null;
        java.nio.charset.Charset charset14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat10.print(path13, charset14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        long long6 = cSVParser3.getCurrentLineNumber();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setEscape('|');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder9.setDelimiter(",");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setDelimiter("\\N");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        boolean boolean6 = cSVParser3.hasHeaderComment();
        java.lang.String str7 = cSVParser3.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        java.lang.Object[] objArray29 = new java.lang.Object[] { true, cSVFormat23, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat17.withHeaderComments(objArray29);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder15.setHeaderComments(objArray29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder15.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder37 = cSVFormat35.builder();
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData42 = null;
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder39.setHeader(resultSetMetaData42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder48.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray64 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat58.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat57.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder52.setHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder39.setHeader(strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder15.setHeaderComments((java.lang.Object[]) strArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = cSVFormat5.format((java.lang.Object[]) strArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.lang.String str9 = cSVParser3.getFirstEndOfLine();
        boolean boolean10 = cSVParser3.hasHeaderComment();
        java.lang.String str11 = cSVParser3.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode9 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuoteMode(quoteMode9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withTrailingDelimiter(false);
        boolean boolean13 = cSVFormat10.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSystemRecordSeparator();
        java.io.File file8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat2.print(file8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser3.iterator();
        java.lang.String str10 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker('|');
        boolean boolean7 = cSVFormat1.isEscapeCharacterSet();
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = cSVFormat1.parse(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder20.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withSystemRecordSeparator();
        boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray60 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat54.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat53.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder48.setHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat39.withHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat36.withHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder20.setHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat7.withHeader(strArray60);
        java.nio.file.Path path68 = null;
        java.nio.charset.Charset charset69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat67.print(path68, charset69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(cSVFormat67);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withCommentMarker((java.lang.Character) ',');
        java.lang.Character char12 = cSVFormat8.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        boolean boolean31 = cSVParser25.hasTrailerComment();
        boolean boolean32 = cSVParser25.isClosed();
        boolean boolean33 = cSVParser25.isClosed();
        java.lang.String str34 = cSVParser25.getTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream35 = cSVParser25.stream();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVRecordStream35);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        cSVPrinter5.close(true);
        cSVPrinter5.close(true);
        java.sql.ResultSet resultSet12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable7);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker(',');
        java.lang.String[] strArray20 = cSVFormat19.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str11 = cSVFormat10.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = cSVFormat15.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder9.setDuplicateHeaderMode(duplicateHeaderMode16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str19 = cSVFormat18.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat21.printer();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setIgnoreHeaderCase(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder25.setHeaderComments(strArray30);
        cSVPrinter24.printRecords((java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder9.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "," + "'", str19, ",");
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreSurroundingSpaces(false);
        boolean boolean16 = cSVFormat0.equals((java.lang.Object) cSVFormat15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat0.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAutoFlush(true);
        java.io.File file21 = null;
        java.nio.charset.Charset charset22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat20.print(file21, charset22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode5);
        java.lang.String str7 = cSVFormat6.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        boolean boolean3 = cSVFormat1.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet2 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat3.printer();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withIgnoreSurroundingSpaces();
        boolean boolean8 = cSVFormat3.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat18);
        long long20 = cSVParser19.getRecordNumber();
        boolean boolean21 = cSVParser19.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser19);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withDelimiter('a');
        boolean boolean12 = cSVFormat8.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat8.withAutoFlush(false);
        boolean boolean15 = cSVFormat14.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.String str19 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withSystemRecordSeparator();
        boolean boolean23 = cSVFormat22.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat27.withSkipHeaderRecord(true);
        boolean boolean34 = cSVFormat22.equals((java.lang.Object) cSVFormat33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat39.printer();
        cSVPrinter40.flush();
        java.lang.Appendable appendable42 = cSVPrinter40.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat33.print(appendable42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray50 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat44.withHeader(strArray50);
        cSVPrinter43.printRecord((java.lang.Object[]) strArray50);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder6.setHeaderComments((java.lang.Object[]) strArray50);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(appendable42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAllowMissingColumnNames(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = builder9.build();
        boolean boolean13 = cSVFormat12.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = builder17.build();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean23 = cSVFormat22.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray30 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withHeader(strArray30);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder17.setHeaderComments((java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat14.withHeader(strArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = cSVFormat4.format((java.lang.Object[]) strArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withIgnoreEmptyLines();
        boolean boolean10 = cSVFormat9.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        java.lang.String str5 = cSVFormat3.toString();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        boolean boolean17 = cSVFormat3.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat3.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray26 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat20.withHeader(strArray26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat19.withHeader(strArray26);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat19.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat19.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withQuote('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat34);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape((java.lang.Character) '#');
        java.lang.String str13 = cSVFormat12.toString();
        char char14 = cSVFormat12.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Delimiter=<|> Escape=<#> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str13, "Delimiter=<|> Escape=<#> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '|' + "'", char14 == '|');
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        java.lang.Appendable appendable11 = cSVPrinter5.getOut();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertNotNull(appendable11);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        java.io.Reader reader20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat14.parse(reader20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder4.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str8 = cSVFormat7.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode13 = cSVFormat12.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setDuplicateHeaderMode(duplicateHeaderMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder39 = cSVFormat37.builder();
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData44 = null;
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder41.setHeader(resultSetMetaData44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str47 = cSVFormat46.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder48 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat46);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray66 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat60.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat59.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder54.setHeaderComments((java.lang.Object[]) strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder33.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder21.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder16.setHeaderComments(strArray66);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "," + "'", str8, ",");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode13 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode13.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withCommentMarker('\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSetMetaData9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker('|');
        boolean boolean7 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withEscape('4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withEscape((java.lang.Character) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withHeader(resultSet6);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        boolean boolean6 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat8);
        java.lang.String str10 = cSVParser9.getFirstEndOfLine();
        boolean boolean11 = cSVParser9.hasHeaderComment();
        cSVParser9.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream13 = cSVParser9.stream();
        cSVParser9.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser9);
        java.lang.String str16 = cSVParser9.getFirstEndOfLine();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser9.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strMap17);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withCommentMarker((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = builder14.build();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean20 = cSVFormat19.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray27 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withHeader(strArray27);
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray27);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder14.setHeaderComments((java.lang.Object[]) strArray27);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat33.withHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder30.setHeaderComments(strArray54);
        java.sql.ResultSet resultSet60 = null;
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder30.setHeader(resultSet60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray68 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat62.withHeader(strArray68);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder30.setHeaderComments(strArray68);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat11.withHeader(strArray68);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(cSVFormat71);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        java.lang.Character char7 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        boolean boolean17 = cSVFormat16.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet20 = null;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withHeader(resultSet20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat21.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withIgnoreEmptyLines();
        boolean boolean24 = cSVFormat3.equals((java.lang.Object) cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.println();
        java.sql.ResultSet resultSet9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setDelimiter("hi!");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder2.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder16.setHeader(strArray23);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray23);
        java.lang.Class<?> wildcardClass27 = strArray23.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter5.print((java.lang.Object) predefined13);
        cSVPrinter5.close(true);
        cSVPrinter5.println();
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        boolean boolean83 = cSVFormat7.isQuoteCharacterSet();
        java.lang.String str84 = cSVFormat7.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]" + "'", str84, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setCommentMarker((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.close();
        cSVPrinter6.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder14.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode23 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder50 = cSVFormat48.builder();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData55 = null;
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder52.setHeader(resultSetMetaData55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder59 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat70.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder65.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder52.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder44.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat34.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder22.setHeader(strArray77);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray77);
        java.sql.ResultSet resultSet86 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printHeaders(resultSet86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + quoteMode23 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode23.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        boolean boolean7 = cSVFormat6.getAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        boolean boolean8 = cSVParser3.hasTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream9 = cSVParser3.stream();
        long long10 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        char char7 = cSVFormat3.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withNullString(",");
        boolean boolean10 = cSVFormat3.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat3.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat3.withSkipHeaderRecord(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat3, (long) (byte) 1, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\t' + "'", char7 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        boolean boolean3 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withNullString("hi!");
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1);
        java.util.List<java.lang.String> strList9 = cSVParser8.getHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.QuoteMode quoteMode2 = cSVFormat1.getQuoteMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) '4', (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + quoteMode2 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode2.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat5.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray13 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withHeader(strArray13);
        boolean boolean15 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat14);
        boolean boolean18 = cSVFormat5.getIgnoreSurroundingSpaces();
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat5.withHeader(resultSet19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.String str7 = cSVFormat6.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat9.withHeader(strArray16);
        boolean boolean19 = cSVFormat18.isCommentMarkerSet();
        boolean boolean20 = cSVFormat3.equals((java.lang.Object) cSVFormat18);
        boolean boolean21 = cSVFormat3.isCommentMarkerSet();
        boolean boolean22 = cSVFormat3.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        boolean boolean12 = cSVFormat10.getIgnoreSurroundingSpaces();
        java.lang.Class<?> wildcardClass13 = cSVFormat10.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        java.lang.String str6 = cSVFormat1.getDelimiterString();
        boolean boolean7 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowDuplicateHeaderNames();
        java.nio.file.Path path9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat8.print(path9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\t" + "'", str6, "\t");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        java.lang.Character char7 = cSVFormat3.getCommentMarker();
        java.nio.file.Path path8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat3.print(path8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        cSVPrinter26.printRecord((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat38);
        java.util.List<java.lang.String> strList40 = cSVParser39.getHeaderNames();
        boolean boolean41 = cSVParser39.hasTrailerComment();
        boolean boolean42 = cSVParser39.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter26.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser39);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVParser39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray20 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat13.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder8.setHeaderComments((java.lang.Object[]) strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setEscape((java.lang.Character) '|');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder23.setDelimiter('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        java.lang.String str7 = cSVFormat2.getDelimiterString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (byte) 10, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\t" + "'", str7, "\t");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder13.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray53 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat47.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat46.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder41.setHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat32.withHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat29.withHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder13.setHeader(strArray53);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray53);
        cSVPrinter5.flush();
        cSVPrinter5.close(true);
        cSVPrinter5.close(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat11.withTrailingDelimiter();
        boolean boolean32 = cSVFormat31.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        char char12 = cSVFormat9.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat9.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat9.getQuoteMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + ',' + "'", char12 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withCommentMarker('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        java.util.List<java.lang.String> strList35 = cSVParser27.getHeaderNames();
        java.util.List<java.lang.String> strList36 = cSVParser27.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setHeader(resultSetMetaData9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray31 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat25.withHeader(strArray31);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat24.withHeader(strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder19.setHeaderComments((java.lang.Object[]) strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder6.setHeader(strArray31);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat40.printer();
        cSVPrinter41.close(true);
        cSVPrinter41.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat47.builder();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setHeader(resultSetMetaData54);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder55.setHeaderComments(strArray57);
        cSVPrinter41.printRecord((java.lang.Object[]) strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder35.setHeaderComments(strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder0.setHeader(strArray57);
        org.apache.commons.csv.CSVFormat cSVFormat62 = builder61.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withCommentMarker((java.lang.Character) ',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVFormat62);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withTrim();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        char char7 = cSVFormat3.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        boolean boolean9 = cSVParser8.hasTrailerComment();
        cSVParser8.close();
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\t' + "'", char7 == '\t');
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder11.build();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder11.setRecordSeparator(',');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setDelimiter(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.String str6 = cSVFormat5.toString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withTrailingDelimiter(true);
        char char9 = cSVFormat8.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withAllowDuplicateHeaderNames(false);
        boolean boolean12 = cSVFormat8.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '|' + "'", char9 == '|');
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setHeaderComments(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray34);
        boolean boolean39 = cSVFormat11.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withIgnoreEmptyLines(false);
        java.lang.String[] strArray20 = cSVFormat16.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setSkipHeaderRecord(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat11.withTrailingDelimiter();
        boolean boolean32 = cSVFormat31.getIgnoreSurroundingSpaces();
        java.lang.Appendable appendable33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat31.print(appendable33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat10);
        boolean boolean12 = cSVFormat10.getAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        boolean boolean9 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        java.lang.String[] strArray16 = cSVFormat7.getHeaderComments();
        boolean boolean17 = cSVFormat7.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter5.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withCommentMarker('\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined78 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat79 = predefined78.getFormat();
        java.lang.Character char80 = cSVFormat79.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat79.withDelimiter('a');
        boolean boolean83 = cSVFormat79.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat79.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter88 = new org.apache.commons.csv.CSVPrinter(appendable72, cSVFormat85);
        java.lang.Appendable appendable89 = cSVPrinter88.getOut();
        cSVPrinter88.printComment("hi!");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertTrue("'" + predefined78 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined78.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNull(char80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(appendable89);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
        java.io.File file5 = null;
        java.nio.charset.Charset charset6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat4.print(file5, charset6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray30 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withHeader(strArray30);
        boolean boolean32 = cSVFormat31.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet35 = null;
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat31.withHeader(resultSet35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat36.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = new org.apache.commons.csv.CSVPrinter(appendable21, cSVFormat36);
        cSVPrinter38.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        boolean boolean26 = cSVFormat16.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat37.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat27.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder7.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder70.setEscape(',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        boolean boolean10 = cSVFormat8.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withNullString("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('#');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat18);
        java.lang.String str20 = cSVParser19.getFirstEndOfLine();
        boolean boolean21 = cSVParser19.hasHeaderComment();
        cSVParser19.close();
        cSVParser19.close();
        cSVParser19.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream25 = cSVParser19.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser19.getHeaderMap();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser19);
        java.sql.ResultSet resultSet28 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream25);
        org.junit.Assert.assertNull(strMap26);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat6.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray13 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withHeader(strArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = cSVFormat3.format((java.lang.Object[]) strArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.lang.String str9 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat3.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat3.withQuote('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder9.setNullString(" ");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat3.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withTrailingDelimiter(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setCommentMarker('#');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withAllowMissingColumnNames();
        java.lang.String str18 = cSVFormat17.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(false);
        java.nio.file.Path path5 = null;
        java.nio.charset.Charset charset6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat4.print(path5, charset6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreHeaderCase(true);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat14);
        java.lang.String str16 = cSVParser15.getFirstEndOfLine();
        boolean boolean17 = cSVParser15.hasTrailerComment();
        cSVParser15.close();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withHeader(resultSet21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat22.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat22.printer();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat29);
        java.sql.ResultSet resultSet31 = null;
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withHeader(resultSet31);
        char char33 = cSVFormat29.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat29);
        boolean boolean35 = cSVParser34.hasTrailerComment();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat37.withSystemRecordSeparator();
        boolean boolean42 = cSVFormat41.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat41.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat50.printer();
        cSVPrinter51.flush();
        java.lang.Appendable appendable53 = cSVPrinter51.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat41.print(appendable53);
        cSVFormat22.print((java.lang.Object) boolean35, appendable53, true);
        cSVFormat10.print((java.lang.Object) cSVParser15, appendable53, true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVParser30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + '\t' + "'", char33 == '\t');
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(appendable53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray13 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat6.withHeader(strArray13);
        boolean boolean16 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat6.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withSystemRecordSeparator();
        boolean boolean24 = cSVFormat23.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat23.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray51 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat45.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat44.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder39.setHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat30.withHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat27.withHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat17.withHeaderComments((java.lang.Object[]) strArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat16);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat27.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuote('a');
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, cSVFormat36, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat30.withHeaderComments(objArray42);
        cSVPrinter28.printRecord(objArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder18.setHeaderComments(objArray42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder15.setHeaderComments(objArray42);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder15.setCommentMarker((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat1.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5, (long) ',', (long) '|');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getHeaderComment();
        long long9 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuote((java.lang.Character) 'a');
        java.lang.Class<?> wildcardClass8 = cSVFormat7.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator();
        java.lang.String str6 = cSVParser3.getFirstEndOfLine();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        boolean boolean11 = cSVFormat10.isEscapeCharacterSet();
        boolean boolean12 = cSVFormat10.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str36 = cSVFormat35.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setIgnoreHeaderCase(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder42.setHeaderComments(strArray47);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray47);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray47);
        java.sql.ResultSet resultSet51 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "," + "'", str36, ",");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser7.getHeaderMap();
        boolean boolean9 = cSVParser7.hasHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.close(true);
        cSVPrinter19.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder33.setHeaderComments(strArray35);
        cSVPrinter19.printRecord((java.lang.Object[]) strArray35);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat13.withHeader(strArray35);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat38.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser42 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat39, 1L, (long) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder11.setHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat2.withHeaderComments((java.lang.Object[]) strArray23);
        java.lang.Class<?> wildcardClass28 = cSVFormat27.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        boolean boolean6 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withAutoFlush(false);
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode25 = cSVFormat21.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat21.withSkipHeaderRecord(true);
        boolean boolean28 = cSVFormat16.equals((java.lang.Object) cSVFormat27);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat33.printer();
        cSVPrinter34.flush();
        java.lang.Appendable appendable36 = cSVPrinter34.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat27.print(appendable36);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        cSVPrinter37.printRecord((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat10.withHeaderComments((java.lang.Object[]) strArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser48 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + quoteMode25 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode25.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertNotNull(appendable36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat47);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        boolean boolean20 = cSVFormat19.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape(',');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode9 = cSVFormat7.getQuoteMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser3.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        java.lang.String str10 = cSVParser3.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames();
        java.nio.file.Path path12 = null;
        java.nio.charset.Charset charset13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat11.print(path12, charset13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withQuote('#');
        java.lang.Object[] objArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = cSVFormat11.format(objArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat8);
        char char10 = cSVFormat8.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        java.lang.Appendable appendable22 = cSVPrinter21.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat12.print(appendable22);
        cSVFormat8.println(appendable22);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        cSVPrinter30.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = cSVFormat44.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.String str48 = cSVFormat47.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        java.lang.Object[] objArray59 = new java.lang.Object[] { true, cSVFormat53, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat47.withHeaderComments(objArray59);
        cSVPrinter45.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder35.setHeaderComments(objArray59);
        cSVPrinter30.printRecord(objArray59);
        cSVFormat5.printRecord(appendable22, objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str66 = cSVFormat65.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder67 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat65.withCommentMarker('4');
        java.sql.ResultSet resultSet70 = null;
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withHeader(resultSet70);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = new org.apache.commons.csv.CSVPrinter(appendable22, cSVFormat71);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withNullString("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat74.withIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\t' + "'", char10 == '\t');
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(appendable22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVPrinter45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVFormat76);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        java.lang.String str31 = cSVParser25.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) ',');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder4.build();
        java.lang.String str8 = cSVFormat7.toString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreSurroundingSpaces(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str8, "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        boolean boolean18 = cSVFormat15.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setHeader(resultSetMetaData8);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder9.setHeaderComments(strArray11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        java.sql.ResultSet resultSet84 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter83.printRecords(resultSet84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser3.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuote((java.lang.Character) '|');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray51 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat45.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat44.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder39.setHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder26.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder18.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.Character char59 = cSVFormat58.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder60 = cSVFormat58.builder();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray71 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat65.withHeader(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder64.setHeader(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder18.setHeader(strArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = cSVFormat1.format((java.lang.Object[]) strArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(char59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat5.printer();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder10.build();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean16 = cSVFormat15.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat15.withHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder10.setHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder32 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray50 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat44.withHeader(strArray50);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat43.withHeader(strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder38.setHeaderComments((java.lang.Object[]) strArray50);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat29.withHeaderComments((java.lang.Object[]) strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder26.setHeaderComments(strArray50);
        cSVPrinter7.printRecords((java.lang.Object[]) strArray50);
        java.sql.ResultSet resultSet57 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter7.printHeaders(resultSet57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker('4');
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSet19);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.Character char35 = cSVFormat34.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder36 = cSVFormat34.builder();
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setHeader(resultSetMetaData41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder45 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat43);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray63 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat57.withHeader(strArray63);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat56.withHeader(strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder51.setHeaderComments((java.lang.Object[]) strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder38.setHeader(strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder30.setHeader(strArray63);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder20.setHeader(strArray63);
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat6.withHeader(strArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser71 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(cSVFormat70);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat5.parse(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat8);
        char char10 = cSVFormat8.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        java.lang.Appendable appendable22 = cSVPrinter21.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat12.print(appendable22);
        cSVFormat8.println(appendable22);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        cSVPrinter30.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = cSVFormat44.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.String str48 = cSVFormat47.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        java.lang.Object[] objArray59 = new java.lang.Object[] { true, cSVFormat53, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat47.withHeaderComments(objArray59);
        cSVPrinter45.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder35.setHeaderComments(objArray59);
        cSVPrinter30.printRecord(objArray59);
        cSVFormat5.printRecord(appendable22, objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str66 = cSVFormat65.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder67 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat65.withCommentMarker('4');
        java.sql.ResultSet resultSet70 = null;
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withHeader(resultSet70);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = new org.apache.commons.csv.CSVPrinter(appendable22, cSVFormat71);
        boolean boolean73 = cSVFormat71.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\t' + "'", char10 == '\t');
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(appendable22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVPrinter45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setDelimiter('\t');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser13.getHeaderMap();
        java.lang.String str18 = cSVParser13.getFirstEndOfLine();
        java.util.List<java.lang.String> strList19 = cSVParser13.getHeaderNames();
        boolean boolean20 = cSVParser13.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream21 = cSVParser13.stream();
        long long22 = cSVParser13.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        cSVParser13.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("a");
        java.lang.String[] strArray6 = cSVFormat5.getHeader();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(strArray6);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        cSVPrinter18.flush();
        java.lang.Appendable appendable20 = cSVPrinter18.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat12.print(appendable20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean23 = cSVFormat22.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = new org.apache.commons.csv.CSVPrinter(appendable20, cSVFormat22);
        cSVFormat3.println(appendable20);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat3.withIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(appendable20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVFormat27);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        char char11 = cSVFormat10.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        cSVPrinter20.flush();
        java.lang.Appendable appendable22 = cSVPrinter20.getOut();
        cSVFormat14.println(appendable22);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray30 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withHeader(strArray30);
        boolean boolean32 = cSVFormat31.getTrim();
        boolean boolean33 = cSVFormat31.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder36 = cSVFormat31.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.String str47 = cSVFormat46.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withQuote('a');
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, cSVFormat44, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat38.withHeaderComments(objArray50);
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat53.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass56 = cSVFormat55.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.String str59 = cSVFormat58.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat58.withSystemRecordSeparator();
        boolean boolean63 = cSVFormat62.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.Character char68 = cSVFormat67.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode71 = cSVFormat67.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat67.withSkipHeaderRecord(true);
        boolean boolean74 = cSVFormat62.equals((java.lang.Object) cSVFormat73);
        org.apache.commons.csv.CSVFormat.Predefined predefined75 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat76 = predefined75.getFormat();
        java.lang.Character char77 = cSVFormat76.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat76.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter80 = cSVFormat79.printer();
        cSVPrinter80.flush();
        java.lang.Appendable appendable82 = cSVPrinter80.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat73.print(appendable82);
        cSVFormat51.print((java.lang.Object) cSVFormat55, appendable82, true);
        cSVFormat31.println(appendable82);
        org.apache.commons.csv.CSVPrinter cSVPrinter87 = cSVFormat14.print(appendable82);
        cSVFormat13.println(appendable82);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '|' + "'", char11 == '|');
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(appendable22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(char68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertTrue("'" + quoteMode71 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode71.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + predefined75 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined75.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNull(char77);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVPrinter80);
        org.junit.Assert.assertNotNull(appendable82);
        org.junit.Assert.assertNotNull(cSVPrinter83);
        org.junit.Assert.assertNotNull(cSVPrinter87);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.println();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setIgnoreHeaderCase(true);
        java.lang.String[] strArray32 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder27.setHeaderComments(strArray32);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray32);
        java.sql.ResultSet resultSet35 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        java.sql.ResultSet resultSet9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        boolean boolean5 = cSVFormat3.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withQuote((java.lang.Character) ',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder11.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withQuote((java.lang.Character) '|');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder11.setQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder11.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder17.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder17.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str36 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder39.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray55 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat49.withHeader(strArray55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat48.withHeader(strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder43.setHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat34.withHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat27.withHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder25.setHeader(strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder11.setHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setAllowMissingColumnNames(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setHeaderComments(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        java.lang.Class<?> wildcardClass9 = cSVParser8.getClass();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        java.sql.ResultSet resultSet13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<?> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}

