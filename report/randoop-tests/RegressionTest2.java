import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat20.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withSkipHeaderRecord(true);
        boolean boolean27 = cSVFormat15.equals((java.lang.Object) cSVFormat26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        java.lang.Appendable appendable35 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat26.print(appendable35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        cSVPrinter36.printRecord((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray43);
        boolean boolean47 = cSVFormat9.getTrim();
        boolean boolean48 = cSVFormat9.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat9.withRecordSeparator("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.lang.String str51 = cSVFormat9.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        java.lang.Appendable appendable9 = cSVPrinter7.getOut();
        cSVFormat1.println(appendable9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass43 = cSVFormat42.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode58 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withSkipHeaderRecord(true);
        boolean boolean61 = cSVFormat49.equals((java.lang.Object) cSVFormat60);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        cSVPrinter67.flush();
        java.lang.Appendable appendable69 = cSVPrinter67.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat60.print(appendable69);
        cSVFormat38.print((java.lang.Object) cSVFormat42, appendable69, true);
        cSVFormat18.println(appendable69);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat1.print(appendable69);
        java.lang.String str75 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat1.withIgnoreEmptyLines(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser78 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(appendable9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + quoteMode58 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode58.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(appendable69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\\N" + "'", str75, "\\N");
        org.junit.Assert.assertNotNull(cSVFormat77);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat10.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDuplicateHeaderMode(duplicateHeaderMode11);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeaderComments(objArray13);
        java.sql.ResultSetMetaData resultSetMetaData15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setHeader(resultSetMetaData15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker((java.lang.Character) '|');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withDelimiter('a');
        boolean boolean26 = cSVFormat22.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat22.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder32 = cSVFormat30.builder();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder32.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder32.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder32.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode41 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat28.withQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder20.setQuoteMode(quoteMode41);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + quoteMode41 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode41.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.String str19 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuote('a');
        java.lang.Object[] objArray22 = new java.lang.Object[] { true, cSVFormat16, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat10.withHeaderComments(objArray22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass28 = cSVFormat27.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withSystemRecordSeparator();
        boolean boolean35 = cSVFormat34.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode43 = cSVFormat39.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat39.withSkipHeaderRecord(true);
        boolean boolean46 = cSVFormat34.equals((java.lang.Object) cSVFormat45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat51.printer();
        cSVPrinter52.flush();
        java.lang.Appendable appendable54 = cSVPrinter52.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat45.print(appendable54);
        cSVFormat23.print((java.lang.Object) cSVFormat27, appendable54, true);
        cSVFormat8.println(appendable54);
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat8.withIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + quoteMode43 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode43.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(appendable54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(cSVFormat60);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        cSVPrinter20.printRecord(objArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder10.setHeaderComments(objArray34);
        cSVPrinter5.printRecord(objArray34);
        java.lang.Appendable appendable39 = cSVPrinter5.getOut();
        java.lang.Appendable appendable40 = cSVPrinter5.getOut();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(appendable40);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        cSVParser3.close();
        cSVParser3.close();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setHeader(resultSetMetaData13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder2.setHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeaderComments(strArray42);
        java.sql.ResultSet resultSet48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder18.setHeader(resultSet48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder18.setHeaderComments(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder18.setEscape(',');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        java.lang.Appendable appendable9 = cSVPrinter7.getOut();
        cSVFormat1.println(appendable9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass43 = cSVFormat42.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode58 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withSkipHeaderRecord(true);
        boolean boolean61 = cSVFormat49.equals((java.lang.Object) cSVFormat60);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        cSVPrinter67.flush();
        java.lang.Appendable appendable69 = cSVPrinter67.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat60.print(appendable69);
        cSVFormat38.print((java.lang.Object) cSVFormat42, appendable69, true);
        cSVFormat18.println(appendable69);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat1.print(appendable69);
        char char75 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap77 = cSVParser76.getHeaderMap();
        cSVParser76.close();
        boolean boolean79 = cSVParser76.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(appendable9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + quoteMode58 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode58.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(appendable69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertTrue("'" + char75 + "' != '" + '\t' + "'", char75 == '\t');
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNull(strMap77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter5.print((java.lang.Object) predefined13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder18 = cSVFormat16.builder();
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder30 = cSVFormat28.builder();
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData35 = null;
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder32.setHeader(resultSetMetaData35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat37);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder41.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.String str48 = cSVFormat47.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray57 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withHeader(strArray57);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat50.withHeader(strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder45.setHeaderComments((java.lang.Object[]) strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder32.setHeader(strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder24.setHeader(strArray57);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray57);
        java.sql.ResultSet resultSet64 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.InformixUnload;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        java.lang.Character char5 = cSVFormat4.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode8 = cSVFormat4.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withAllowDuplicateHeaderNames();
        boolean boolean11 = cSVFormat2.equals((java.lang.Object) cSVFormat9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (-1), (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.InformixUnload + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.InformixUnload));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + quoteMode8 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode8.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreHeaderCase(true);
        boolean boolean9 = cSVFormat6.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setDuplicateHeaderMode(duplicateHeaderMode6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: duplicateHeaderMode");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined2.getFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str32 = cSVFormat31.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat34.printer();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setIgnoreHeaderCase(true);
        java.lang.String[] strArray43 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder38.setHeaderComments(strArray43);
        cSVPrinter37.printRecords((java.lang.Object[]) strArray43);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray43);
        java.sql.ResultSet resultSet47 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "," + "'", str32, ",");
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        cSVPrinter5.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Class<?> wildcardClass14 = cSVFormat10.getClass();
        cSVPrinter5.print((java.lang.Object) wildcardClass14);
        cSVPrinter5.println();
        cSVPrinter5.close();
        cSVPrinter5.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreHeaderCase(true);
        java.lang.Object[] objArray11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withHeaderComments(objArray11);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        boolean boolean14 = cSVFormat12.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setEscape('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.close();
        cSVPrinter5.close(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder13.setQuote((java.lang.Character) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat20 = builder19.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('a')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setHeader(resultSet13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        char char12 = cSVFormat9.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat9.withAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withEscape(' ');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat9.withIgnoreEmptyLines();
        boolean boolean18 = cSVFormat9.getAutoFlush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + ',' + "'", char12 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        boolean boolean26 = cSVFormat16.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat37.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat27.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder7.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder68.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder68.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream29 = cSVParser25.stream();
        long long30 = cSVParser25.getCurrentLineNumber();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        java.lang.String str32 = cSVParser25.getFirstEndOfLine();
        java.lang.String str33 = cSVParser25.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        java.nio.file.Path path7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat6.print(path7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withEscape(' ');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withIgnoreEmptyLines();
        boolean boolean16 = cSVFormat15.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator('\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.QuoteMode quoteMode15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuoteMode(quoteMode15);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat18.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat21.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        java.lang.Appendable appendable35 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat27.print(appendable35);
        cSVFormat18.println(appendable35);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        boolean boolean46 = cSVFormat45.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder47 = cSVFormat45.builder();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withQuote('|');
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = new org.apache.commons.csv.CSVPrinter(appendable35, cSVFormat49);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat51);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(false);
        java.lang.String[] strArray6 = cSVFormat2.getHeaderComments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(strArray6);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        cSVPrinter12.close();
        java.lang.Appendable appendable23 = cSVPrinter12.getOut();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(appendable23);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat4.withHeader(strArray11);
        boolean boolean14 = cSVFormat4.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat4.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withSystemRecordSeparator();
        boolean boolean22 = cSVFormat21.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat42.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder37.setHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat28.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat25.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat15.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat15.withIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        cSVPrinter26.printRecord((java.lang.Object[]) strArray33);
        java.lang.Appendable appendable36 = cSVPrinter26.getOut();
        cSVPrinter26.close(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(appendable36);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setTrim(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat22.withQuoteMode(quoteMode31);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder20.setQuoteMode(quoteMode31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder8.setQuoteMode(quoteMode31);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder10.build();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setTrim(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withHeader(strArray44);
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat14.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat14.withTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat54);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        java.lang.Appendable appendable9 = cSVPrinter7.getOut();
        cSVFormat1.println(appendable9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass43 = cSVFormat42.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode58 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withSkipHeaderRecord(true);
        boolean boolean61 = cSVFormat49.equals((java.lang.Object) cSVFormat60);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        cSVPrinter67.flush();
        java.lang.Appendable appendable69 = cSVPrinter67.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat60.print(appendable69);
        cSVFormat38.print((java.lang.Object) cSVFormat42, appendable69, true);
        cSVFormat18.println(appendable69);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat1.print(appendable69);
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat76.withSystemRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser78 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(appendable9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + quoteMode58 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode58.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(appendable69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVFormat77);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(false);
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeader(resultSetMetaData13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withAutoFlush(true);
        boolean boolean12 = cSVFormat6.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6, (long) 'a', (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.lang.String[] strArray7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        java.sql.ResultSet resultSet20 = null;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withHeader(resultSet20);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat37.withSystemRecordSeparator();
        boolean boolean42 = cSVFormat41.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.Character char47 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode50 = cSVFormat46.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat46.withSkipHeaderRecord(true);
        boolean boolean53 = cSVFormat41.equals((java.lang.Object) cSVFormat52);
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.Character char56 = cSVFormat55.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter59 = cSVFormat58.printer();
        cSVPrinter59.flush();
        java.lang.Appendable appendable61 = cSVPrinter59.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter62 = cSVFormat52.print(appendable61);
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.Character char65 = cSVFormat64.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder66 = cSVFormat64.builder();
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder66.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder70.setHeader(strArray77);
        cSVFormat35.printRecord(appendable61, (java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder32.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder4.setHeader(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(char47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + quoteMode50 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode50.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(char56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVPrinter59);
        org.junit.Assert.assertNotNull(appendable61);
        org.junit.Assert.assertNotNull(cSVPrinter62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(char65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream20 = cSVParser16.stream();
        java.lang.String str21 = cSVParser16.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser16.spliterator();
        long long23 = cSVParser16.getRecordNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withQuote('a');
        java.lang.Object[] objArray44 = new java.lang.Object[] { true, cSVFormat38, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat32.withHeaderComments(objArray44);
        cSVPrinter30.printRecord(objArray44);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder50 = cSVFormat48.builder();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter57 = cSVFormat56.printer();
        java.lang.Appendable appendable58 = cSVPrinter57.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter59 = cSVFormat48.print(appendable58);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat62);
        java.lang.String str64 = cSVParser63.getFirstEndOfLine();
        boolean boolean65 = cSVParser63.hasHeaderComment();
        cSVParser63.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap67 = cSVParser63.getHeaderMap();
        cSVPrinter59.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser63);
        cSVPrinter30.print((java.lang.Object) cSVParser63);
        java.lang.String str70 = cSVParser63.getTrailerComment();
        java.lang.String str71 = cSVParser63.getFirstEndOfLine();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser63);
        boolean boolean73 = cSVParser63.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVPrinter57);
        org.junit.Assert.assertNotNull(appendable58);
        org.junit.Assert.assertNotNull(cSVPrinter59);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVParser63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strMap67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        org.apache.commons.csv.QuoteMode quoteMode18 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setTrailingDelimiter(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setDelimiter("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + quoteMode18 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode18.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter5.print((java.lang.Object) predefined13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined13.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined13.getFormat();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines(true);
        boolean boolean11 = cSVFormat10.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withTrim(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withNullString("INVALID []");
        java.lang.String str18 = cSVFormat15.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str18, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet2 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray10 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withHeader(strArray10);
        boolean boolean12 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreSurroundingSpaces(false);
        boolean boolean17 = cSVFormat1.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat1.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withAutoFlush(true);
        java.lang.String[] strArray22 = cSVFormat19.getHeaderComments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(strArray22);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        long long5 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        boolean boolean11 = cSVFormat8.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder20.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode37 = cSVFormat36.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat27.withQuoteMode(quoteMode37);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean54 = cSVFormat53.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat53.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder51.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat38.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder26.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat8.withHeaderComments((java.lang.Object[]) strArray61);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + quoteMode37 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode37.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(cSVFormat67);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withAutoFlush(true);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        boolean boolean6 = cSVFormat1.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat24.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.String str36 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withQuote('a');
        java.lang.Object[] objArray39 = new java.lang.Object[] { true, cSVFormat33, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat27.withHeaderComments(objArray39);
        cSVPrinter25.printRecord(objArray39);
        cSVPrinter25.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.Character char46 = cSVFormat45.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder47 = cSVFormat45.builder();
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData52 = null;
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setHeader(resultSetMetaData52);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder56 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder58.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray74 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat68.withHeader(strArray74);
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat67.withHeader(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder62.setHeaderComments((java.lang.Object[]) strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder49.setHeader(strArray74);
        cSVPrinter25.printRecords((java.lang.Object[]) strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder19.setHeaderComments((java.lang.Object[]) strArray74);
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat1.withHeaderComments((java.lang.Object[]) strArray74);
        java.lang.String[] strArray82 = cSVFormat1.getHeader();
        boolean boolean83 = cSVFormat1.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVPrinter25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(char46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withSystemRecordSeparator();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder21 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder21.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder21.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode30 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuoteMode(quoteMode30);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat16.withQuoteMode(quoteMode30);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withTrim(true);
        boolean boolean35 = cSVFormat34.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + quoteMode30 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode30.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setQuote((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        cSVPrinter7.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str12 = cSVFormat11.getDelimiterString();
        boolean boolean13 = cSVFormat11.isEscapeCharacterSet();
        cSVPrinter7.print((java.lang.Object) boolean13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter7.print((java.lang.Object) predefined15);
        boolean boolean17 = cSVFormat0.equals((java.lang.Object) cSVPrinter7);
        cSVPrinter7.println();
        cSVPrinter7.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat23);
        long long25 = cSVParser24.getRecordNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter7.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser24);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "," + "'", str12, ",");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setEscape((java.lang.Character) 'a');
        java.sql.ResultSetMetaData resultSetMetaData16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setHeader(resultSetMetaData16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setQuote('\\');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, cSVFormat26, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat20.withHeaderComments(objArray32);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder18.setHeaderComments(objArray32);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder18.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.Character char39 = cSVFormat38.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder40 = cSVFormat38.builder();
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData45 = null;
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder42.setHeader(resultSetMetaData45);
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str48 = cSVFormat47.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder49 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat47);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray67 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat61.withHeader(strArray67);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat60.withHeader(strArray67);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder55.setHeaderComments((java.lang.Object[]) strArray67);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder42.setHeader(strArray67);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder18.setHeaderComments((java.lang.Object[]) strArray67);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder18.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder74.setRecordSeparator("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.lang.Appendable appendable77 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat8.print((java.lang.Object) "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", appendable77, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(char39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        java.lang.String str8 = cSVFormat7.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withAllowMissingColumnNames();
        char char10 = cSVFormat7.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\t" + "'", str8, "\t");
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\t' + "'", char10 == '\t');
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat82.withIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat84);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('\t');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuote(',');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat23.withSystemRecordSeparator();
        boolean boolean28 = cSVFormat27.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode29 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder21.setQuoteMode(quoteMode29);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setTrim(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat47);
        char char49 = cSVFormat47.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder53 = cSVFormat51.builder();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.Character char57 = cSVFormat56.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter60 = cSVFormat59.printer();
        java.lang.Appendable appendable61 = cSVPrinter60.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter62 = cSVFormat51.print(appendable61);
        cSVFormat47.println(appendable61);
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder66 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat64);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder66.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat69 = builder66.build();
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean72 = cSVFormat71.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat73 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray79 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat73.withHeader(strArray79);
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat71.withHeaderComments((java.lang.Object[]) strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder66.setHeaderComments((java.lang.Object[]) strArray79);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat47.withHeader(strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder42.setHeaderComments(strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder85 = builder21.setHeaderComments((java.lang.Object[]) strArray79);
        org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat6.withHeaderComments((java.lang.Object[]) strArray79);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + quoteMode29 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode29.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVParser48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\t' + "'", char49 == '\t');
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(char57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVPrinter60);
        org.junit.Assert.assertNotNull(appendable61);
        org.junit.Assert.assertNotNull(cSVPrinter62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(cSVFormat86);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withRecordSeparator("\n");
        java.lang.String[] strArray17 = cSVFormat16.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(strArray17);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withIgnoreHeaderCase();
        boolean boolean19 = cSVFormat4.getSkipHeaderRecord();
        java.nio.file.Path path20 = null;
        java.nio.charset.Charset charset21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat4.print(path20, charset21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        cSVPrinter5.close();
        cSVPrinter5.close(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape(',');
        java.lang.String str9 = cSVFormat8.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        java.lang.String str5 = cSVFormat3.toString();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        boolean boolean17 = cSVFormat3.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        cSVPrinter23.printRecord(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat42);
        java.lang.String str44 = cSVParser43.getFirstEndOfLine();
        boolean boolean45 = cSVParser43.hasHeaderComment();
        cSVParser43.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream47 = cSVParser43.stream();
        long long48 = cSVParser43.getCurrentLineNumber();
        cSVPrinter23.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser43);
        java.lang.String str50 = cSVParser43.getHeaderComment();
        boolean boolean51 = cSVFormat3.equals((java.lang.Object) cSVParser43);
        boolean boolean52 = cSVFormat3.getAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setEscape('|');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        boolean boolean18 = cSVFormat17.getTrim();
        boolean boolean19 = cSVFormat17.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass42 = cSVFormat41.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withSystemRecordSeparator();
        boolean boolean49 = cSVFormat48.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode57 = cSVFormat53.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat53.withSkipHeaderRecord(true);
        boolean boolean60 = cSVFormat48.equals((java.lang.Object) cSVFormat59);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat65.printer();
        cSVPrinter66.flush();
        java.lang.Appendable appendable68 = cSVPrinter66.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter69 = cSVFormat59.print(appendable68);
        cSVFormat37.print((java.lang.Object) cSVFormat41, appendable68, true);
        cSVFormat17.println(appendable68);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat0.print(appendable68);
        java.lang.String str74 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat0.withQuote('\"');
        java.lang.String str77 = cSVFormat0.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + quoteMode57 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode57.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertNotNull(appendable68);
        org.junit.Assert.assertNotNull(cSVPrinter69);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\\N" + "'", str74, "\\N");
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str77, "Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setHeader(resultSetMetaData28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder32 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray50 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat44.withHeader(strArray50);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat43.withHeader(strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder38.setHeaderComments((java.lang.Object[]) strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder25.setHeader(strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder17.setHeader(strArray50);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat7.withHeader(strArray50);
        java.sql.ResultSet resultSet57 = null;
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withHeader(resultSet57);
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat56.withTrailingDelimiter(true);
        boolean boolean61 = cSVFormat56.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator();
        java.util.List<java.lang.String> strList6 = cSVParser3.getHeaderNames();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser3.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator7);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withSkipHeaderRecord(true);
        java.lang.String[] strArray13 = cSVFormat12.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withCommentMarker('\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuote((java.lang.Character) '\"');
        boolean boolean11 = cSVFormat10.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentMarker((java.lang.Character) ',');
        boolean boolean14 = cSVFormat13.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withQuote('#');
        char char4 = cSVFormat3.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + ',' + "'", char4 == ',');
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser13.getHeaderMap();
        java.lang.String str18 = cSVParser13.getFirstEndOfLine();
        java.util.List<java.lang.String> strList19 = cSVParser13.getHeaderNames();
        boolean boolean20 = cSVParser13.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream21 = cSVParser13.stream();
        long long22 = cSVParser13.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        long long24 = cSVParser13.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor25 = cSVParser13.iterator();
        long long26 = cSVParser13.getCurrentLineNumber();
        boolean boolean27 = cSVParser13.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        java.lang.String str6 = cSVParser3.getTrailerComment();
        long long7 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.lang.String[] strArray7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setEscape('|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String[] strArray2 = cSVFormat0.getHeaderComments();
        java.lang.String str3 = cSVFormat0.getDelimiterString();
        char char4 = cSVFormat0.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + ',' + "'", char4 == ',');
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator();
        long long10 = cSVParser3.getRecordNumber();
        java.util.List<java.lang.String> strList11 = cSVParser3.getHeaderNames();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser3.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(cSVRecordList12);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.QuoteMode quoteMode31 = null;
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withQuoteMode(quoteMode31);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withTrim();
        java.lang.String str8 = cSVFormat7.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str8, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrim();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat17);
        char char19 = cSVFormat17.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        java.lang.Appendable appendable31 = cSVPrinter30.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat21.print(appendable31);
        cSVFormat17.println(appendable31);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        cSVPrinter39.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.Character char51 = cSVFormat50.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        java.lang.Object[] objArray68 = new java.lang.Object[] { true, cSVFormat62, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat56.withHeaderComments(objArray68);
        cSVPrinter54.printRecord(objArray68);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder44.setHeaderComments(objArray68);
        cSVPrinter39.printRecord(objArray68);
        cSVFormat14.printRecord(appendable31, objArray68);
        cSVFormat7.println(appendable31);
        boolean boolean75 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat7.withQuote((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\t' + "'", char19 == '\t');
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(appendable31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(cSVFormat77);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withQuote((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray19 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withHeader(strArray19);
        boolean boolean21 = cSVFormat20.getTrim();
        boolean boolean22 = cSVFormat20.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat20.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode28 = cSVFormat20.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder12.setDuplicateHeaderMode(duplicateHeaderMode28);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode28 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode28.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        long long6 = cSVParser3.getRecordNumber();
        boolean boolean7 = cSVParser3.hasTrailerComment();
        boolean boolean8 = cSVParser3.isClosed();
        java.lang.String str9 = cSVParser3.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withEscape((java.lang.Character) '|');
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter7.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser14);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVParser14);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withIgnoreHeaderCase();
        java.sql.ResultSet resultSet28 = null;
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withHeader(resultSet28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat30.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setEscape((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder13.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder13.setDelimiter(',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        boolean boolean6 = cSVFormat2.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString("\t");
        java.nio.file.Path path9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat8.print(path9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setSkipHeaderRecord(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat8.printer();
        cSVPrinter9.flush();
        java.lang.Appendable appendable11 = cSVPrinter9.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat3.print(appendable11);
        java.sql.ResultSet resultSet13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter12.printHeaders(resultSet13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder2.setHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeaderComments(strArray42);
        java.sql.ResultSet resultSet48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder18.setHeader(resultSet48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder18.setHeaderComments(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder11.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withQuote((java.lang.Character) '|');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder11.setQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder11.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder11.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder11.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        cSVParser25.close();
        java.lang.String str32 = cSVParser25.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('|');
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        boolean boolean7 = cSVFormat6.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter(' ');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        cSVPrinter18.close(true);
        cSVPrinter18.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray36 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat30.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder29.setHeader(strArray36);
        cSVPrinter18.printRecords((java.lang.Object[]) strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat7.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat7.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder9.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withSystemRecordSeparator();
        boolean boolean22 = cSVFormat21.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat42.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder37.setHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat28.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat25.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder9.setHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat0.withHeaderComments((java.lang.Object[]) strArray49);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\\N" + "'", str3, "\\N");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        boolean boolean7 = cSVFormat3.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(true);
        boolean boolean12 = cSVFormat9.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        org.apache.commons.csv.QuoteMode quoteMode18 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder22.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder22.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = builder22.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        java.lang.Appendable appendable38 = cSVPrinter37.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat41);
        java.lang.String str43 = cSVParser42.getFirstEndOfLine();
        boolean boolean44 = cSVParser42.hasHeaderComment();
        cSVParser42.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap46 = cSVParser42.getHeaderMap();
        cSVPrinter37.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser42);
        long long48 = cSVParser42.getRecordNumber();
        boolean boolean49 = cSVFormat31.equals((java.lang.Object) long48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat31.withTrailingDelimiter();
        boolean boolean51 = cSVFormat50.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withQuote((java.lang.Character) '\"');
        java.lang.String str61 = cSVFormat60.getRecordSeparator();
        java.sql.ResultSet resultSet62 = null;
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withHeader(resultSet62);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat60.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat70.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat72.withQuote((java.lang.Character) '\"');
        java.lang.String str75 = cSVFormat74.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined76 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat77 = predefined76.getFormat();
        java.lang.Character char78 = cSVFormat77.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat77.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat77.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat77.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined84 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat85 = predefined84.getFormat();
        java.lang.Character char86 = cSVFormat85.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat85.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter89 = cSVFormat88.printer();
        cSVPrinter89.flush();
        java.lang.Appendable appendable91 = cSVPrinter89.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter92 = cSVFormat83.print(appendable91);
        org.apache.commons.csv.CSVFormat cSVFormat93 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean94 = cSVFormat93.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter95 = new org.apache.commons.csv.CSVPrinter(appendable91, cSVFormat93);
        cSVFormat74.println(appendable91);
        org.apache.commons.csv.CSVPrinter cSVPrinter97 = cSVFormat60.print(appendable91);
        org.apache.commons.csv.CSVPrinter cSVPrinter98 = cSVFormat50.print(appendable91);
        cSVFormat19.println(appendable91);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + quoteMode18 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode18.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(appendable38);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVParser42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strMap46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\r\n" + "'", str61, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\r\n" + "'", str75, "\r\n");
        org.junit.Assert.assertTrue("'" + predefined76 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined76.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertTrue("'" + predefined84 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined84.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertNotNull(cSVPrinter89);
        org.junit.Assert.assertNotNull(appendable91);
        org.junit.Assert.assertNotNull(cSVPrinter92);
        org.junit.Assert.assertNotNull(cSVFormat93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(cSVPrinter97);
        org.junit.Assert.assertNotNull(cSVPrinter98);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet2 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat3.printer();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withHeader(resultSet12);
        char char14 = cSVFormat10.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        boolean boolean16 = cSVParser15.hasTrailerComment();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.String str19 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withSystemRecordSeparator();
        boolean boolean23 = cSVFormat22.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        cSVPrinter32.flush();
        java.lang.Appendable appendable34 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat22.print(appendable34);
        cSVFormat3.print((java.lang.Object) boolean16, appendable34, true);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat3.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode40 = cSVFormat39.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\t' + "'", char14 == '\t');
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable34);
        org.junit.Assert.assertNotNull(cSVPrinter35);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + quoteMode40 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode40.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreEmptyLines(false);
        java.io.Reader reader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat11.parse(reader12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withQuote('\t');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        cSVPrinter14.close(false);
        java.sql.ResultSet resultSet17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter14.printRecords(resultSet17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat9.print(appendable21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat28 = builder25.build();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean31 = cSVFormat30.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray38 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat30.withHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder25.setHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat58.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder53.setHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat44.withHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeaderComments(strArray65);
        cSVFormat7.printRecord(appendable21, (java.lang.Object[]) strArray65);
        boolean boolean72 = cSVFormat7.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder10.build();
        boolean boolean12 = cSVFormat11.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator();
        java.util.List<java.lang.String> strList6 = cSVParser3.getHeaderNames();
        java.util.List<java.lang.String> strList7 = cSVParser3.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        java.lang.Appendable appendable8 = cSVPrinter5.getOut();
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setHeader(resultSetMetaData18);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setHeader(resultSetMetaData30);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder34 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat32);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray52 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat46.withHeader(strArray52);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat45.withHeader(strArray52);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder40.setHeaderComments((java.lang.Object[]) strArray52);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder27.setHeader(strArray52);
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.Character char59 = cSVFormat58.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter62 = cSVFormat61.printer();
        cSVPrinter62.close(true);
        cSVPrinter62.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        java.lang.Character char69 = cSVFormat68.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder70 = cSVFormat68.builder();
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder70.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder72.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData75 = null;
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder72.setHeader(resultSetMetaData75);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder76.setHeaderComments(strArray78);
        cSVPrinter62.printRecord((java.lang.Object[]) strArray78);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder56.setHeaderComments(strArray78);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder17.setHeaderComments((java.lang.Object[]) strArray78);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray78);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(char59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVPrinter62);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str27 = cSVFormat26.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat29.printer();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setIgnoreHeaderCase(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder33.setHeaderComments(strArray38);
        cSVPrinter32.printRecords((java.lang.Object[]) strArray38);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray38);
        cSVPrinter5.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "," + "'", str27, ",");
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withIgnoreHeaderCase(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentMarker('\\');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray21 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withHeader(strArray21);
        boolean boolean23 = cSVFormat22.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat29 = builder26.build();
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder26.setRecordSeparator(',');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder26.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray40 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat34.withHeader(strArray40);
        boolean boolean42 = cSVFormat41.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet45 = null;
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat41.withHeader(resultSet45);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat46.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.Character char50 = cSVFormat49.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode53 = cSVFormat49.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder59 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat70.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder65.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat56.withHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat49.withHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat47.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder33.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat14.withHeaderComments((java.lang.Object[]) strArray77);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(char50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + quoteMode53 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode53.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(cSVFormat85);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str27 = cSVFormat26.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat29.printer();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setIgnoreHeaderCase(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder33.setHeaderComments(strArray38);
        cSVPrinter32.printRecords((java.lang.Object[]) strArray38);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray38);
        java.lang.Appendable appendable42 = cSVPrinter5.getOut();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "," + "'", str27, ",");
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(appendable42);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        java.lang.Appendable appendable33 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat23.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter34.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        cSVPrinter5.print((java.lang.Object) cSVParser38);
        java.lang.String str45 = cSVParser38.getTrailerComment();
        java.lang.String str46 = cSVParser38.getFirstEndOfLine();
        java.lang.String str47 = cSVParser38.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentMarker((java.lang.Character) ' ');
        java.lang.String[] strArray10 = cSVFormat5.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withCommentMarker('#');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat5.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuote(' ');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
        boolean boolean7 = cSVFormat6.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat12.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withDelimiter('|');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withDelimiter('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        java.lang.Appendable appendable33 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat23.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter34.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        cSVPrinter5.print((java.lang.Object) cSVParser38);
        java.lang.String str45 = cSVParser38.getTrailerComment();
        java.lang.String str46 = cSVParser38.getFirstEndOfLine();
        java.util.List<java.lang.String> strList47 = cSVParser38.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator48 = strList47.spliterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strSpliterator48);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        boolean boolean6 = cSVParser3.hasTrailerComment();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
        java.lang.String str9 = cSVFormat7.getDelimiterString();
        boolean boolean10 = cSVFormat7.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\t" + "'", str9, "\t");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat1.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat26.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder21.setHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode39 = cSVFormat38.getDuplicateHeaderMode();
        java.lang.String str40 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat38.withTrailingDelimiter(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode39 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode39.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withSystemRecordSeparator();
        boolean boolean21 = cSVFormat20.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat14.withQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder30 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat28);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean41 = cSVFormat40.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray48 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat42.withHeader(strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder38.setHeaderComments(strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat25.withHeaderComments((java.lang.Object[]) strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder13.setHeader(strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        boolean boolean6 = cSVParser3.hasHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, cSVFormat15, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat9.withHeaderComments(objArray21);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass27 = cSVFormat26.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.Character char39 = cSVFormat38.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode42 = cSVFormat38.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat38.withSkipHeaderRecord(true);
        boolean boolean45 = cSVFormat33.equals((java.lang.Object) cSVFormat44);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat50.printer();
        cSVPrinter51.flush();
        java.lang.Appendable appendable53 = cSVPrinter51.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat44.print(appendable53);
        cSVFormat22.print((java.lang.Object) cSVFormat26, appendable53, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter57 = cSVFormat5.print(appendable53);
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat66);
        boolean boolean68 = cSVFormat66.isEscapeCharacterSet();
        java.lang.String str69 = cSVFormat66.getRecordSeparator();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = new org.apache.commons.csv.CSVPrinter(appendable53, cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(char39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + quoteMode42 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode42.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(appendable53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertNotNull(cSVPrinter57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\n" + "'", str69, "\n");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        cSVPrinter20.printRecord(objArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder10.setHeaderComments(objArray34);
        cSVPrinter5.printRecord(objArray34);
        java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable39 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(cSVRecordIterable39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        java.lang.String str7 = cSVFormat6.toString();
        java.lang.Character char8 = cSVFormat6.getCommentMarker();
        java.lang.String str9 = cSVFormat6.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str7, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentMarker((java.lang.Character) ',');
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat10.printer();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray22 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withHeader(strArray22);
        org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser24.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter14.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser24);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator25);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote((java.lang.Character) '4');
        boolean boolean10 = cSVFormat9.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat5.getDuplicateHeaderMode();
        java.lang.String str7 = cSVFormat5.getNullString();
        boolean boolean8 = cSVFormat5.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat11.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, cSVFormat20, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withHeaderComments(objArray26);
        cSVPrinter12.printRecord(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder2.setHeaderComments(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setEscape('a');
        java.lang.String[] strArray32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setHeaderComments(strArray32);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreHeaderCase(true);
        boolean boolean10 = cSVFormat7.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withSystemRecordSeparator();
        boolean boolean12 = cSVFormat11.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withDelimiter('|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowMissingColumnNames();
        cSVPrinter5.print((java.lang.Object) cSVFormat21);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withTrailingDelimiter(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat27);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSet3);
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withQuote('a');
        java.lang.Object[] objArray24 = new java.lang.Object[] { true, cSVFormat18, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat12.withHeaderComments(objArray24);
        cSVPrinter10.printRecord(objArray24);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        cSVPrinter32.close(true);
        cSVPrinter32.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.Character char39 = cSVFormat38.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder40 = cSVFormat38.builder();
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData45 = null;
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder42.setHeader(resultSetMetaData45);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder46.setHeaderComments(strArray48);
        cSVPrinter32.printRecord((java.lang.Object[]) strArray48);
        cSVPrinter10.printRecords((java.lang.Object[]) strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder2.setHeaderComments(strArray48);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(char39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        java.lang.String str5 = cSVFormat4.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withSystemRecordSeparator();
        boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat16);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.String str27 = cSVFormat26.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray36 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat30.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat29.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder24.setHeaderComments((java.lang.Object[]) strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat15.withHeaderComments((java.lang.Object[]) strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray36);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode42 = cSVFormat41.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat41);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat41.withIgnoreEmptyLines();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode42 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode42.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVParser44);
        org.junit.Assert.assertNotNull(cSVFormat45);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        cSVPrinter5.close();
        cSVPrinter5.close(true);
        cSVPrinter5.flush();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray41 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat35.withHeader(strArray41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat34.withHeader(strArray41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder29.setHeaderComments((java.lang.Object[]) strArray41);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray41);
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat45);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser47);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\\N" + "'", str46, "\\N");
        org.junit.Assert.assertNotNull(cSVParser47);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreHeaderCase(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        java.lang.String str5 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator();
        long long10 = cSVParser3.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser3.iterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser3.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor11);
        org.junit.Assert.assertNotNull(cSVRecordList12);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) '4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat30.withAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder5.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder5.setEscape(' ');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode14 = org.apache.commons.csv.DuplicateHeaderMode.DISALLOW;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder5.setDuplicateHeaderMode(duplicateHeaderMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder5.setQuote((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode14 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.DISALLOW + "'", duplicateHeaderMode14.equals(org.apache.commons.csv.DuplicateHeaderMode.DISALLOW));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat12.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withRecordSeparator(',');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withEscape('|');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same ('|')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setDelimiter(',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withSkipHeaderRecord(true);
        java.lang.String[] strArray13 = cSVFormat12.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withIgnoreEmptyLines();
        java.lang.String str15 = cSVFormat14.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat26.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder21.setHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray33);
        java.sql.ResultSetMetaData resultSetMetaData39 = null;
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat9.withHeader(resultSetMetaData39);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat10.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDuplicateHeaderMode(duplicateHeaderMode11);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeaderComments(objArray13);
        java.sql.ResultSetMetaData resultSetMetaData15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setHeader(resultSetMetaData15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withSystemRecordSeparator();
        boolean boolean25 = cSVFormat24.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat24.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder34 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat32);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray52 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat46.withHeader(strArray52);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat45.withHeader(strArray52);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder40.setHeaderComments((java.lang.Object[]) strArray52);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat31.withHeaderComments((java.lang.Object[]) strArray52);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat28.withHeaderComments((java.lang.Object[]) strArray52);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode58 = cSVFormat57.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder14.setDuplicateHeaderMode(duplicateHeaderMode58);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode58 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode58.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        boolean boolean18 = cSVFormat17.getTrim();
        boolean boolean19 = cSVFormat17.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass42 = cSVFormat41.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withSystemRecordSeparator();
        boolean boolean49 = cSVFormat48.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode57 = cSVFormat53.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat53.withSkipHeaderRecord(true);
        boolean boolean60 = cSVFormat48.equals((java.lang.Object) cSVFormat59);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat65.printer();
        cSVPrinter66.flush();
        java.lang.Appendable appendable68 = cSVPrinter66.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter69 = cSVFormat59.print(appendable68);
        cSVFormat37.print((java.lang.Object) cSVFormat41, appendable68, true);
        cSVFormat17.println(appendable68);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat0.print(appendable68);
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat0.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat75.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder77 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + quoteMode57 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode57.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertNotNull(appendable68);
        org.junit.Assert.assertNotNull(cSVPrinter69);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat11.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withSkipHeaderRecord(true);
        boolean boolean18 = cSVFormat6.equals((java.lang.Object) cSVFormat17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat23.printer();
        cSVPrinter24.flush();
        java.lang.Appendable appendable26 = cSVPrinter24.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat17.print(appendable26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat29.builder();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder35.setHeader(strArray42);
        cSVFormat0.printRecord(appendable26, (java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withDelimiter('a');
        boolean boolean51 = cSVFormat47.isQuoteCharacterSet();
        java.lang.Character char52 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter53 = new org.apache.commons.csv.CSVPrinter(appendable26, cSVFormat47);
        java.lang.Appendable appendable54 = cSVPrinter53.getOut();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(appendable26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(appendable54);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.lang.String[] strArray7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setHeader(resultSet13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder13 = builder2.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        long long8 = cSVParser3.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        long long10 = cSVParser3.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser3.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor11);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        boolean boolean12 = cSVFormat7.getIgnoreSurroundingSpaces();
        java.lang.String str13 = cSVFormat7.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "," + "'", str13, ",");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setHeader(resultSetMetaData8);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withCommentMarker((java.lang.Character) ',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat21.withIgnoreHeaderCase();
        java.io.File file23 = null;
        java.nio.charset.Charset charset24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat21.print(file23, charset24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser13.getHeaderMap();
        java.lang.String str18 = cSVParser13.getFirstEndOfLine();
        java.util.List<java.lang.String> strList19 = cSVParser13.getHeaderNames();
        boolean boolean20 = cSVParser13.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream21 = cSVParser13.stream();
        long long22 = cSVParser13.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        java.util.List<java.lang.String> strList24 = cSVParser13.getHeaderNames();
        boolean boolean25 = cSVParser13.isClosed();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser13.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor27 = cSVParser13.iterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(cSVRecordItor26);
        org.junit.Assert.assertNotNull(cSVRecordItor27);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        boolean boolean9 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withHeader(resultSet8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        boolean boolean18 = cSVFormat17.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withIgnoreSurroundingSpaces(false);
        boolean boolean23 = cSVFormat7.equals((java.lang.Object) cSVFormat22);
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat22.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat6.withQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat6.withTrim();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVFormat27);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder10.build();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuote((java.lang.Character) '|');
        org.apache.commons.csv.QuoteMode quoteMode9 = cSVFormat8.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withSystemRecordSeparator();
        boolean boolean11 = cSVFormat8.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        boolean boolean6 = cSVFormat5.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('4');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        boolean boolean17 = cSVParser12.hasTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream18 = cSVParser12.stream();
        boolean boolean19 = cSVFormat5.equals((java.lang.Object) cSVParser12);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode25 = cSVFormat21.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat21.withSkipHeaderRecord(true);
        boolean boolean28 = cSVFormat16.equals((java.lang.Object) cSVFormat27);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat33.printer();
        cSVPrinter34.flush();
        java.lang.Appendable appendable36 = cSVPrinter34.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat27.print(appendable36);
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat10.print(appendable36);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + quoteMode25 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode25.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertNotNull(appendable36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote('a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode8 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode8 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode8.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        java.lang.Appendable appendable23 = cSVPrinter22.getOut();
        cSVPrinter22.close();
        cSVPrinter22.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat28);
        java.lang.String str30 = cSVParser29.getFirstEndOfLine();
        boolean boolean31 = cSVParser29.hasHeaderComment();
        cSVParser29.close();
        cSVParser29.close();
        java.lang.String str34 = cSVParser29.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser29.getRecords();
        cSVPrinter22.print((java.lang.Object) cSVRecordList35);
        java.lang.Appendable appendable37 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat16.print(appendable37);
        boolean boolean39 = cSVFormat16.getSkipHeaderRecord();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(appendable23);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVRecordList35);
        org.junit.Assert.assertNotNull(appendable37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSet10);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder21.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder11.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setRecordSeparator("Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat65 = builder64.build();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setRecordSeparator('\\');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser3.spliterator();
        java.lang.String str7 = cSVParser3.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        java.lang.Appendable appendable21 = cSVPrinter20.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat11.print(appendable21);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder26 = cSVFormat24.builder();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData43 = null;
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setHeader(resultSetMetaData43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat58.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder53.setHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder40.setHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder32.setHeader(strArray65);
        cSVFormat5.printRecord(appendable21, (java.lang.Object[]) strArray65);
        boolean boolean72 = cSVFormat5.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreHeaderCase(true);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat10.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, cSVFormat20, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withHeaderComments(objArray26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat14.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withCommentMarker('4');
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.Character char41 = cSVFormat40.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat40.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat40.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat51.printer();
        cSVPrinter52.flush();
        java.lang.Appendable appendable54 = cSVPrinter52.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat46.print(appendable54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean57 = cSVFormat56.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter58 = new org.apache.commons.csv.CSVPrinter(appendable54, cSVFormat56);
        cSVFormat37.println(appendable54);
        cSVFormat32.print((java.lang.Object) '\"', appendable54, false);
        cSVFormat10.println(appendable54);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(char41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(appendable54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        java.lang.String str4 = cSVFormat2.toString();
        boolean boolean5 = cSVFormat2.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat2);
        boolean boolean7 = cSVParser6.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator();
        long long10 = cSVParser3.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser3.iterator();
        java.util.List<java.lang.String> strList12 = cSVParser3.getHeaderNames();
        long long13 = cSVParser3.getRecordNumber();
        boolean boolean14 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat2.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat16);
        boolean boolean20 = cSVFormat16.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withTrim();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withIgnoreEmptyLines(false);
        boolean boolean13 = cSVFormat12.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        java.lang.Appendable appendable13 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = new org.apache.commons.csv.CSVPrinter(appendable13, cSVFormat19);
        cSVPrinter20.close();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder32 = cSVFormat30.builder();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder32.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.Character char43 = cSVFormat42.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder44 = cSVFormat42.builder();
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData49 = null;
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setHeader(resultSetMetaData49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder53 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat51);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder55.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.String str62 = cSVFormat61.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray71 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat65.withHeader(strArray71);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat64.withHeader(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder59.setHeaderComments((java.lang.Object[]) strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder46.setHeader(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder38.setHeader(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder26.setHeaderComments(strArray71);
        cSVPrinter20.printRecord((java.lang.Object[]) strArray71);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(char43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        boolean boolean9 = cSVFormat2.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat2.withIgnoreSurroundingSpaces(false);
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        boolean boolean14 = cSVFormat12.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withRecordSeparator('\"');
        boolean boolean13 = cSVFormat10.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat10.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        java.lang.Object[] objArray35 = new java.lang.Object[] { true, cSVFormat29, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat23.withHeaderComments(objArray35);
        cSVPrinter21.printRecord(objArray35);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat40);
        java.lang.String str42 = cSVParser41.getFirstEndOfLine();
        boolean boolean43 = cSVParser41.hasHeaderComment();
        cSVParser41.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser41.stream();
        long long46 = cSVParser41.getCurrentLineNumber();
        cSVPrinter21.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser41);
        java.lang.String str48 = cSVParser41.getHeaderComment();
        boolean boolean49 = cSVFormat1.equals((java.lang.Object) cSVParser41);
        boolean boolean50 = cSVParser41.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withSystemRecordSeparator();
        boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreHeaderCase(true);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder16.build();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat19.printer();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = builder24.build();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean30 = cSVFormat29.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray37 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withHeader(strArray37);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat29.withHeaderComments((java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder24.setHeaderComments((java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder48.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray64 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat58.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat57.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder52.setHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat43.withHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder40.setHeaderComments(strArray64);
        cSVPrinter21.printRecords((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat0.withHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat0.withTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVFormat73);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        cSVPrinter5.close(true);
        java.lang.Appendable appendable22 = cSVPrinter5.getOut();
        java.sql.ResultSet resultSet23 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertNotNull(appendable22);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setNullString("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.Character char45 = cSVFormat44.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter48 = cSVFormat47.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.String str59 = cSVFormat58.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withQuote('a');
        java.lang.Object[] objArray62 = new java.lang.Object[] { true, cSVFormat56, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat50.withHeaderComments(objArray62);
        cSVPrinter48.printRecord(objArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder38.setHeaderComments(objArray62);
        cSVPrinter33.printRecord(objArray62);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder27.setHeaderComments(objArray62);
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str69 = cSVFormat68.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat71.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat71.printer();
        org.apache.commons.csv.CSVFormat.Builder builder75 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder75.setIgnoreHeaderCase(true);
        java.lang.String[] strArray80 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder75.setHeaderComments(strArray80);
        cSVPrinter74.printRecords((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder67.setHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat14.withHeaderComments((java.lang.Object[]) strArray80);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVPrinter48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "," + "'", str69, ",");
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(cSVFormat84);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        java.lang.String str2 = cSVFormat1.toString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:true" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:true");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat7.getQuoteMode();
        java.lang.String str14 = cSVFormat7.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "," + "'", str14, ",");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat9.withIgnoreSurroundingSpaces(false);
        java.lang.String[] strArray16 = cSVFormat9.getHeader();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        boolean boolean7 = cSVFormat6.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser9.spliterator();
        java.lang.String str11 = cSVParser9.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser9.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordItor12);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        boolean boolean7 = cSVFormat6.getAllowDuplicateHeaderNames();
        boolean boolean8 = cSVFormat6.isEscapeCharacterSet();
        boolean boolean9 = cSVFormat6.getTrailingDelimiter();
        java.lang.String[] strArray10 = cSVFormat6.getHeader();
        boolean boolean11 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withTrailingDelimiter(true);
        java.lang.Character char9 = cSVFormat5.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.QuoteMode quoteMode9 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setQuoteMode(quoteMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowDuplicateHeaderNames(false);
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setHeader(resultSet13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAllowMissingColumnNames(false);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setHeader(resultSet17);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder14.build();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder11.setHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat2.withHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat2.printer();
        java.sql.ResultSet resultSet29 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter28.printRecords(resultSet29, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat81.withTrailingDelimiter(false);
        boolean boolean84 = cSVFormat83.isNullStringSet();
        boolean boolean85 = cSVFormat83.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrim();
        boolean boolean8 = cSVFormat1.isNullStringSet();
        java.nio.file.Path path9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat1.print(path9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder2.setHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeaderComments(strArray42);
        java.sql.ResultSet resultSet48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder18.setHeader(resultSet48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder18.setHeaderComments(strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str60 = cSVFormat59.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withTrailingDelimiter(false);
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode64 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder58.setQuoteMode(quoteMode64);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "," + "'", str60, ",");
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertTrue("'" + quoteMode64 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode64.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withTrim(true);
        java.lang.String str20 = cSVFormat17.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setIgnoreHeaderCase(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        char char5 = cSVFormat3.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        java.lang.String str18 = cSVFormat16.toString();
        boolean boolean19 = cSVFormat16.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setSkipHeaderRecord(false);
        boolean boolean30 = cSVFormat16.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat16.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withQuote('a');
        java.lang.Object[] objArray46 = new java.lang.Object[] { true, cSVFormat40, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat34.withHeaderComments(objArray46);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.String str50 = cSVFormat49.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass52 = cSVFormat51.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat54.withSystemRecordSeparator();
        boolean boolean59 = cSVFormat58.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode67 = cSVFormat63.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat63.withSkipHeaderRecord(true);
        boolean boolean70 = cSVFormat58.equals((java.lang.Object) cSVFormat69);
        org.apache.commons.csv.CSVFormat.Predefined predefined71 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat72 = predefined71.getFormat();
        java.lang.Character char73 = cSVFormat72.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat72.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter76 = cSVFormat75.printer();
        cSVPrinter76.flush();
        java.lang.Appendable appendable78 = cSVPrinter76.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter79 = cSVFormat69.print(appendable78);
        cSVFormat47.print((java.lang.Object) cSVFormat51, appendable78, true);
        cSVFormat13.print((java.lang.Object) '\t', appendable78, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter84 = cSVFormat3.print(appendable78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser85 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str18, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertTrue("'" + quoteMode67 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode67.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + predefined71 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined71.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNull(char73);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVPrinter76);
        org.junit.Assert.assertNotNull(appendable78);
        org.junit.Assert.assertNotNull(cSVPrinter79);
        org.junit.Assert.assertNotNull(cSVPrinter84);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.Class<?> wildcardClass5 = cSVFormat1.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withTrim();
        boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        boolean boolean6 = cSVFormat3.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withCommentMarker((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withRecordSeparator('\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser3.getHeaderMap();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser3.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(cSVRecordList10);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat35);
        java.util.List<java.lang.String> strList37 = cSVParser36.getHeaderNames();
        boolean boolean38 = cSVParser36.hasTrailerComment();
        boolean boolean39 = cSVParser36.hasHeaderComment();
        java.lang.String str40 = cSVParser36.getTrailerComment();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser36);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(',');
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withIgnoreHeaderCase(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        cSVPrinter20.printRecord(objArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder10.setHeaderComments(objArray34);
        cSVPrinter5.printRecord(objArray34);
        cSVPrinter5.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withNullString("INVALID []");
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withHeader(resultSet18);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        boolean boolean7 = cSVFormat6.getAllowDuplicateHeaderNames();
        boolean boolean8 = cSVFormat6.isEscapeCharacterSet();
        boolean boolean9 = cSVFormat6.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = cSVFormat11.getDuplicateHeaderMode();
        boolean boolean17 = cSVFormat11.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withSystemRecordSeparator();
        boolean boolean25 = cSVFormat24.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode33 = cSVFormat29.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat29.withSkipHeaderRecord(true);
        boolean boolean36 = cSVFormat24.equals((java.lang.Object) cSVFormat35);
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.Character char39 = cSVFormat38.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat41.printer();
        cSVPrinter42.flush();
        java.lang.Appendable appendable44 = cSVPrinter42.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = cSVFormat35.print(appendable44);
        cSVFormat6.print((java.lang.Object) cSVFormat18, appendable44, false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + quoteMode33 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode33.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(char39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(appendable44);
        org.junit.Assert.assertNotNull(cSVPrinter45);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder2.setHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeaderComments(strArray42);
        java.sql.ResultSet resultSet48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder18.setHeader(resultSet48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder18.setHeaderComments(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder18.setTrailingDelimiter(true);
        java.sql.ResultSet resultSet61 = null;
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setHeader(resultSet61);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setHeader(resultSetMetaData20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder17.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder9.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder9.setAutoFlush(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        boolean boolean4 = cSVFormat0.getAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat0.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat21.withIgnoreEmptyLines();
        boolean boolean23 = cSVFormat22.isQuoteCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        boolean boolean4 = cSVFormat0.isCommentMarkerSet();
        boolean boolean5 = cSVFormat0.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat11.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat17.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean28 = cSVFormat27.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = new org.apache.commons.csv.CSVPrinter(appendable25, cSVFormat27);
        cSVFormat8.println(appendable25);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        java.lang.String str35 = cSVFormat32.getNullString();
        java.lang.Character char36 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = new org.apache.commons.csv.CSVPrinter(appendable25, cSVFormat32);
        java.lang.Appendable appendable38 = cSVPrinter37.getOut();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(appendable38);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        boolean boolean9 = cSVParser3.isClosed();
        java.lang.String str10 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setIgnoreHeaderCase(false);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        boolean boolean20 = cSVFormat19.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray47 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat41.withHeader(strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat40.withHeader(strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder35.setHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder11.setHeader(strArray47);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        java.lang.String str7 = cSVFormat6.getRecordSeparator();
        boolean boolean8 = cSVFormat6.isQuoteCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat2.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat16);
        boolean boolean20 = cSVFormat16.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withTrailingDelimiter(true);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat24);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str17 = cSVFormat16.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withTrailingDelimiter(false);
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode21 = cSVFormat19.getQuoteMode();
        java.lang.Character char22 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withIgnoreEmptyLines(false);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode25 = cSVFormat19.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder13.setDuplicateHeaderMode(duplicateHeaderMode25);
        java.sql.ResultSet resultSet27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setHeader(resultSet27);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "," + "'", str17, ",");
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertTrue("'" + quoteMode21 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode21.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode25 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode25.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        boolean boolean18 = cSVFormat13.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withRecordSeparator("\n");
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        boolean boolean20 = cSVFormat19.getTrim();
        java.lang.Object obj21 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat23.withSystemRecordSeparator();
        boolean boolean28 = cSVFormat27.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        cSVPrinter37.flush();
        java.lang.Appendable appendable39 = cSVPrinter37.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat27.print(appendable39);
        cSVFormat19.print(obj21, appendable39, true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> CommentStart=<4> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> CommentStart=<4> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = org.apache.commons.csv.QuoteMode.NONE;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder7.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.NONE + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder0.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder0.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        java.lang.String[] strArray16 = cSVFormat13.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray51 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat45.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat44.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder39.setHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder26.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat60.printer();
        cSVPrinter61.close(true);
        cSVPrinter61.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.Character char68 = cSVFormat67.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder69 = cSVFormat67.builder();
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder69.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder71.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData74 = null;
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder71.setHeader(resultSetMetaData74);
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder75.setHeaderComments(strArray77);
        cSVPrinter61.printRecord((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder55.setHeaderComments(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat13.withHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder10.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder10.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder10.setSkipHeaderRecord(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVPrinter61);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(char68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentMarker((java.lang.Character) ',');
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat10.printer();
        java.sql.ResultSet resultSet15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter14.printHeaders(resultSet15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
        cSVPrinter1.print((java.lang.Object) cSVFormat10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote((java.lang.Character) '\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setHeader(resultSetMetaData27);
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat42.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder37.setHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder24.setHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder16.setHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder4.setHeaderComments(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        java.lang.Appendable appendable13 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withSystemRecordSeparator();
        boolean boolean21 = cSVFormat20.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat14.withQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder30 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat28);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean41 = cSVFormat40.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray48 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat42.withHeader(strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder38.setHeaderComments(strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat25.withHeaderComments((java.lang.Object[]) strArray48);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray48);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(cSVFormat52);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str11 = cSVFormat10.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = cSVFormat15.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder9.setDuplicateHeaderMode(duplicateHeaderMode16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuote((java.lang.Character) ',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        java.lang.String str8 = cSVParser3.getTrailerComment();
        java.lang.String str9 = cSVParser3.getFirstEndOfLine();
        boolean boolean10 = cSVParser3.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withDelimiter('a');
        java.lang.String[] strArray19 = cSVFormat18.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = builder24.build();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        java.sql.ResultSet resultSet29 = null;
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withHeader(resultSet29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat30.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withDelimiter('a');
        boolean boolean39 = cSVFormat35.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat35.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat35.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        java.lang.Object[] objArray56 = new java.lang.Object[] { true, cSVFormat50, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat44.withHeaderComments(objArray56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.String str60 = cSVFormat59.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass62 = cSVFormat61.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat64.withSystemRecordSeparator();
        boolean boolean69 = cSVFormat68.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        java.lang.Character char74 = cSVFormat73.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat73.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode77 = cSVFormat73.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat73.withSkipHeaderRecord(true);
        boolean boolean80 = cSVFormat68.equals((java.lang.Object) cSVFormat79);
        org.apache.commons.csv.CSVFormat.Predefined predefined81 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat82 = predefined81.getFormat();
        java.lang.Character char83 = cSVFormat82.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat82.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter86 = cSVFormat85.printer();
        cSVPrinter86.flush();
        java.lang.Appendable appendable88 = cSVPrinter86.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter89 = cSVFormat79.print(appendable88);
        cSVFormat57.print((java.lang.Object) cSVFormat61, appendable88, true);
        cSVFormat42.println(appendable88);
        cSVFormat33.println(appendable88);
        boolean boolean94 = cSVFormat18.equals((java.lang.Object) appendable88);
        cSVFormat7.println(appendable88);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNull(char74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertTrue("'" + quoteMode77 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode77.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + predefined81 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined81.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNull(char83);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVPrinter86);
        org.junit.Assert.assertNotNull(appendable88);
        org.junit.Assert.assertNotNull(cSVPrinter89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        java.lang.Appendable appendable66 = cSVPrinter65.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat69 = predefined68.getFormat();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat69);
        java.lang.String str71 = cSVParser70.getFirstEndOfLine();
        boolean boolean72 = cSVParser70.hasHeaderComment();
        cSVParser70.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap74 = cSVParser70.getHeaderMap();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        cSVPrinter5.printComment("\\N");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable66);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strMap74);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        long long6 = cSVParser3.getRecordNumber();
        boolean boolean7 = cSVParser3.hasTrailerComment();
        java.lang.String str8 = cSVParser3.getTrailerComment();
        java.lang.String str9 = cSVParser3.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder9.setDelimiter("INVALID []");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder9.setQuote((java.lang.Character) ',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat9.print(appendable21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat28 = builder25.build();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean31 = cSVFormat30.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray38 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat30.withHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder25.setHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat58.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder53.setHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat44.withHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeaderComments(strArray65);
        cSVFormat7.printRecord(appendable21, (java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat72 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray78 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat72.withHeader(strArray78);
        org.apache.commons.csv.CSVFormat.Builder builder80 = cSVFormat72.builder();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat72.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = new org.apache.commons.csv.CSVPrinter(appendable21, cSVFormat72);
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat72.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat84);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat2.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withCommentMarker('4');
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat28.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat39.printer();
        cSVPrinter40.flush();
        java.lang.Appendable appendable42 = cSVPrinter40.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat34.print(appendable42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean45 = cSVFormat44.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter46 = new org.apache.commons.csv.CSVPrinter(appendable42, cSVFormat44);
        cSVFormat25.println(appendable42);
        cSVFormat20.print((java.lang.Object) '\"', appendable42, false);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat20.withTrim(false);
        org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(appendable42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVParser52);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        java.lang.Appendable appendable66 = cSVPrinter65.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat69 = predefined68.getFormat();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat69);
        java.lang.String str71 = cSVParser70.getFirstEndOfLine();
        boolean boolean72 = cSVParser70.hasHeaderComment();
        cSVParser70.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap74 = cSVParser70.getHeaderMap();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList77 = cSVParser70.getRecords();
        boolean boolean78 = cSVParser70.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable66);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strMap74);
        org.junit.Assert.assertNotNull(cSVRecordList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreSurroundingSpaces(false);
        java.lang.Character char13 = cSVFormat12.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        org.apache.commons.csv.QuoteMode quoteMode18 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet24 = null;
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withHeader(resultSet24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray32 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat26.withHeader(strArray32);
        boolean boolean34 = cSVFormat33.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withIgnoreSurroundingSpaces(false);
        boolean boolean39 = cSVFormat23.equals((java.lang.Object) cSVFormat38);
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat23.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str43 = cSVFormat42.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat45.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter48 = cSVFormat45.printer();
        org.apache.commons.csv.CSVFormat.Builder builder49 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setIgnoreHeaderCase(true);
        java.lang.String[] strArray54 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder49.setHeaderComments(strArray54);
        cSVPrinter48.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder22.setHeaderComments(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + quoteMode18 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode18.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "," + "'", str43, ",");
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVPrinter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withNullString("\\N");
        boolean boolean9 = cSVFormat8.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setRecordSeparator('|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker('4');
        java.lang.String str6 = cSVFormat5.getNullString();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withNullString("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder10.build();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean16 = cSVFormat15.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat15.withHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder10.setHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat7.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat7.withRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat25.withEscape('4');
        boolean boolean31 = cSVFormat1.equals((java.lang.Object) cSVFormat30);
        java.sql.ResultSet resultSet32 = null;
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(resultSet32);
        java.io.File file34 = null;
        java.nio.charset.Charset charset35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat1.print(file34, charset35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVFormat33);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        java.sql.ResultSet resultSet35 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter5.print((java.lang.Object) predefined13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray21 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withHeader(strArray21);
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat15.withSkipHeaderRecord(false);
        cSVPrinter5.print((java.lang.Object) cSVFormat25);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat29);
        java.lang.String str31 = cSVParser30.getFirstEndOfLine();
        boolean boolean32 = cSVParser30.hasHeaderComment();
        cSVParser30.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap34 = cSVParser30.getHeaderMap();
        java.lang.String str35 = cSVParser30.getHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap36 = cSVParser30.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser30);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strMap34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(strMap36);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        java.lang.Appendable appendable66 = cSVPrinter65.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat69 = predefined68.getFormat();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat69);
        java.lang.String str71 = cSVParser70.getFirstEndOfLine();
        boolean boolean72 = cSVParser70.hasHeaderComment();
        cSVParser70.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap74 = cSVParser70.getHeaderMap();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser70);
        long long77 = cSVParser70.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable66);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strMap74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.util.List<java.lang.String> strList4 = cSVParser3.getHeaderNames();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        boolean boolean6 = cSVParser3.isClosed();
        long long7 = cSVParser3.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withIgnoreHeaderCase(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser8.getHeaderMap();
        java.lang.String str10 = cSVParser8.getTrailerComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser8.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator11);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withSystemRecordSeparator();
        boolean boolean24 = cSVFormat23.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat23.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder28 = cSVFormat23.builder();
        org.apache.commons.csv.QuoteMode quoteMode29 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat17.withQuoteMode(quoteMode29);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + quoteMode29 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode29.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat30);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat6.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withAllowMissingColumnNames();
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withHeader(resultSetMetaData11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withIgnoreSurroundingSpaces();
        char char9 = cSVFormat7.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\t' + "'", char9 == '\t');
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat7.printer();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withCommentMarker('|');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str17 = cSVFormat16.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode22 = cSVFormat21.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder15.setDuplicateHeaderMode(duplicateHeaderMode22);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.QuoteMode quoteMode25 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder15.setQuoteMode(quoteMode25);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder5.setQuoteMode(quoteMode25);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "," + "'", str17, ",");
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode22 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode22.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + quoteMode25 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode25.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        java.lang.String str7 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withEscape((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrim();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat17);
        char char19 = cSVFormat17.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        java.lang.Appendable appendable31 = cSVPrinter30.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat21.print(appendable31);
        cSVFormat17.println(appendable31);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        cSVPrinter39.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.Character char51 = cSVFormat50.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        java.lang.Object[] objArray68 = new java.lang.Object[] { true, cSVFormat62, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat56.withHeaderComments(objArray68);
        cSVPrinter54.printRecord(objArray68);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder44.setHeaderComments(objArray68);
        cSVPrinter39.printRecord(objArray68);
        cSVFormat14.printRecord(appendable31, objArray68);
        cSVFormat7.println(appendable31);
        org.apache.commons.csv.CSVFormat.Predefined predefined75 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat76 = predefined75.getFormat();
        java.lang.Character char77 = cSVFormat76.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat76.withDelimiter('a');
        boolean boolean80 = cSVFormat76.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat76.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat76.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat83.withEscape('|');
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withRecordSeparator('\"');
        boolean boolean88 = cSVFormat85.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter89 = new org.apache.commons.csv.CSVPrinter(appendable31, cSVFormat85);
        cSVPrinter89.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\t' + "'", char19 == '\t');
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(appendable31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined75 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined75.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNull(char77);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray29 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat23.withHeader(strArray29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat22.withHeader(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder17.setHeaderComments((java.lang.Object[]) strArray29);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat8.withHeaderComments((java.lang.Object[]) strArray29);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat1.withHeaderComments((java.lang.Object[]) strArray29);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat1.withSkipHeaderRecord();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withIgnoreHeaderCase();
        java.sql.ResultSet resultSet28 = null;
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withHeader(resultSet28);
        boolean boolean30 = cSVFormat27.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        cSVParser3.close();
        cSVParser3.close();
        boolean boolean10 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrim();
        java.lang.String str6 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\t" + "'", str6, "\t");
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        cSVPrinter5.printComment("hi!");
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat17);
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withHeader(resultSet19);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode28 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.Character char31 = cSVFormat30.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat33.printer();
        cSVPrinter34.flush();
        java.lang.Appendable appendable36 = cSVPrinter34.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat24.print(appendable36);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat38);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = builder40.build();
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean46 = cSVFormat45.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray53 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat47.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat45.withHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder40.setHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str61 = cSVFormat60.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder62 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat60);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder64.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder64.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined69 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat70 = predefined69.getFormat();
        java.lang.String str71 = cSVFormat70.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat70.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat74 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray80 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat74.withHeader(strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat73.withHeader(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder68.setHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat59.withHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder85 = builder56.setHeaderComments(strArray80);
        cSVFormat22.printRecord(appendable36, (java.lang.Object[]) strArray80);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray80);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + quoteMode28 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode28.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertNotNull(appendable36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + predefined69 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined69.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat14.withTrim();
        boolean boolean21 = cSVFormat20.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str23 = cSVFormat22.getDelimiterString();
        boolean boolean24 = cSVFormat22.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat26.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat30);
        char char32 = cSVFormat30.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.Character char35 = cSVFormat34.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder36 = cSVFormat34.builder();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat42.printer();
        java.lang.Appendable appendable44 = cSVPrinter43.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = cSVFormat34.print(appendable44);
        cSVFormat30.println(appendable44);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat51.printer();
        cSVPrinter52.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder57 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat55);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder57.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder57.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat69 = predefined68.getFormat();
        java.lang.String str70 = cSVFormat69.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat69.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined74 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat75 = predefined74.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined76 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat77 = predefined76.getFormat();
        java.lang.String str78 = cSVFormat77.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat77.withQuote('a');
        java.lang.Object[] objArray81 = new java.lang.Object[] { true, cSVFormat75, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat69.withHeaderComments(objArray81);
        cSVPrinter67.printRecord(objArray81);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder57.setHeaderComments(objArray81);
        cSVPrinter52.printRecord(objArray81);
        cSVFormat27.printRecord(appendable44, objArray81);
        cSVFormat20.println(appendable44);
        cSVPrinter5.print((java.lang.Object) appendable44);
        cSVPrinter5.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "," + "'", str23, ",");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\t' + "'", char32 == '\t');
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(appendable44);
        org.junit.Assert.assertNotNull(cSVPrinter45);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertTrue("'" + predefined74 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined74.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertTrue("'" + predefined76 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined76.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat5.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray13 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withHeader(strArray13);
        boolean boolean15 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat5.withTrailingDelimiter(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser20 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet2 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat3.printer();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withIgnoreSurroundingSpaces();
        java.lang.Character char8 = cSVFormat7.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        long long7 = cSVParser3.getCurrentLineNumber();
        long long8 = cSVParser3.getRecordNumber();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        long long10 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote((java.lang.Character) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape((java.lang.Character) '\t');
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSetMetaData11);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        boolean boolean6 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withEscape((java.lang.Character) '4');
        java.lang.String str9 = cSVFormat8.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8, 100L, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\t" + "'", str9, "\t");
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.String str19 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuote('a');
        java.lang.Object[] objArray22 = new java.lang.Object[] { true, cSVFormat16, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat10.withHeaderComments(objArray22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass28 = cSVFormat27.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withSystemRecordSeparator();
        boolean boolean35 = cSVFormat34.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode43 = cSVFormat39.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat39.withSkipHeaderRecord(true);
        boolean boolean46 = cSVFormat34.equals((java.lang.Object) cSVFormat45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat51.printer();
        cSVPrinter52.flush();
        java.lang.Appendable appendable54 = cSVPrinter52.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat45.print(appendable54);
        cSVFormat23.print((java.lang.Object) cSVFormat27, appendable54, true);
        cSVFormat8.println(appendable54);
        boolean boolean59 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat8.withAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + quoteMode43 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode43.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(appendable54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(cSVFormat61);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        java.lang.String[] strArray6 = cSVFormat2.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withAutoFlush(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withDelimiter('\"');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        cSVPrinter65.close(true);
        cSVPrinter65.printComment("\r\n");
        java.lang.Appendable appendable70 = cSVPrinter65.getOut();
        cSVPrinter65.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined74 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat75 = predefined74.getFormat();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat75);
        java.lang.String str77 = cSVParser76.getFirstEndOfLine();
        boolean boolean78 = cSVParser76.hasHeaderComment();
        cSVParser76.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream80 = cSVParser76.stream();
        java.lang.String str81 = cSVParser76.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator82 = cSVParser76.spliterator();
        long long83 = cSVParser76.getRecordNumber();
        cSVPrinter65.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        java.util.Map<java.lang.String, java.lang.Integer> strMap85 = cSVParser76.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        cSVPrinter5.printComment("|");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(appendable70);
        org.junit.Assert.assertTrue("'" + predefined74 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined74.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNull(strMap85);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder53 = cSVFormat51.builder();
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData58 = null;
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder55.setHeader(resultSetMetaData58);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder59.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder3.setHeaderComments((java.lang.Object[]) strArray61);
        java.sql.ResultSet resultSet64 = null;
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setHeader(resultSet64);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet14 = null;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withHeader(resultSet14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat15.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat18.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str27 = cSVFormat26.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder30.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray46 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat40.withHeader(strArray46);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat39.withHeader(strArray46);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder34.setHeaderComments((java.lang.Object[]) strArray46);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat25.withHeaderComments((java.lang.Object[]) strArray46);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat18.withHeaderComments((java.lang.Object[]) strArray46);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat16.withHeader(strArray46);
        org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse("", cSVFormat16);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat16.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat54.withSystemRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        boolean boolean83 = cSVFormat7.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat7.withEscape('4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withAllowDuplicateHeaderNames(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The header contains a duplicate name: \",\" in [,, hi!, ,, hi!, ,]. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(cSVFormat85);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        boolean boolean4 = cSVFormat2.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withAllowDuplicateHeaderNames(false);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withHeader(resultSet10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat20.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withSkipHeaderRecord(true);
        boolean boolean27 = cSVFormat15.equals((java.lang.Object) cSVFormat26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        java.lang.Appendable appendable35 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat26.print(appendable35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        cSVPrinter36.printRecord((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray43);
        boolean boolean47 = cSVFormat9.getTrim();
        boolean boolean48 = cSVFormat9.isNullStringSet();
        java.nio.file.Path path49 = null;
        java.nio.charset.Charset charset50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat9.print(path49, charset50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat9.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreSurroundingSpaces();
        java.io.File file12 = null;
        java.nio.charset.Charset charset13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat9.print(file12, charset13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("hi!");
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        java.lang.String str10 = cSVFormat9.toString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withAutoFlush(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowDuplicateHeaderNames(false);
        boolean boolean7 = cSVFormat6.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Builder builder1 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder3 = builder1.setIgnoreHeaderCase(true);
        java.lang.String[] strArray6 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder1.setHeaderComments(strArray6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder1.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder1.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = builder11.build();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat12.withIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12, (long) (byte) 100, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray19 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withHeader(strArray19);
        boolean boolean21 = cSVFormat20.getTrim();
        boolean boolean22 = cSVFormat20.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withIgnoreSurroundingSpaces(false);
        java.lang.String[] strArray27 = cSVFormat20.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder10.setHeader(strArray27);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat2.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat2);
        long long19 = cSVParser18.getRecordNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser18.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(strMap20);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode17 = cSVFormat9.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat9.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder22.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withSystemRecordSeparator();
        boolean boolean35 = cSVFormat34.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat34.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray62 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat56.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat55.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder50.setHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat41.withHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat38.withHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder22.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat9.withHeader(strArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode17 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode17.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        java.lang.String[] strArray7 = cSVFormat6.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withDelimiter('|');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder9.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder9.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat32 = builder31.build();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat0.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setHeaderComments(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat11.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withDelimiter(' ');
        boolean boolean42 = cSVFormat41.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat3 = builder0.build();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withEscape(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat8);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withHeader(resultSet10);
        boolean boolean12 = cSVFormat8.getTrailingDelimiter();
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat8.withHeader(resultSetMetaData13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withHeader(resultSet16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat17.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat23.printer();
        cSVPrinter24.flush();
        java.lang.Appendable appendable26 = cSVPrinter24.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat18.print(appendable26);
        cSVFormat5.print((java.lang.Object) cSVFormat14, appendable26, true);
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withSystemRecordSeparator();
        boolean boolean36 = cSVFormat35.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat35.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat35.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withAutoFlush(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = new org.apache.commons.csv.CSVPrinter(appendable26, cSVFormat42);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(appendable26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat44);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        java.lang.Class<?> wildcardClass10 = cSVFormat8.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#" + "'", str9, "#");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        boolean boolean13 = cSVFormat12.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat15.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuote((java.lang.Character) '#');
        boolean boolean19 = cSVFormat18.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter();
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat0.withHeader(resultSet8);
        boolean boolean10 = cSVFormat9.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        java.lang.String str18 = cSVFormat17.getRecordSeparator();
        java.io.Reader reader19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser20 = cSVFormat17.parse(reader19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream14 = cSVParser10.stream();
        long long15 = cSVParser10.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser10.getRecords();
        boolean boolean17 = cSVParser10.hasTrailerComment();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap19 = cSVParser10.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strMap19);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuote((java.lang.Character) '\"');
        boolean boolean10 = cSVFormat7.getAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter5.print((java.lang.Object) predefined13);
        cSVPrinter5.close(true);
        java.sql.ResultSet resultSet17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowMissingColumnNames();
        cSVPrinter5.print((java.lang.Object) cSVFormat21);
        java.sql.ResultSet resultSet25 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet25, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat0.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat10.withTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat2.printer();
        cSVPrinter4.println();
        cSVPrinter4.printComment("\r\n");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVPrinter4);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        boolean boolean5 = cSVFormat3.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder3.setHeader(resultSetMetaData12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setQuote((java.lang.Character) '\t');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat17);
        char char19 = cSVFormat17.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        java.lang.Appendable appendable31 = cSVPrinter30.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat21.print(appendable31);
        cSVFormat17.println(appendable31);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        cSVPrinter39.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.Character char51 = cSVFormat50.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        java.lang.Object[] objArray68 = new java.lang.Object[] { true, cSVFormat62, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat56.withHeaderComments(objArray68);
        cSVPrinter54.printRecord(objArray68);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder44.setHeaderComments(objArray68);
        cSVPrinter39.printRecord(objArray68);
        cSVFormat14.printRecord(appendable31, objArray68);
        cSVFormat4.println(appendable31);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\t' + "'", char19 == '\t');
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(appendable31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) '4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        boolean boolean15 = cSVFormat7.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        boolean boolean8 = cSVParser3.hasTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withCommentMarker('a');
        char char8 = cSVFormat7.getDelimiter();
        java.lang.String str9 = cSVFormat7.getDelimiterString();
        boolean boolean10 = cSVFormat7.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t');
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\t" + "'", str9, "\t");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setHeader(resultSetMetaData28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder32 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray50 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat44.withHeader(strArray50);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat43.withHeader(strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder38.setHeaderComments((java.lang.Object[]) strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder25.setHeader(strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder17.setHeader(strArray50);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat7.withHeader(strArray50);
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.Character char59 = cSVFormat58.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter62 = cSVFormat61.printer();
        cSVPrinter62.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat66);
        java.lang.String str68 = cSVParser67.getFirstEndOfLine();
        boolean boolean69 = cSVParser67.hasHeaderComment();
        cSVParser67.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream71 = cSVParser67.stream();
        long long72 = cSVParser67.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList73 = cSVParser67.getRecords();
        boolean boolean74 = cSVParser67.hasTrailerComment();
        cSVPrinter62.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser67);
        cSVPrinter62.flush();
        java.lang.Appendable appendable77 = cSVPrinter62.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat7.print(appendable77);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(char59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVPrinter62);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        java.lang.Appendable appendable23 = cSVPrinter22.getOut();
        cSVPrinter22.close();
        cSVPrinter22.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat28);
        java.lang.String str30 = cSVParser29.getFirstEndOfLine();
        boolean boolean31 = cSVParser29.hasHeaderComment();
        cSVParser29.close();
        cSVParser29.close();
        java.lang.String str34 = cSVParser29.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser29.getRecords();
        cSVPrinter22.print((java.lang.Object) cSVRecordList35);
        java.lang.Appendable appendable37 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat16.print(appendable37);
        cSVPrinter38.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(appendable23);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVRecordList35);
        org.junit.Assert.assertNotNull(appendable37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.printer();
        cSVPrinter6.close(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withCommentMarker('|');
        boolean boolean8 = cSVFormat2.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat2.printer();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<#> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertNotNull(cSVParser10);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat24 = builder21.build();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder21.setHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat2.withHeader(strArray34);
        boolean boolean39 = cSVFormat2.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat6.builder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        long long8 = cSVParser3.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords();
        long long10 = cSVParser3.getCurrentLineNumber();
        boolean boolean11 = cSVParser3.hasTrailerComment();
        boolean boolean12 = cSVParser3.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat37.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder27.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder27.setEscape('#');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode18 = cSVFormat17.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat20.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder12.setQuoteMode(quoteMode22);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode18 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode18.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        java.lang.Appendable appendable15 = cSVPrinter14.getOut();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(appendable15);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        java.lang.Appendable appendable9 = cSVPrinter7.getOut();
        cSVFormat1.println(appendable9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass43 = cSVFormat42.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode58 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withSkipHeaderRecord(true);
        boolean boolean61 = cSVFormat49.equals((java.lang.Object) cSVFormat60);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        cSVPrinter67.flush();
        java.lang.Appendable appendable69 = cSVPrinter67.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat60.print(appendable69);
        cSVFormat38.print((java.lang.Object) cSVFormat42, appendable69, true);
        cSVFormat18.println(appendable69);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat1.print(appendable69);
        char char75 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor77 = cSVParser76.iterator();
        java.lang.String str78 = cSVParser76.getFirstEndOfLine();
        boolean boolean79 = cSVParser76.hasTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(appendable9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + quoteMode58 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode58.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(appendable69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertTrue("'" + char75 + "' != '" + '\t' + "'", char75 == '\t');
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNotNull(cSVRecordItor77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder13.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray53 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat47.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat46.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder41.setHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat32.withHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat29.withHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder13.setHeader(strArray53);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray53);
        cSVPrinter5.flush();
        cSVPrinter5.close(true);
        java.sql.ResultSet resultSet64 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printHeaders(resultSet64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreHeaderCase(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        boolean boolean8 = cSVFormat6.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream22 = cSVParser16.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser16.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap24 = cSVParser16.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(cSVRecordStream22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNull(strMap24);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.lang.Character char5 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreHeaderCase(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        java.lang.String str82 = cSVFormat81.getRecordSeparator();
        boolean boolean83 = cSVFormat81.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "," + "'", str82, ",");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        org.apache.commons.csv.CSVFormat.Predefined predefined84 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat85 = predefined84.getFormat();
        java.lang.Character char86 = cSVFormat85.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder87 = cSVFormat85.builder();
        java.lang.String str88 = cSVFormat85.getNullString();
        java.sql.ResultSet resultSet89 = null;
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat85.withHeader(resultSet89);
        java.lang.Character char91 = cSVFormat90.getCommentMarker();
        cSVPrinter83.print((java.lang.Object) cSVFormat90);
        cSVPrinter83.println();
        java.lang.Appendable appendable94 = cSVPrinter83.getOut();
        cSVPrinter83.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
        org.junit.Assert.assertTrue("'" + predefined84 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined84.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNull(char91);
        org.junit.Assert.assertNotNull(appendable94);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        java.lang.Object[] objArray25 = new java.lang.Object[] { true, cSVFormat19, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat13.withHeaderComments(objArray25);
        cSVPrinter11.printRecord(objArray25);
        cSVPrinter11.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.Character char32 = cSVFormat31.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder33 = cSVFormat31.builder();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData38 = null;
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setHeader(resultSetMetaData38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray60 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat54.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat53.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder48.setHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder35.setHeader(strArray60);
        cSVPrinter11.printRecords((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat5.withHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat66.withAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('4');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSet17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setHeader(resultSetMetaData39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder36.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder28.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder18.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat4.withHeader(strArray61);
        boolean boolean69 = cSVFormat4.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withCommentMarker('4');
        java.sql.ResultSet resultSet14 = null;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withHeader(resultSet14);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder19.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setHeader(resultSet26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat29.builder();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder43 = cSVFormat41.builder();
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setHeader(resultSetMetaData48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder52 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat50);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder54.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        java.lang.String str61 = cSVFormat60.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray70 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat64.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat63.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder58.setHeaderComments((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder45.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder37.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder27.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat13.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat5.withHeader(strArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat5.withQuote('\t');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setTrailingDelimiter(false);
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSetMetaData9);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean6 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        java.lang.Character char5 = cSVFormat3.getCommentMarker();
        java.lang.String str6 = cSVFormat3.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat5.getDuplicateHeaderMode();
        java.lang.String str7 = cSVFormat5.getNullString();
        boolean boolean8 = cSVFormat5.getSkipHeaderRecord();
        boolean boolean9 = cSVFormat5.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        org.apache.commons.csv.CSVFormat.Builder builder78 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat79 = builder78.build();
        org.apache.commons.csv.CSVFormat.Builder builder80 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder80.setIgnoreHeaderCase(true);
        java.lang.String[] strArray85 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder80.setHeaderComments(strArray85);
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder80.setAllowMissingColumnNames(false);
        org.apache.commons.csv.QuoteMode quoteMode89 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder80.setQuoteMode(quoteMode89);
        org.apache.commons.csv.CSVFormat.Builder builder91 = builder78.setQuoteMode(quoteMode89);
        org.apache.commons.csv.CSVFormat.Builder builder93 = builder91.setQuote((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + quoteMode89 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode89.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        cSVPrinter14.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str18 = cSVFormat17.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withAllowDuplicateHeaderNames(true);
        boolean boolean23 = cSVFormat22.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withIgnoreHeaderCase();
        cSVPrinter14.print((java.lang.Object) cSVFormat22);
        cSVPrinter14.close(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "," + "'", str18, ",");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(cSVFormat24);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode18 = cSVFormat17.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder12.setDuplicateHeaderMode(duplicateHeaderMode18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder4.setDuplicateHeaderMode(duplicateHeaderMode18);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder4.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        boolean boolean36 = cSVFormat35.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder43 = cSVFormat41.builder();
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder43.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder43.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat51.withSystemRecordSeparator();
        boolean boolean56 = cSVFormat55.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat55.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str64 = cSVFormat63.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder65 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat63);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder67.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        java.lang.String str74 = cSVFormat73.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat73.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray83 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat77.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat76.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder71.setHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat62.withHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat59.withHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder43.setHeader(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder37.setHeaderComments(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder91 = builder31.setHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder22.setHeader(strArray83);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode18 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode18.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.String str6 = cSVFormat5.toString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withSkipHeaderRecord(false);
        java.lang.String str11 = cSVFormat8.getNullString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withIgnoreEmptyLines();
        boolean boolean17 = cSVFormat16.isQuoteCharacterSet();
        char char18 = cSVFormat16.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\t' + "'", char18 == '\t');
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = org.apache.commons.csv.QuoteMode.NONE;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder7.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder21 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        java.lang.Object[] objArray41 = new java.lang.Object[] { true, cSVFormat35, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat29.withHeaderComments(objArray41);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder27.setHeaderComments(objArray41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder27.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat47.builder();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setHeader(resultSetMetaData54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder58 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.String str67 = cSVFormat66.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray76 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat70.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat69.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder64.setHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder51.setHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder27.setHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat82 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str83 = cSVFormat82.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat82.withTrailingDelimiter(false);
        java.lang.Character char86 = cSVFormat85.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode87 = cSVFormat85.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder27.setQuoteMode(quoteMode87);
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder17.setQuoteMode(quoteMode87);
        org.apache.commons.csv.CSVFormat.Builder builder91 = builder17.setQuote('a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.NONE + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "," + "'", str83, ",");
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertTrue("'" + quoteMode87 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode87.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        boolean boolean10 = cSVFormat8.isQuoteCharacterSet();
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat8.println(appendable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat12.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuote('\t');
        boolean boolean3 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat8.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        cSVPrinter9.printRecord(objArray23);
        cSVPrinter9.close(false);
        cSVPrinter9.printComment("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray36 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat30.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.Character char40 = cSVFormat39.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat39.builder();
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder41.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder53 = cSVFormat51.builder();
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData58 = null;
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder55.setHeader(resultSetMetaData58);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str61 = cSVFormat60.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder62 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat60);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder64.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder64.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined69 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat70 = predefined69.getFormat();
        java.lang.String str71 = cSVFormat70.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat70.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat74 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray80 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat74.withHeader(strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat73.withHeader(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder68.setHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder55.setHeader(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder85 = builder47.setHeader(strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat37.withHeader(strArray80);
        cSVPrinter9.printRecord((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat2.withHeaderComments((java.lang.Object[]) strArray80);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + predefined69 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined69.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertNotNull(cSVFormat88);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser3.iterator();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        long long8 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        boolean boolean17 = cSVFormat16.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withIgnoreSurroundingSpaces(false);
        boolean boolean22 = cSVFormat6.equals((java.lang.Object) cSVFormat21);
        org.apache.commons.csv.QuoteMode quoteMode23 = cSVFormat21.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat5.withQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat24.withTrailingDelimiter();
        boolean boolean26 = cSVFormat25.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + quoteMode23 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode23.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder16.setHeader(strArray23);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray23);
        cSVPrinter5.flush();
        cSVPrinter5.close(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines();
        java.lang.Character char11 = cSVFormat10.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode16 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setDuplicateHeaderMode(duplicateHeaderMode16);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withHeader(resultSet22);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        cSVPrinter37.flush();
        java.lang.Appendable appendable39 = cSVPrinter37.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat27.print(appendable39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder43.build();
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean49 = cSVFormat48.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat48.withHeaderComments((java.lang.Object[]) strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder43.setHeaderComments((java.lang.Object[]) strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str64 = cSVFormat63.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder65 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat63);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder67.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        java.lang.String str74 = cSVFormat73.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat73.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray83 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat77.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat76.withHeader(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder71.setHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat62.withHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder59.setHeaderComments(strArray83);
        cSVFormat25.printRecord(appendable39, (java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder17.setHeaderComments(strArray83);
        java.sql.ResultSet resultSet91 = null;
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder17.setHeader(resultSet91);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode16 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode16.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat8.getAllowMissingColumnNames();
        boolean boolean10 = cSVFormat8.getIgnoreSurroundingSpaces();
        boolean boolean11 = cSVFormat8.getAllowMissingColumnNames();
        java.lang.String str12 = cSVFormat8.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\r\n" + "'", str12, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        boolean boolean7 = cSVFormat3.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withNullString("\t");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        cSVParser3.close();
        cSVParser3.close();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker('a');
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setHeader(resultSet8);
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat2.print((java.lang.Object) builder9, appendable10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(false);
        boolean boolean7 = cSVFormat1.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withNullString("INVALID []");
        boolean boolean18 = cSVFormat15.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        cSVPrinter5.print((java.lang.Object) cSVFormat20);
        cSVPrinter5.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.Appendable appendable0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter19 = new org.apache.commons.csv.CSVPrinter(appendable0, cSVFormat18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setEscape('\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.println();
        java.sql.ResultSet resultSet23 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        boolean boolean5 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withCommentMarker(' ');
        java.lang.Character char8 = cSVFormat0.getCommentMarker();
        java.lang.String str9 = cSVFormat0.getDelimiterString();
        boolean boolean10 = cSVFormat0.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "," + "'", str9, ",");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean18 = cSVFormat17.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = new org.apache.commons.csv.CSVPrinter(appendable15, cSVFormat17);
        cSVPrinter19.println();
        cSVPrinter19.printComment("\t");
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat27.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuote('a');
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, cSVFormat36, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat30.withHeaderComments(objArray42);
        cSVPrinter28.printRecord(objArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.Character char47 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder48 = cSVFormat46.builder();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat54.printer();
        java.lang.Appendable appendable56 = cSVPrinter55.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter57 = cSVFormat46.print(appendable56);
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat60);
        java.lang.String str62 = cSVParser61.getFirstEndOfLine();
        boolean boolean63 = cSVParser61.hasHeaderComment();
        cSVParser61.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap65 = cSVParser61.getHeaderMap();
        cSVPrinter57.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser61);
        cSVPrinter28.print((java.lang.Object) cSVParser61);
        java.lang.String str68 = cSVParser61.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap69 = cSVParser61.getHeaderMap();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList70 = cSVParser61.getRecords();
        cSVPrinter19.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser61);
        java.lang.Appendable appendable72 = cSVPrinter19.getOut();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(char47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(appendable56);
        org.junit.Assert.assertNotNull(cSVPrinter57);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVParser61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strMap65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strMap69);
        org.junit.Assert.assertNotNull(cSVRecordList70);
        org.junit.Assert.assertNotNull(appendable72);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("hi!");
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setEscape('#');
        boolean boolean24 = cSVFormat11.equals((java.lang.Object) builder23);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        java.lang.String str11 = cSVFormat7.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream29 = cSVParser25.stream();
        long long30 = cSVParser25.getCurrentLineNumber();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        java.lang.String str32 = cSVParser25.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator33 = cSVParser25.spliterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator33);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet2 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat3.printer();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3);
        boolean boolean7 = cSVFormat3.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentMarker((java.lang.Character) '\t');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder10.build();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder6.build();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = builder9.build();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder9.setTrim(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter(true);
        java.lang.String str7 = cSVFormat6.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "," + "'", str7, ",");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withIgnoreHeaderCase();
        java.sql.ResultSet resultSet28 = null;
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withHeader(resultSet28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyLines(true);
        boolean boolean8 = cSVFormat1.getIgnoreEmptyLines();
        java.nio.file.Path path9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat1.print(path9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = builder7.build();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat2.printer();
        cSVPrinter4.flush();
        cSVPrinter4.flush();
        java.lang.Appendable appendable7 = cSVPrinter4.getOut();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str9 = cSVFormat8.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withCommentMarker('4');
        java.lang.String[] strArray12 = cSVFormat11.getHeaderComments();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray24 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat18.withHeader(strArray24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat17.withHeader(strArray24);
        boolean boolean27 = cSVFormat26.isCommentMarkerSet();
        boolean boolean28 = cSVFormat11.equals((java.lang.Object) cSVFormat26);
        boolean boolean29 = cSVFormat11.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat11.withNullString("");
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = new org.apache.commons.csv.CSVPrinter(appendable7, cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(cSVFormat31);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker('4');
        java.lang.String[] strArray6 = cSVFormat5.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrim(false);
        java.lang.String[] strArray12 = cSVFormat11.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode13 = cSVFormat12.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode13 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode13.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withEscape((java.lang.Character) '|');
        boolean boolean7 = cSVFormat6.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withTrailingDelimiter(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14, (long) ' ', (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray24 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat18.withHeader(strArray24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat17.withHeader(strArray24);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat17.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat28.withTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser13.getHeaderMap();
        java.lang.String str18 = cSVParser13.getFirstEndOfLine();
        java.util.List<java.lang.String> strList19 = cSVParser13.getHeaderNames();
        boolean boolean20 = cSVParser13.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream21 = cSVParser13.stream();
        long long22 = cSVParser13.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        long long24 = cSVParser13.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor25 = cSVParser13.iterator();
        boolean boolean26 = cSVParser13.hasHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap27 = cSVParser13.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strMap27);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        boolean boolean9 = cSVFormat2.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withAllowMissingColumnNames();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        boolean boolean7 = cSVFormat3.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(true);
        boolean boolean12 = cSVFormat11.getAutoFlush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrim();
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withHeader(resultSetMetaData6);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        boolean boolean11 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreHeaderCase(false);
        boolean boolean14 = cSVFormat13.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withHeader(resultSet10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withQuote((java.lang.Character) '\"');
        java.lang.String str23 = cSVFormat22.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat25.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        cSVPrinter37.flush();
        java.lang.Appendable appendable39 = cSVPrinter37.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat31.print(appendable39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean42 = cSVFormat41.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = new org.apache.commons.csv.CSVPrinter(appendable39, cSVFormat41);
        cSVFormat22.println(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = cSVFormat8.print(appendable39);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat50.printer();
        java.lang.Appendable appendable52 = cSVPrinter51.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat55);
        java.lang.String str57 = cSVParser56.getFirstEndOfLine();
        boolean boolean58 = cSVParser56.hasHeaderComment();
        cSVParser56.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap60 = cSVParser56.getHeaderMap();
        cSVPrinter51.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser56);
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat64);
        java.lang.String str66 = cSVParser65.getFirstEndOfLine();
        boolean boolean67 = cSVParser65.hasHeaderComment();
        cSVParser65.close();
        cSVParser65.close();
        cSVParser65.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream71 = cSVParser65.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap72 = cSVParser65.getHeaderMap();
        cSVPrinter51.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser65);
        cSVPrinter45.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser65);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\r\n" + "'", str23, "\r\n");
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(cSVPrinter45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(appendable52);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strMap60);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVParser65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream71);
        org.junit.Assert.assertNull(strMap72);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setHeader(resultSetMetaData8);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder5.setAutoFlush(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines();
        java.lang.Character char11 = cSVFormat10.getEscapeCharacter();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat10.printer();
        java.lang.Character char13 = cSVFormat10.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        java.lang.Object[] objArray33 = new java.lang.Object[] { true, cSVFormat27, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat21.withHeaderComments(objArray33);
        cSVPrinter19.printRecord(objArray33);
        cSVPrinter19.close(false);
        cSVPrinter19.printComment("hi!");
        cSVPrinter19.println();
        java.lang.Appendable appendable41 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat10.print(appendable41);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(appendable41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('4');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSet17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setHeader(resultSetMetaData39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder36.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder28.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder18.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat4.withHeader(strArray61);
        org.apache.commons.csv.QuoteMode quoteMode69 = cSVFormat4.getQuoteMode();
        boolean boolean70 = cSVFormat4.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(quoteMode69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        boolean boolean10 = cSVFormat9.isEscapeCharacterSet();
        java.lang.String[] strArray11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withHeader(strArray11);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder10.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat20.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat26.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        java.lang.Object[] objArray41 = new java.lang.Object[] { true, cSVFormat35, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat29.withHeaderComments(objArray41);
        cSVPrinter27.printRecord(objArray41);
        cSVPrinter27.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat47.builder();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setHeader(resultSetMetaData54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder58 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.String str67 = cSVFormat66.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray76 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat70.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat69.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder64.setHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder51.setHeader(strArray76);
        cSVPrinter27.printRecords((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder10.setHeader(strArray76);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrim();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat17);
        char char19 = cSVFormat17.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        java.lang.Appendable appendable31 = cSVPrinter30.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat21.print(appendable31);
        cSVFormat17.println(appendable31);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        cSVPrinter39.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.Character char51 = cSVFormat50.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        java.lang.Object[] objArray68 = new java.lang.Object[] { true, cSVFormat62, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat56.withHeaderComments(objArray68);
        cSVPrinter54.printRecord(objArray68);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder44.setHeaderComments(objArray68);
        cSVPrinter39.printRecord(objArray68);
        cSVFormat14.printRecord(appendable31, objArray68);
        cSVFormat7.println(appendable31);
        boolean boolean75 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter76 = cSVFormat7.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined77 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat78 = predefined77.getFormat();
        java.lang.Character char79 = cSVFormat78.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder80 = cSVFormat78.builder();
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder80.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder80.setAllowMissingColumnNames(false);
        cSVPrinter76.print((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\t' + "'", char19 == '\t');
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(appendable31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(cSVPrinter76);
        org.junit.Assert.assertTrue("'" + predefined77 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined77.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNull(char79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withSystemRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat cSVFormat26 = builder9.build();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder9.setTrailingDelimiter(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withIgnoreHeaderCase(false);
        char char20 = cSVFormat17.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\t' + "'", char20 == '\t');
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrim();
        java.lang.String str6 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAutoFlush(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream16 = cSVParser10.stream();
        java.lang.String str17 = cSVParser10.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNotNull(cSVRecordStream16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser8.getHeaderMap();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser8.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        java.util.List<java.lang.String> strList35 = cSVParser27.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator36 = strList35.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator37 = strList35.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator38 = strList35.spliterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strSpliterator36);
        org.junit.Assert.assertNotNull(strSpliterator37);
        org.junit.Assert.assertNotNull(strSpliterator38);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withQuote('|');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str14 = cSVFormat13.getDelimiterString();
        boolean boolean15 = cSVFormat13.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat13.printer();
        cSVPrinter19.printComment("\n");
        cSVPrinter19.close();
        cSVPrinter19.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder27.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder27.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode36 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setQuoteMode(quoteMode36);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray46 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat40.withHeader(strArray46);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.Character char50 = cSVFormat49.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder51 = cSVFormat49.builder();
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder57.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        java.lang.Character char62 = cSVFormat61.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder63 = cSVFormat61.builder();
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData68 = null;
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder65.setHeader(resultSetMetaData68);
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str71 = cSVFormat70.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder72 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat70);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder72.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder74.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder74.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined79 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat80 = predefined79.getFormat();
        java.lang.String str81 = cSVFormat80.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat80.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat84 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray90 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat84.withHeader(strArray90);
        org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat83.withHeader(strArray90);
        org.apache.commons.csv.CSVFormat.Builder builder93 = builder78.setHeaderComments((java.lang.Object[]) strArray90);
        org.apache.commons.csv.CSVFormat.Builder builder94 = builder65.setHeader(strArray90);
        org.apache.commons.csv.CSVFormat.Builder builder95 = builder57.setHeader(strArray90);
        org.apache.commons.csv.CSVFormat cSVFormat96 = cSVFormat47.withHeader(strArray90);
        org.apache.commons.csv.CSVFormat.Builder builder97 = builder35.setHeader(strArray90);
        cSVPrinter19.printRecords((java.lang.Object[]) strArray90);
        org.apache.commons.csv.CSVFormat cSVFormat99 = cSVFormat10.withHeader(strArray90);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "," + "'", str14, ",");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + quoteMode36 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode36.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(char50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + predefined79 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined79.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(cSVFormat91);
        org.junit.Assert.assertNotNull(cSVFormat92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(cSVFormat96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(cSVFormat99);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        boolean boolean6 = cSVFormat5.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames();
        boolean boolean8 = cSVFormat7.isEscapeCharacterSet();
        boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(quoteMode6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder11.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withQuote((java.lang.Character) '|');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder11.setQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder11.setQuote('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode17 = cSVFormat9.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat9.withSystemRecordSeparator();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder23.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode32 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setQuoteMode(quoteMode32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat18.withQuoteMode(quoteMode32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode17 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode17.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + quoteMode32 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode32.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        boolean boolean8 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSystemRecordSeparator();
        boolean boolean17 = cSVFormat16.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode50 = cSVFormat49.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder6.setDuplicateHeaderMode(duplicateHeaderMode50);
        org.apache.commons.csv.CSVFormat cSVFormat52 = builder51.build();
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder51.setAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode50 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode50.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withDelimiter('a');
        boolean boolean17 = cSVFormat13.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, cSVFormat28, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat22.withHeaderComments(objArray34);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass40 = cSVFormat39.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat42.withSystemRecordSeparator();
        boolean boolean47 = cSVFormat46.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode55 = cSVFormat51.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat51.withSkipHeaderRecord(true);
        boolean boolean58 = cSVFormat46.equals((java.lang.Object) cSVFormat57);
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        java.lang.Character char61 = cSVFormat60.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter64 = cSVFormat63.printer();
        cSVPrinter64.flush();
        java.lang.Appendable appendable66 = cSVPrinter64.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat57.print(appendable66);
        cSVFormat35.print((java.lang.Object) cSVFormat39, appendable66, true);
        cSVFormat20.println(appendable66);
        cSVFormat11.println(appendable66);
        org.apache.commons.csv.CSVFormat.Builder builder72 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + quoteMode55 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode55.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVPrinter64);
        org.junit.Assert.assertNotNull(appendable66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat16.withIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:true");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        boolean boolean9 = cSVParser3.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser3.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVRecordList10);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream16 = cSVParser10.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser10.getRecords();
        java.lang.String str18 = cSVParser10.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNotNull(cSVRecordStream16);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        java.lang.String[] strArray13 = cSVFormat10.getHeaderComments();
        boolean boolean14 = cSVFormat8.equals((java.lang.Object) cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#" + "'", str9, "#");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreSurroundingSpaces(false);
        boolean boolean16 = cSVFormat0.equals((java.lang.Object) cSVFormat15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat0.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withAllowMissingColumnNames();
        java.lang.String str18 = cSVFormat7.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\t" + "'", str18, "\t");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        long long9 = cSVParser3.getRecordNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat11.printer();
        cSVPrinter30.close();
        cSVPrinter30.flush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVPrinter30);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat2.withSkipHeaderRecord();
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withHeader(resultSet21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames();
        boolean boolean8 = cSVFormat7.isEscapeCharacterSet();
        java.lang.String str9 = cSVFormat7.getNullString();
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withHeader(resultSetMetaData10);
        boolean boolean12 = cSVFormat7.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(quoteMode6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat26.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder21.setHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat12.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode39 = cSVFormat38.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat38.builder();
        boolean boolean42 = cSVFormat38.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode39 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode39.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder53 = cSVFormat51.builder();
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData58 = null;
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder55.setHeader(resultSetMetaData58);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder59.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder3.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Predefined predefined64 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat65 = predefined64.getFormat();
        java.lang.Character char66 = cSVFormat65.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat65.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter69 = cSVFormat68.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.String str72 = cSVFormat71.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined76 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat77 = predefined76.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined78 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat79 = predefined78.getFormat();
        java.lang.String str80 = cSVFormat79.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat79.withQuote('a');
        java.lang.Object[] objArray83 = new java.lang.Object[] { true, cSVFormat77, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat71.withHeaderComments(objArray83);
        org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat84.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat89 = cSVFormat84.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat89.withFirstRecordAsHeader();
        java.sql.ResultSet resultSet91 = null;
        org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat89.withHeader(resultSet91);
        java.lang.String[] strArray93 = cSVFormat89.getHeaderComments();
        cSVPrinter69.printRecords((java.lang.Object[]) strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder95 = builder63.setHeader(strArray93);
        java.lang.String[] strArray96 = null;
        org.apache.commons.csv.CSVFormat.Builder builder97 = builder63.setHeader(strArray96);
        org.apache.commons.csv.CSVFormat.Builder builder99 = builder63.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + predefined64 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined64.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNull(char66);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(cSVPrinter69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertTrue("'" + predefined76 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined76.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertTrue("'" + predefined78 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined78.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(cSVFormat89);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNotNull(cSVFormat92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        boolean boolean20 = cSVFormat19.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray47 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat41.withHeader(strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat40.withHeader(strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder35.setHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode53 = cSVFormat52.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder13.setDuplicateHeaderMode(duplicateHeaderMode53);
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder57 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat55);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder57.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat60 = builder57.build();
        org.apache.commons.csv.CSVFormat cSVFormat62 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean63 = cSVFormat62.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray70 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat64.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat62.withHeaderComments((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder57.setHeaderComments((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder13.setHeaderComments(strArray70);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode53 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode53.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withEscape('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withAllowDuplicateHeaderNames();
        java.lang.String str11 = cSVFormat10.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\t" + "'", str11, "\t");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setCommentMarker((java.lang.Character) '|');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator('|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str19 = cSVFormat18.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode24 = cSVFormat23.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder17.setDuplicateHeaderMode(duplicateHeaderMode24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder5.setDuplicateHeaderMode(duplicateHeaderMode24);
        java.lang.Object[] objArray27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setHeaderComments(objArray27);
        org.apache.commons.csv.CSVFormat cSVFormat29 = builder26.build();
        java.sql.ResultSetMetaData resultSetMetaData30 = null;
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withHeader(resultSetMetaData30);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "," + "'", str19, ",");
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode24 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode24.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat31);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("a");
        java.io.File file11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat10.print(file11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getHeaderComment();
        cSVParser3.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        java.lang.String str8 = cSVParser7.getTrailerComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser7.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder13.build();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder21.setHeader(resultSet26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        cSVPrinter33.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str38 = cSVFormat37.getDelimiterString();
        boolean boolean39 = cSVFormat37.isEscapeCharacterSet();
        cSVPrinter33.print((java.lang.Object) boolean39);
        cSVPrinter33.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.Character char44 = cSVFormat43.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter47 = cSVFormat46.printer();
        cSVPrinter47.close(true);
        cSVPrinter47.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.Character char53 = cSVFormat52.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder54 = cSVFormat52.builder();
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder58.setHeader(strArray65);
        cSVPrinter47.printRecords((java.lang.Object[]) strArray65);
        cSVPrinter33.printRecords((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder21.setHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat14.withHeader(strArray65);
        java.sql.ResultSet resultSet72 = null;
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat71.withHeader(resultSet72);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "," + "'", str38, ",");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVPrinter47);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(char53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat73);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setHeader(resultSetMetaData15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray37 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withHeader(strArray37);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat30.withHeader(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder25.setHeaderComments((java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder12.setHeader(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder2.setHeaderComments((java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder42.setEscape('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder18.build();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder26.setHeader(resultSet31);
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.Character char35 = cSVFormat34.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat37.printer();
        cSVPrinter38.flush();
        cSVPrinter38.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str43 = cSVFormat42.getDelimiterString();
        boolean boolean44 = cSVFormat42.isEscapeCharacterSet();
        cSVPrinter38.print((java.lang.Object) boolean44);
        cSVPrinter38.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat51.printer();
        cSVPrinter52.close(true);
        cSVPrinter52.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder59 = cSVFormat57.builder();
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray70 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat64.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder63.setHeader(strArray70);
        cSVPrinter52.printRecords((java.lang.Object[]) strArray70);
        cSVPrinter38.printRecords((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder26.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat19.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat4.withHeader(strArray70);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "," + "'", str43, ",");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVFormat77);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.isEscapeCharacterSet();
        boolean boolean8 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        cSVPrinter15.flush();
        java.lang.Appendable appendable17 = cSVPrinter15.getOut();
        cSVFormat9.println(appendable17);
        cSVFormat6.println(appendable17);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat6.withEscape('4');
        java.io.Reader reader22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser23 = cSVFormat21.parse(reader22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable17);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withAllowDuplicateHeaderNames();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        java.lang.String[] strArray9 = cSVFormat7.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNull(strArray9);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        boolean boolean16 = cSVParser10.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet3 = null;
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet3);
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreSurroundingSpaces(false);
        boolean boolean18 = cSVFormat2.equals((java.lang.Object) cSVFormat17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.printer();
        org.apache.commons.csv.QuoteMode quoteMode7 = org.apache.commons.csv.QuoteMode.MINIMAL;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withRecordSeparator("\n");
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withQuote('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getTrailerComment();
        boolean boolean5 = cSVParser3.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser3.getRecords();
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        java.lang.String str9 = cSVFormat6.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "," + "'", str9, ",");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreHeaderCase(true);
        java.nio.file.Path path10 = null;
        java.nio.charset.Charset charset11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat9.print(path10, charset11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        cSVPrinter14.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str18 = cSVFormat17.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withAllowDuplicateHeaderNames(true);
        boolean boolean23 = cSVFormat22.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withIgnoreHeaderCase();
        cSVPrinter14.print((java.lang.Object) cSVFormat22);
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat30.printer();
        cSVPrinter31.close(true);
        cSVPrinter31.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder42.setHeader(strArray49);
        cSVPrinter31.printRecords((java.lang.Object[]) strArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = cSVFormat22.format((java.lang.Object[]) strArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "," + "'", str18, ",");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVPrinter31);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        boolean boolean9 = cSVParser3.isClosed();
        long long10 = cSVParser3.getRecordNumber();
        long long11 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        java.lang.String[] strArray13 = cSVFormat12.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(strArray13);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames();
        java.lang.String str6 = cSVFormat1.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\t" + "'", str6, "\t");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withDelimiter('4');
        boolean boolean82 = cSVFormat7.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        boolean boolean14 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withQuote('a');
        java.lang.Object[] objArray31 = new java.lang.Object[] { true, cSVFormat25, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat19.withHeaderComments(objArray31);
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass37 = cSVFormat36.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat39.withSystemRecordSeparator();
        boolean boolean44 = cSVFormat43.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode52 = cSVFormat48.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat48.withSkipHeaderRecord(true);
        boolean boolean55 = cSVFormat43.equals((java.lang.Object) cSVFormat54);
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat60.printer();
        cSVPrinter61.flush();
        java.lang.Appendable appendable63 = cSVPrinter61.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter64 = cSVFormat54.print(appendable63);
        cSVFormat32.print((java.lang.Object) cSVFormat36, appendable63, true);
        cSVFormat12.println(appendable63);
        org.apache.commons.csv.CSVPrinter cSVPrinter68 = cSVFormat3.print(appendable63);
        boolean boolean69 = cSVFormat3.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat3.withAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + quoteMode52 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode52.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVPrinter61);
        org.junit.Assert.assertNotNull(appendable63);
        org.junit.Assert.assertNotNull(cSVPrinter64);
        org.junit.Assert.assertNotNull(cSVPrinter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(cSVFormat70);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withEscape(',');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat21.withIgnoreHeaderCase();
        boolean boolean23 = cSVFormat22.getSkipHeaderRecord();
        java.lang.String str24 = cSVFormat22.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false" + "'", str24, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        java.lang.Character char5 = cSVFormat4.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(char5);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat11.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withSkipHeaderRecord(true);
        boolean boolean18 = cSVFormat6.equals((java.lang.Object) cSVFormat17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat23.printer();
        cSVPrinter24.flush();
        java.lang.Appendable appendable26 = cSVPrinter24.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat17.print(appendable26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat29.builder();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder35.setHeader(strArray42);
        cSVFormat0.printRecord(appendable26, (java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withDelimiter('a');
        boolean boolean51 = cSVFormat47.isQuoteCharacterSet();
        java.lang.Character char52 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter53 = new org.apache.commons.csv.CSVPrinter(appendable26, cSVFormat47);
        java.lang.String str54 = cSVFormat47.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat47.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(appendable26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat55);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        java.lang.String[] strArray14 = cSVFormat7.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat7.withIgnoreHeaderCase(true);
        boolean boolean19 = cSVFormat18.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
        boolean boolean6 = cSVFormat5.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setHeader(resultSetMetaData12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setTrim(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray62 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat56.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat55.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder50.setHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder37.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder29.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder15.setHeader(strArray62);
        java.sql.ResultSetMetaData resultSetMetaData69 = null;
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder15.setHeader(resultSetMetaData69);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder15.setNullString("hi!");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat11.withTrim(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter(false);
        boolean boolean12 = cSVFormat8.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        cSVPrinter14.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        cSVPrinter22.printRecord(objArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat41);
        java.lang.String str43 = cSVParser42.getFirstEndOfLine();
        boolean boolean44 = cSVParser42.hasHeaderComment();
        cSVParser42.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream46 = cSVParser42.stream();
        long long47 = cSVParser42.getCurrentLineNumber();
        cSVPrinter22.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser42);
        java.lang.String str49 = cSVParser42.getFirstEndOfLine();
        cSVPrinter14.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser42);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVParser42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        java.lang.String str11 = cSVFormat10.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str11, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.isEscapeCharacterSet();
        boolean boolean8 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        cSVPrinter15.flush();
        java.lang.Appendable appendable17 = cSVPrinter15.getOut();
        cSVFormat9.println(appendable17);
        cSVFormat6.println(appendable17);
        boolean boolean20 = cSVFormat6.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        boolean boolean6 = cSVFormat2.getTrailingDelimiter();
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withHeader(resultSetMetaData7);
        boolean boolean9 = cSVFormat2.getTrim();
        java.lang.String[] strArray10 = cSVFormat2.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat2.withEscape((java.lang.Character) ' ');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        java.lang.Character char7 = cSVFormat3.getCommentMarker();
        java.lang.String str8 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat3.withDelimiter('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        java.lang.String str6 = cSVParser3.getHeaderComment();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        boolean boolean8 = cSVParser3.isClosed();
        java.lang.String str9 = cSVParser3.getHeaderComment();
        long long10 = cSVParser3.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        cSVPrinter18.close(true);
        cSVPrinter18.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray36 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat30.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder29.setHeader(strArray36);
        cSVPrinter18.printRecords((java.lang.Object[]) strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat7.withHeader(strArray36);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withRecordSeparator(",");
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.String str44 = cSVFormat40.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]" + "'", str44, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat5.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.close(true);
        cSVPrinter13.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat20);
        java.lang.String str22 = cSVParser21.getFirstEndOfLine();
        boolean boolean23 = cSVParser21.hasHeaderComment();
        cSVParser21.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap25 = cSVParser21.getHeaderMap();
        java.lang.String str26 = cSVParser21.getFirstEndOfLine();
        java.util.List<java.lang.String> strList27 = cSVParser21.getHeaderNames();
        boolean boolean28 = cSVParser21.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream29 = cSVParser21.stream();
        long long30 = cSVParser21.getCurrentLineNumber();
        cSVPrinter13.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser21);
        long long32 = cSVParser21.getRecordNumber();
        cSVPrinter7.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser21);
        java.lang.String str34 = cSVParser21.getFirstEndOfLine();
        long long35 = cSVParser21.getCurrentLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder2.setHeaderComments((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray42 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat36.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat35.withHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder30.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat21.withHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeaderComments(strArray42);
        java.sql.ResultSet resultSet48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder18.setHeader(resultSet48);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder18.setNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder18.setQuote((java.lang.Character) '|');
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder18.setTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat9.print(appendable21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat28 = builder25.build();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean31 = cSVFormat30.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray38 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat30.withHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder25.setHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat58.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder53.setHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat44.withHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeaderComments(strArray65);
        cSVFormat7.printRecord(appendable21, (java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat7.withDelimiter('#');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(cSVFormat73);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        boolean boolean13 = cSVFormat12.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setDelimiter('\"');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }
}

