import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        java.lang.String str4 = cSVFormat2.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withEscape('|');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withFirstRecordAsHeader();
        boolean boolean11 = cSVFormat10.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat18);
        java.lang.String str20 = cSVParser19.getFirstEndOfLine();
        boolean boolean21 = cSVParser19.hasHeaderComment();
        cSVParser19.close();
        cSVParser19.close();
        cSVParser19.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream25 = cSVParser19.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser19.getHeaderMap();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser19);
        long long28 = cSVParser19.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream25);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withCommentMarker('4');
        java.lang.String str31 = cSVFormat30.getNullString();
        java.sql.ResultSet resultSet32 = null;
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withHeader(resultSet32);
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withTrim(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = new org.apache.commons.csv.CSVPrinter(appendable25, cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat37);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentMarker('|');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withNullString("hi!");
        boolean boolean14 = cSVFormat9.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(false);
        boolean boolean7 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withEscape((java.lang.Character) '\\');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.String str6 = cSVFormat5.toString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreHeaderCase(true);
        boolean boolean11 = cSVFormat8.getTrim();
        boolean boolean12 = cSVFormat8.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.lang.String[] strArray7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat12.withCommentMarker('|');
        boolean boolean18 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setHeader(resultSetMetaData26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.Character char32 = cSVFormat31.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder33 = cSVFormat31.builder();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData38 = null;
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setHeader(resultSetMetaData38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray60 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat54.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat53.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder48.setHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder35.setHeader(strArray60);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.close(true);
        cSVPrinter70.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined75 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat76 = predefined75.getFormat();
        java.lang.Character char77 = cSVFormat76.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder78 = cSVFormat76.builder();
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder78.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder80.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData83 = null;
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder80.setHeader(resultSetMetaData83);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder87 = builder84.setHeaderComments(strArray86);
        cSVPrinter70.printRecord((java.lang.Object[]) strArray86);
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder64.setHeaderComments(strArray86);
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder25.setHeaderComments((java.lang.Object[]) strArray86);
        org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat12.withHeader(strArray86);
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder4.setHeaderComments((java.lang.Object[]) strArray86);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertTrue("'" + predefined75 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined75.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNull(char77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(cSVFormat91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
        boolean boolean7 = cSVFormat6.getAllowDuplicateHeaderNames();
        boolean boolean8 = cSVFormat6.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.printer();
        boolean boolean4 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withTrim(false);
        org.apache.commons.csv.QuoteMode quoteMode35 = cSVFormat32.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(quoteMode35);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        java.lang.String[] strArray7 = cSVFormat2.getHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setTrim(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        char char26 = cSVFormat24.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder30 = cSVFormat28.builder();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        java.lang.Appendable appendable38 = cSVPrinter37.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat28.print(appendable38);
        cSVFormat24.println(appendable38);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder43.build();
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean49 = cSVFormat48.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat48.withHeaderComments((java.lang.Object[]) strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder43.setHeaderComments((java.lang.Object[]) strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat24.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder19.setHeaderComments(strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat2.withHeaderComments((java.lang.Object[]) strArray56);
        java.io.File file63 = null;
        java.nio.charset.Charset charset64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat2.print(file63, charset64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\t' + "'", char26 == '\t');
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(appendable38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVFormat62);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        boolean boolean8 = cSVParser3.hasTrailerComment();
        boolean boolean9 = cSVParser3.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser3.iterator();
        boolean boolean11 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        java.lang.String str5 = cSVFormat2.getNullString();
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(resultSet6);
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        boolean boolean9 = cSVFormat7.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder3.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setHeader(resultSet19);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray51 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat45.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat44.withHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder39.setHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder26.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder16.setHeaderComments((java.lang.Object[]) strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder3.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder3.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        boolean boolean9 = cSVFormat5.isNullStringSet();
        boolean boolean10 = cSVFormat5.isCommentMarkerSet();
        java.lang.Character char11 = cSVFormat5.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(char11);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withQuote((java.lang.Character) '|');
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withHeader(resultSetMetaData11);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = org.apache.commons.csv.QuoteMode.NONE;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder7.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder7.setEscape('4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.NONE + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        boolean boolean6 = cSVFormat4.getTrailingDelimiter();
        boolean boolean7 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String[] strArray8 = cSVFormat4.getHeader();
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat4.parse(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat13.withRecordSeparator('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        boolean boolean7 = cSVFormat6.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator(' ');
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat9.parse(reader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        java.lang.String str18 = cSVFormat17.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withIgnoreEmptyLines(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        org.apache.commons.csv.CSVFormat.Predefined predefined84 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat85 = predefined84.getFormat();
        java.lang.Character char86 = cSVFormat85.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder87 = cSVFormat85.builder();
        java.lang.String str88 = cSVFormat85.getNullString();
        java.sql.ResultSet resultSet89 = null;
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat85.withHeader(resultSet89);
        java.lang.Character char91 = cSVFormat90.getCommentMarker();
        cSVPrinter83.print((java.lang.Object) cSVFormat90);
        cSVPrinter83.println();
        cSVPrinter83.println();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
        org.junit.Assert.assertTrue("'" + predefined84 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined84.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertNull(char91);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        boolean boolean11 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withTrailingDelimiter();
        java.lang.String str13 = cSVFormat10.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\r\n" + "'", str13, "\r\n");
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuote((java.lang.Character) '\\');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape('\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat10.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDuplicateHeaderMode(duplicateHeaderMode11);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setAutoFlush(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat20.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withSkipHeaderRecord(true);
        boolean boolean27 = cSVFormat15.equals((java.lang.Object) cSVFormat26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        java.lang.Appendable appendable35 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat26.print(appendable35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        cSVPrinter36.printRecord((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat9.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.QuoteMode quoteMode49 = cSVFormat46.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + quoteMode49 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode49.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray16 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withHeader(strArray16);
        boolean boolean18 = cSVFormat17.getTrim();
        boolean boolean19 = cSVFormat17.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass42 = cSVFormat41.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withSystemRecordSeparator();
        boolean boolean49 = cSVFormat48.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode57 = cSVFormat53.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat53.withSkipHeaderRecord(true);
        boolean boolean60 = cSVFormat48.equals((java.lang.Object) cSVFormat59);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat65.printer();
        cSVPrinter66.flush();
        java.lang.Appendable appendable68 = cSVPrinter66.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter69 = cSVFormat59.print(appendable68);
        cSVFormat37.print((java.lang.Object) cSVFormat41, appendable68, true);
        cSVFormat17.println(appendable68);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat0.print(appendable68);
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat0.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat75.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat77.withRecordSeparator("INVALID []");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + quoteMode57 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode57.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertNotNull(appendable68);
        org.junit.Assert.assertNotNull(cSVPrinter69);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat79);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        cSVPrinter11.flush();
        java.lang.Appendable appendable13 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat1.print(appendable13);
        cSVPrinter14.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str18 = cSVFormat17.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withAllowDuplicateHeaderNames(true);
        boolean boolean23 = cSVFormat22.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withIgnoreHeaderCase();
        cSVPrinter14.print((java.lang.Object) cSVFormat22);
        char char26 = cSVFormat22.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(appendable13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "," + "'", str18, ",");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + ',' + "'", char26 == ',');
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream22 = cSVParser16.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser16.getHeaderMap();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor24 = cSVParser16.iterator();
        long long25 = cSVParser16.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser16.spliterator();
        java.lang.String str27 = cSVParser16.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(cSVRecordStream22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNotNull(cSVRecordItor24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(false);
        java.lang.String str12 = cSVFormat11.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "a" + "'", str12, "a");
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat2.printer();
        java.lang.String str5 = cSVFormat2.getNullString();
        boolean boolean6 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> CommentStart=<4> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setHeader(resultSetMetaData18);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder19.setHeaderComments(strArray21);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray21);
        cSVPrinter5.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat28);
        java.sql.ResultSet resultSet30 = null;
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withHeader(resultSet30);
        char char32 = cSVFormat28.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat28);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser33);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\t' + "'", char32 == '\t');
        org.junit.Assert.assertNotNull(cSVParser33);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        boolean boolean12 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4);
        char char6 = cSVFormat4.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat8.print(appendable18);
        cSVFormat4.println(appendable18);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat4.withIgnoreHeaderCase();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        java.lang.String str17 = cSVFormat15.toString();
        boolean boolean18 = cSVFormat15.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setSkipHeaderRecord(false);
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat15.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat12.print((java.lang.Object) '\t', appendable77, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = cSVFormat2.print(appendable77);
        cSVPrinter83.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false HeaderComments:[Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter83);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withSystemRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat30.withQuote((java.lang.Character) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('#')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withSkipHeaderRecord(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.println();
        java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecord(cSVRecordIterable27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        boolean boolean6 = cSVFormat4.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withIgnoreEmptyLines();
        char char9 = cSVFormat0.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '|' + "'", char9 == '|');
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        java.lang.Appendable appendable27 = cSVPrinter26.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat30);
        java.lang.String str32 = cSVParser31.getFirstEndOfLine();
        boolean boolean33 = cSVParser31.hasHeaderComment();
        cSVParser31.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream35 = cSVParser31.stream();
        java.lang.String str36 = cSVParser31.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser31.spliterator();
        long long38 = cSVParser31.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor39 = cSVParser31.iterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream40 = cSVParser31.stream();
        cSVPrinter26.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser31);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(appendable27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor39);
        org.junit.Assert.assertNotNull(cSVRecordStream40);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '#');
        boolean boolean3 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.QuoteMode quoteMode9 = cSVFormat8.getQuoteMode();
        boolean boolean10 = cSVFormat8.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + quoteMode9 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode9.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat17);
        java.lang.String str19 = cSVParser18.getFirstEndOfLine();
        boolean boolean20 = cSVParser18.hasHeaderComment();
        cSVParser18.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream22 = cSVParser18.stream();
        long long23 = cSVParser18.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser18.getRecords();
        boolean boolean25 = cSVParser18.hasTrailerComment();
        cSVPrinter13.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser18);
        cSVPrinter13.flush();
        java.lang.Appendable appendable28 = cSVPrinter13.getOut();
        cSVFormat2.println(appendable28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(appendable28);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean15 = cSVFormat14.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray22 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withHeader(strArray22);
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat14.withHeaderComments((java.lang.Object[]) strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str27 = cSVFormat26.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat29.printer();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setIgnoreHeaderCase(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder33.setHeaderComments(strArray38);
        cSVPrinter32.printRecords((java.lang.Object[]) strArray38);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.Character char44 = cSVFormat43.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter47 = cSVFormat46.printer();
        cSVPrinter47.flush();
        java.lang.Appendable appendable49 = cSVPrinter47.getOut();
        cSVPrinter47.close(true);
        cSVPrinter47.close(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.Character char56 = cSVFormat55.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter59 = cSVFormat58.printer();
        cSVPrinter59.close(true);
        cSVPrinter59.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.Character char65 = cSVFormat64.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder66 = cSVFormat64.builder();
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder66.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder70.setHeader(strArray77);
        cSVPrinter59.printRecords((java.lang.Object[]) strArray77);
        cSVPrinter47.printRecords((java.lang.Object[]) strArray77);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray77);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "," + "'", str27, ",");
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVPrinter47);
        org.junit.Assert.assertNotNull(appendable49);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(char56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVPrinter59);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(char65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.printer();
        org.apache.commons.csv.QuoteMode quoteMode7 = org.apache.commons.csv.QuoteMode.MINIMAL;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat17.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:true");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder2.setDelimiter("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder2.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder2.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withSystemRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withCommentMarker('|');
        boolean boolean20 = cSVFormat14.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setHeader(resultSetMetaData28);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str43 = cSVFormat42.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray62 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat56.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat55.withHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder50.setHeaderComments((java.lang.Object[]) strArray62);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder37.setHeader(strArray62);
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        java.lang.Character char69 = cSVFormat68.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat71.printer();
        cSVPrinter72.close(true);
        cSVPrinter72.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined77 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat78 = predefined77.getFormat();
        java.lang.Character char79 = cSVFormat78.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder80 = cSVFormat78.builder();
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder80.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder82.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData85 = null;
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder82.setHeader(resultSetMetaData85);
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder86.setHeaderComments(strArray88);
        cSVPrinter72.printRecord((java.lang.Object[]) strArray88);
        org.apache.commons.csv.CSVFormat.Builder builder91 = builder66.setHeaderComments(strArray88);
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder27.setHeaderComments((java.lang.Object[]) strArray88);
        org.apache.commons.csv.CSVFormat cSVFormat93 = cSVFormat14.withHeader(strArray88);
        org.apache.commons.csv.CSVFormat.Builder builder94 = builder12.setHeader(strArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = cSVFormat1.format((java.lang.Object[]) strArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertTrue("'" + predefined77 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined77.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNull(char79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(cSVFormat93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape(',');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withSystemRecordSeparator();
        boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat18.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat18.withSkipHeaderRecord(true);
        boolean boolean25 = cSVFormat13.equals((java.lang.Object) cSVFormat24);
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat30.printer();
        cSVPrinter31.flush();
        java.lang.Appendable appendable33 = cSVPrinter31.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat24.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        java.lang.String str38 = cSVFormat36.toString();
        boolean boolean39 = cSVFormat36.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder43 = cSVFormat41.builder();
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setSkipHeaderRecord(false);
        boolean boolean50 = cSVFormat36.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat36.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray59 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withHeader(strArray59);
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat52.withHeader(strArray59);
        cSVFormat6.printRecord(appendable33, (java.lang.Object[]) strArray59);
        cSVFormat4.println(appendable33);
        boolean boolean64 = cSVFormat4.getTrim();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVPrinter31);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str38, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        java.sql.ResultSet resultSet17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter16.printRecords(resultSet17, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        cSVPrinter5.close();
        java.sql.ResultSet resultSet9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator();
        long long10 = cSVParser3.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser3.iterator();
        java.util.List<java.lang.String> strList12 = cSVParser3.getHeaderNames();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser3.getHeaderMap();
        java.lang.String str14 = cSVParser3.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder10.build();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder10.setEscape('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        java.lang.String str8 = cSVParser3.getTrailerComment();
        boolean boolean9 = cSVParser3.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        java.io.File file8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat7.print(file8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withAutoFlush(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat20.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withHeader(resultSetMetaData24);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        boolean boolean16 = cSVFormat7.getAllowMissingColumnNames();
        java.lang.String[] strArray17 = cSVFormat7.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray13 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat6.withHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat6.withAllowMissingColumnNames(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withCommentMarker('a');
        char char8 = cSVFormat7.getDelimiter();
        java.nio.file.Path path9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat7.print(path9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t');
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        java.lang.String str17 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withTrim(true);
        boolean boolean20 = cSVFormat19.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withSkipHeaderRecord();
        java.lang.String str22 = cSVFormat19.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        cSVParser25.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        cSVPrinter5.println();
        java.sql.ResultSet resultSet32 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords(resultSet32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        boolean boolean6 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuote((java.lang.Character) '|');
        boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean15 = cSVFormat14.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray22 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withHeader(strArray22);
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat14.withHeaderComments((java.lang.Object[]) strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat cSVFormat26 = builder25.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        boolean boolean10 = cSVParser3.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        java.lang.String str12 = cSVParser3.getFirstEndOfLine();
        java.lang.String str13 = cSVParser3.getHeaderComment();
        java.util.List<java.lang.String> strList14 = cSVParser3.getHeaderNames();
        cSVParser3.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat26.printer();
        cSVPrinter27.close(true);
        cSVPrinter27.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder35 = cSVFormat33.builder();
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setHeader(resultSetMetaData40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder41.setHeaderComments(strArray43);
        cSVPrinter27.printRecord((java.lang.Object[]) strArray43);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray43);
        cSVPrinter5.printComment("a");
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.Character char51 = cSVFormat50.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.String str65 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withQuote('a');
        java.lang.Object[] objArray68 = new java.lang.Object[] { true, cSVFormat62, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat56.withHeaderComments(objArray68);
        cSVPrinter54.printRecord(objArray68);
        cSVPrinter54.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined74 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat75 = predefined74.getFormat();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat75);
        java.lang.String str77 = cSVParser76.getFirstEndOfLine();
        boolean boolean78 = cSVParser76.hasHeaderComment();
        cSVParser76.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream80 = cSVParser76.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList81 = cSVParser76.getRecords();
        java.lang.String str82 = cSVParser76.getTrailerComment();
        cSVPrinter54.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser76);
        java.lang.String str85 = cSVParser76.getHeaderComment();
        java.lang.String str86 = cSVParser76.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertTrue("'" + predefined74 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined74.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream80);
        org.junit.Assert.assertNotNull(cSVRecordList81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setDelimiter("\t");
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode24 = org.apache.commons.csv.DuplicateHeaderMode.DISALLOW;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setDuplicateHeaderMode(duplicateHeaderMode24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder9.setDuplicateHeaderMode(duplicateHeaderMode24);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder37 = cSVFormat35.builder();
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat47.builder();
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setHeader(resultSetMetaData54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder58 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.String str67 = cSVFormat66.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray76 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat70.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat69.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder64.setHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder51.setHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder43.setHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder31.setHeaderComments(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder9.setHeaderComments(strArray76);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode24 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.DISALLOW + "'", duplicateHeaderMode24.equals(org.apache.commons.csv.DuplicateHeaderMode.DISALLOW));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat9.withIgnoreSurroundingSpaces(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        boolean boolean7 = cSVFormat6.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withDelimiter('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        long long16 = cSVParser10.getRecordNumber();
        java.lang.String str17 = cSVParser10.getHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap19 = cSVParser10.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strMap19);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSet10);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder29.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder21.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder11.setHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.Character char65 = cSVFormat64.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter68 = cSVFormat67.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined69 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat70 = predefined69.getFormat();
        java.lang.String str71 = cSVFormat70.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat70.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined75 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat76 = predefined75.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined77 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat78 = predefined77.getFormat();
        java.lang.String str79 = cSVFormat78.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat78.withQuote('a');
        java.lang.Object[] objArray82 = new java.lang.Object[] { true, cSVFormat76, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat70.withHeaderComments(objArray82);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat83.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat83.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat83.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat89 = cSVFormat88.withFirstRecordAsHeader();
        java.sql.ResultSet resultSet90 = null;
        org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat88.withHeader(resultSet90);
        java.lang.String[] strArray92 = cSVFormat88.getHeaderComments();
        cSVPrinter68.printRecords((java.lang.Object[]) strArray92);
        org.apache.commons.csv.CSVFormat.Builder builder94 = builder62.setHeaderComments((java.lang.Object[]) strArray92);
        org.apache.commons.csv.CSVFormat.Builder builder96 = builder62.setIgnoreEmptyLines(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(char65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVPrinter68);
        org.junit.Assert.assertTrue("'" + predefined69 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined69.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertTrue("'" + predefined75 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined75.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertTrue("'" + predefined77 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined77.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertNotNull(cSVFormat89);
        org.junit.Assert.assertNotNull(cSVFormat91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        java.lang.Object[] objArray35 = new java.lang.Object[] { true, cSVFormat29, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat23.withHeaderComments(objArray35);
        cSVPrinter21.printRecord(objArray35);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat40);
        java.lang.String str42 = cSVParser41.getFirstEndOfLine();
        boolean boolean43 = cSVParser41.hasHeaderComment();
        cSVParser41.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser41.stream();
        long long46 = cSVParser41.getCurrentLineNumber();
        cSVPrinter21.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser41);
        java.lang.String str48 = cSVParser41.getHeaderComment();
        boolean boolean49 = cSVFormat1.equals((java.lang.Object) cSVParser41);
        java.lang.String str50 = cSVParser41.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withCommentMarker('a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        java.lang.Object[] objArray35 = new java.lang.Object[] { true, cSVFormat29, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat23.withHeaderComments(objArray35);
        cSVPrinter21.printRecord(objArray35);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat40);
        java.lang.String str42 = cSVParser41.getFirstEndOfLine();
        boolean boolean43 = cSVParser41.hasHeaderComment();
        cSVParser41.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser41.stream();
        long long46 = cSVParser41.getCurrentLineNumber();
        cSVPrinter21.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser41);
        java.lang.String str48 = cSVParser41.getHeaderComment();
        boolean boolean49 = cSVFormat1.equals((java.lang.Object) cSVParser41);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat1.withIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(cSVFormat50);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined1.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined1.getFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser13.getHeaderMap();
        java.lang.String str18 = cSVParser13.getFirstEndOfLine();
        java.util.List<java.lang.String> strList19 = cSVParser13.getHeaderNames();
        boolean boolean20 = cSVParser13.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream21 = cSVParser13.stream();
        long long22 = cSVParser13.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        java.util.List<java.lang.String> strList24 = cSVParser13.getHeaderNames();
        boolean boolean25 = cSVParser13.isClosed();
        cSVParser13.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder2.build();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        boolean boolean8 = cSVParser3.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser3.iterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser3.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVRecordList10.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
        org.junit.Assert.assertNotNull(cSVRecordList10);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator11);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString("INVALID []");
        java.lang.String str9 = cSVFormat2.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat2.withCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat2.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream31 = cSVParser27.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords();
        java.lang.String str33 = cSVParser27.getTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str36 = cSVFormat35.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setIgnoreHeaderCase(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder42.setHeaderComments(strArray47);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray47);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray57 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withHeader(strArray57);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray57);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream31);
        org.junit.Assert.assertNotNull(cSVRecordList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "," + "'", str36, ",");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(cSVFormat58);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentMarker((java.lang.Character) ',');
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat10.printer();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withIgnoreHeaderCase(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setCommentMarker('\"');
        java.lang.String[] strArray7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setHeaderComments(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat12);
        java.lang.String str14 = cSVParser13.getFirstEndOfLine();
        boolean boolean15 = cSVParser13.hasHeaderComment();
        cSVParser13.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser13.getHeaderMap();
        java.lang.String str18 = cSVParser13.getFirstEndOfLine();
        java.util.List<java.lang.String> strList19 = cSVParser13.getHeaderNames();
        boolean boolean20 = cSVParser13.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream21 = cSVParser13.stream();
        long long22 = cSVParser13.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser13);
        long long24 = cSVParser13.getRecordNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap25 = cSVParser13.getHeaderMap();
        long long26 = cSVParser13.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withNullString("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat9.print(appendable21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat28 = builder25.build();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean31 = cSVFormat30.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray38 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat30.withHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder25.setHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat58.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder53.setHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat44.withHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeaderComments(strArray65);
        cSVFormat7.printRecord(appendable21, (java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat72 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray78 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat72.withHeader(strArray78);
        org.apache.commons.csv.CSVFormat.Builder builder80 = cSVFormat72.builder();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat72.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter83 = new org.apache.commons.csv.CSVPrinter(appendable21, cSVFormat72);
        org.apache.commons.csv.CSVFormat.Predefined predefined85 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat86 = predefined85.getFormat();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat86);
        java.lang.String str88 = cSVParser87.getFirstEndOfLine();
        boolean boolean89 = cSVParser87.hasHeaderComment();
        cSVParser87.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream91 = cSVParser87.stream();
        java.lang.String str92 = cSVParser87.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator93 = cSVParser87.spliterator();
        long long94 = cSVParser87.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor95 = cSVParser87.iterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream96 = cSVParser87.stream();
        cSVPrinter83.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser87);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + predefined85 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined85.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertNotNull(cSVParser87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor95);
        org.junit.Assert.assertNotNull(cSVRecordStream96);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentMarker((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setTrim(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSetMetaData17);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray35 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat29.withHeader(strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder28.setHeader(strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder18.setHeader(strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder6.setHeaderComments((java.lang.Object[]) strArray35);
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder6.setHeader(resultSetMetaData40);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withCommentMarker(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat2.printer();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withTrim(true);
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat6.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        java.lang.String[] strArray17 = cSVFormat14.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withTrim(false);
        java.lang.String str20 = cSVFormat14.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('|');
        boolean boolean11 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreHeaderCase(false);
        java.lang.String str14 = cSVFormat13.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withDelimiter('#');
        java.io.File file9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat6.print(file9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withFirstRecordAsHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        java.lang.String str6 = cSVParser3.getHeaderComment();
        java.lang.String str7 = cSVParser3.getFirstEndOfLine();
        long long8 = cSVParser3.getRecordNumber();
        long long9 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        boolean boolean10 = cSVFormat9.isNullStringSet();
        boolean boolean11 = cSVFormat9.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        cSVPrinter26.printRecord((java.lang.Object[]) strArray33);
        java.lang.Appendable appendable36 = cSVPrinter26.getOut();
        cSVPrinter26.close();
        cSVPrinter26.close(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(appendable36);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.isNullStringSet();
        boolean boolean11 = cSVFormat7.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder10.build();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withTrim(false);
        boolean boolean18 = cSVFormat15.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.close();
        cSVPrinter6.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder14.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode23 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder50 = cSVFormat48.builder();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData55 = null;
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder52.setHeader(resultSetMetaData55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder59 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat70.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder65.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder52.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder44.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat34.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder22.setHeader(strArray77);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat87 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean88 = cSVFormat87.isCommentMarkerSet();
        boolean boolean89 = cSVFormat87.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat87.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVParser cSVParser92 = org.apache.commons.csv.CSVParser.parse("\\N", cSVFormat87);
        cSVPrinter6.print((java.lang.Object) cSVFormat87);
        cSVPrinter6.close();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + quoteMode23 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode23.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(cSVFormat91);
        org.junit.Assert.assertNotNull(cSVParser92);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat10.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDuplicateHeaderMode(duplicateHeaderMode11);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setDelimiter("INVALID []");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        cSVPrinter19.flush();
        java.lang.Appendable appendable21 = cSVPrinter19.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat13.print(appendable21);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat1.print(appendable21);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray30 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withHeader(strArray30);
        boolean boolean32 = cSVFormat31.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet35 = null;
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat31.withHeader(resultSet35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat36.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = new org.apache.commons.csv.CSVPrinter(appendable21, cSVFormat36);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withQuote((java.lang.Character) '\"');
        boolean boolean41 = cSVFormat36.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(appendable21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, cSVFormat8, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withHeaderComments(objArray14);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat2.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser18.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator19);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withSystemRecordSeparator();
        boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withIgnoreHeaderCase(true);
        boolean boolean19 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = builder22.build();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat25.printer();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder30 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat28);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = builder30.build();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean36 = cSVFormat35.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat35.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder30.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat47.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder52 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat50);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder54.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        java.lang.String str61 = cSVFormat60.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray70 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat64.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat63.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder58.setHeaderComments((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat49.withHeaderComments((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder46.setHeaderComments(strArray70);
        cSVPrinter27.printRecords((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat18.withHeaderComments((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat7.withHeaderComments((java.lang.Object[]) strArray70);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuote((java.lang.Character) '|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat0.builder();
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat13);
        java.lang.String str15 = cSVParser14.getFirstEndOfLine();
        boolean boolean16 = cSVParser14.hasHeaderComment();
        cSVParser14.close();
        cSVParser14.close();
        java.lang.String str19 = cSVParser14.getFirstEndOfLine();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser14.getHeaderMap();
        cSVPrinter10.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser14);
        cSVPrinter10.printComment(" ");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strMap20);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withCommentMarker('a');
        boolean boolean8 = cSVFormat7.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder9.setDelimiter("INVALID []");
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder9.setNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> CommentStart=<4> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setDuplicateHeaderMode(duplicateHeaderMode32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: duplicateHeaderMode");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        boolean boolean26 = cSVFormat16.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat37.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat27.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder7.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setSkipHeaderRecord(false);
        java.sql.ResultSetMetaData resultSetMetaData71 = null;
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder68.setHeader(resultSetMetaData71);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator(',');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = builder9.build();
        java.lang.String str11 = cSVFormat10.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setTrim(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withDelimiter('a');
        boolean boolean21 = cSVFormat17.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat17.withEscape('\"');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat17.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder15.setQuoteMode(quoteMode24);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, cSVFormat15, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat9.withHeaderComments(objArray21);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass27 = cSVFormat26.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.Character char39 = cSVFormat38.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode42 = cSVFormat38.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat38.withSkipHeaderRecord(true);
        boolean boolean45 = cSVFormat33.equals((java.lang.Object) cSVFormat44);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat50.printer();
        cSVPrinter51.flush();
        java.lang.Appendable appendable53 = cSVPrinter51.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat44.print(appendable53);
        cSVFormat22.print((java.lang.Object) cSVFormat26, appendable53, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter57 = cSVFormat5.print(appendable53);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat5.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat5.withAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(char39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + quoteMode42 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode42.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(appendable53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertNotNull(cSVPrinter57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        java.lang.Appendable appendable33 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat23.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter34.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        cSVPrinter5.print((java.lang.Object) cSVParser38);
        cSVPrinter5.println();
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withSkipHeaderRecord();
        java.lang.String str11 = cSVFormat10.getDelimiterString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\t" + "'", str11, "\t");
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(quoteMode6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat6.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        boolean boolean12 = cSVFormat7.getIgnoreSurroundingSpaces();
        boolean boolean13 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withSkipHeaderRecord(true);
        java.lang.Character char16 = cSVFormat15.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
        boolean boolean7 = cSVFormat6.getAllowDuplicateHeaderNames();
        boolean boolean8 = cSVFormat6.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat6.builder();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat6.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withHeader(resultSet16);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat17.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat24);
        java.lang.String str26 = cSVParser25.getFirstEndOfLine();
        boolean boolean27 = cSVParser25.hasHeaderComment();
        cSVParser25.close();
        long long29 = cSVParser25.getCurrentLineNumber();
        long long30 = cSVParser25.getCurrentLineNumber();
        boolean boolean31 = cSVParser25.hasTrailerComment();
        cSVPrinter21.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser25);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat1.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuote('a');
        java.lang.Object[] objArray27 = new java.lang.Object[] { true, cSVFormat21, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat15.withHeaderComments(objArray27);
        cSVPrinter13.printRecord(objArray27);
        cSVPrinter13.close(false);
        cSVPrinter13.printComment("hi!");
        cSVPrinter13.println();
        java.lang.Appendable appendable35 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat40.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        java.lang.Object[] objArray55 = new java.lang.Object[] { true, cSVFormat49, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat43.withHeaderComments(objArray55);
        cSVPrinter41.printRecord(objArray55);
        cSVPrinter41.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat62);
        java.lang.String str64 = cSVParser63.getFirstEndOfLine();
        boolean boolean65 = cSVParser63.hasHeaderComment();
        cSVParser63.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream67 = cSVParser63.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList68 = cSVParser63.getRecords();
        java.lang.String str69 = cSVParser63.getTrailerComment();
        cSVPrinter41.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser63);
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str72 = cSVFormat71.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat74.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter77 = cSVFormat74.printer();
        org.apache.commons.csv.CSVFormat.Builder builder78 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder78.setIgnoreHeaderCase(true);
        java.lang.String[] strArray83 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder78.setHeaderComments(strArray83);
        cSVPrinter77.printRecords((java.lang.Object[]) strArray83);
        cSVPrinter41.printRecord((java.lang.Object[]) strArray83);
        cSVFormat1.printRecord(appendable35, (java.lang.Object[]) strArray83);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVParser63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream67);
        org.junit.Assert.assertNotNull(cSVRecordList68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "," + "'", str72, ",");
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(cSVPrinter77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withHeader(resultSet10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withTrim(true);
        boolean boolean14 = cSVFormat8.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat22.printer();
        cSVPrinter23.flush();
        java.lang.Appendable appendable25 = cSVPrinter23.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat16.print(appendable25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withIgnoreHeaderCase();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode28 = cSVFormat27.getDuplicateHeaderMode();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode29 = cSVFormat27.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertNotNull(appendable25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode28 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode28.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode29 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode29.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray14 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withHeader(strArray14);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder7.setHeader(strArray14);
        org.apache.commons.csv.CSVFormat cSVFormat17 = builder7.build();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        boolean boolean6 = cSVFormat5.getTrim();
        boolean boolean7 = cSVFormat5.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setDelimiter('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder11.build();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder11.setRecordSeparator(',');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder11.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray25 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat19.withHeader(strArray25);
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat19.withSkipHeaderRecord(false);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode30 = cSVFormat19.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder18.setDuplicateHeaderMode(duplicateHeaderMode30);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode30 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode30.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape((java.lang.Character) '4');
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat7.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat78.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat79.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat79.withIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat83);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder9.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withSystemRecordSeparator();
        boolean boolean22 = cSVFormat21.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray49 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat43.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat42.withHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder37.setHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat28.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat25.withHeaderComments((java.lang.Object[]) strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder9.setHeader(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder3.setHeaderComments(strArray49);
        org.apache.commons.csv.QuoteMode quoteMode57 = org.apache.commons.csv.QuoteMode.NON_NUMERIC;
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder3.setQuoteMode(quoteMode57);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + quoteMode57 + "' != '" + org.apache.commons.csv.QuoteMode.NON_NUMERIC + "'", quoteMode57.equals(org.apache.commons.csv.QuoteMode.NON_NUMERIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser3.getHeaderMap();
        long long10 = cSVParser3.getRecordNumber();
        boolean boolean11 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        java.lang.String str7 = cSVFormat6.toString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withIgnoreHeaderCase(false);
        boolean boolean11 = cSVFormat6.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str7, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withEscape('a');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withAllowDuplicateHeaderNames();
        java.io.Reader reader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = cSVFormat2.parse(reader11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter5.print((java.lang.Object) predefined13);
        cSVPrinter5.close(true);
        cSVPrinter5.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder22 = cSVFormat20.builder();
        java.lang.String str23 = cSVFormat20.getNullString();
        java.sql.ResultSet resultSet24 = null;
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withHeader(resultSet24);
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat25);
        java.util.List<java.lang.String> strList27 = cSVParser26.getHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser26);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat3.getQuoteMode();
        java.lang.Character char6 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        java.lang.Appendable appendable23 = cSVPrinter22.getOut();
        cSVPrinter22.close();
        cSVPrinter22.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat28);
        java.lang.String str30 = cSVParser29.getFirstEndOfLine();
        boolean boolean31 = cSVParser29.hasHeaderComment();
        cSVParser29.close();
        cSVParser29.close();
        java.lang.String str34 = cSVParser29.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser29.getRecords();
        cSVPrinter22.print((java.lang.Object) cSVRecordList35);
        java.lang.Appendable appendable37 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat16.print(appendable37);
        cSVPrinter38.close();
        cSVPrinter38.flush();
        java.sql.ResultSet resultSet41 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter38.printHeaders(resultSet41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(appendable23);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVRecordList35);
        org.junit.Assert.assertNotNull(appendable37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setDelimiter('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setNullString("\r\n");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder2.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder30 = cSVFormat28.builder();
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder30.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder30.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder30.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.Character char41 = cSVFormat40.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode44 = cSVFormat40.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat45.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder50 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat48);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder52.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.String str59 = cSVFormat58.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat62 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray68 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat62.withHeader(strArray68);
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat61.withHeader(strArray68);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder56.setHeaderComments((java.lang.Object[]) strArray68);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat47.withHeaderComments((java.lang.Object[]) strArray68);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray68);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder38.setHeader(strArray68);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder24.setHeaderComments((java.lang.Object[]) strArray68);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder2.setHeaderComments((java.lang.Object[]) strArray68);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(char41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + quoteMode44 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode44.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withAllowDuplicateHeaderNames();
        boolean boolean8 = cSVFormat7.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withHeader(strArray12);
        java.lang.Character char15 = cSVFormat5.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withHeader(resultSet11);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withSkipHeaderRecord(true);
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withEscape('4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(false);
        boolean boolean7 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withDelimiter('\"');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withRecordSeparator('#');
        java.lang.String[] strArray13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withHeader(strArray13);
        boolean boolean15 = cSVFormat14.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat22 = builder19.build();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean25 = cSVFormat24.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray32 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat26.withHeader(strArray32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat24.withHeaderComments((java.lang.Object[]) strArray32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder19.setHeaderComments((java.lang.Object[]) strArray32);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat14.withHeader(strArray32);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('a');
        java.lang.String[] strArray7 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withSystemRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        cSVParser27.close();
        cSVParser27.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setIgnoreHeaderCase(true);
        java.lang.String[] strArray41 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder36.setHeaderComments(strArray41);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray41);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String[] strArray2 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("a");
        java.lang.String[] strArray5 = cSVFormat4.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker(' ');
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('#');
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser10.getHeaderMap();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        boolean boolean13 = cSVParser10.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        java.lang.String[] strArray7 = cSVFormat6.getHeaderComments();
        boolean boolean8 = cSVFormat6.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuote((java.lang.Character) '\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder2.setDelimiter("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder2.setAllowMissingColumnNames(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat10 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('\"')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase();
        java.lang.Character char8 = cSVFormat4.getCommentMarker();
        java.lang.String str9 = cSVFormat4.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withQuote('a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4, (long) (byte) -1, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "," + "'", str2, ",");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setEscape((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder10.setCommentMarker((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuote((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentMarker('a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setRecordSeparator('a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withHeaderComments((java.lang.Object[]) strArray9);
        boolean boolean12 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setIgnoreEmptyLines(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder4.build();
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat7);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('|');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str8 = cSVFormat7.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode13 = cSVFormat12.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setDuplicateHeaderMode(duplicateHeaderMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder21 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setHeader(resultSetMetaData26);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder30 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat28);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder32.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray48 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat42.withHeader(strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat41.withHeader(strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder36.setHeaderComments((java.lang.Object[]) strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder23.setHeader(strArray48);
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter58 = cSVFormat57.printer();
        cSVPrinter58.close(true);
        cSVPrinter58.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        java.lang.Character char65 = cSVFormat64.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder66 = cSVFormat64.builder();
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder66.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData71 = null;
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder68.setHeader(resultSetMetaData71);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder72.setHeaderComments(strArray74);
        cSVPrinter58.printRecord((java.lang.Object[]) strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder52.setHeaderComments(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder17.setHeader(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder14.setHeaderComments(strArray74);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "," + "'", str8, ",");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode13 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode13.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVPrinter58);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(char65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreSurroundingSpaces(false);
        boolean boolean16 = cSVFormat0.equals((java.lang.Object) cSVFormat15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat0.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAutoFlush(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat20.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withSystemRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        java.lang.String str6 = cSVFormat5.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat2.withQuoteMode(quoteMode11);
        boolean boolean13 = cSVFormat12.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat22.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat19.withHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder3.setHeader(strArray43);
        java.sql.ResultSet resultSet50 = null;
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setHeader(resultSet50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder49.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder49.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder49.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setAutoFlush(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        java.lang.Appendable appendable34 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter33.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        boolean boolean44 = cSVParser38.hasHeaderComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream46 = cSVParser38.stream();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream46);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        boolean boolean3 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withNullString("hi!");
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withHeader(resultSet10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat11.withFirstRecordAsHeader();
        boolean boolean13 = cSVFormat1.equals((java.lang.Object) cSVFormat12);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withTrim();
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(true);
        boolean boolean11 = cSVFormat10.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentMarker((java.lang.Character) ',');
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat10.printer();
        cSVPrinter14.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.String str36 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withQuote('a');
        java.lang.Object[] objArray39 = new java.lang.Object[] { true, cSVFormat33, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat27.withHeaderComments(objArray39);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder25.setHeaderComments(objArray39);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder25.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat49.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder59 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat70.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder65.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat56.withHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat53.withHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder43.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder11.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder11.setTrim(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String[] strArray11 = cSVFormat7.getHeaderComments();
        java.lang.String str12 = cSVFormat7.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\r\n" + "'", str12, "\r\n");
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withAllowDuplicateHeaderNames();
        boolean boolean8 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSystemRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream20 = cSVParser16.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser16.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser16.getRecords();
        cSVPrinter12.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        boolean boolean24 = cSVParser16.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream20);
        org.junit.Assert.assertNotNull(cSVRecordList21);
        org.junit.Assert.assertNotNull(cSVRecordList22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setHeader(resultSetMetaData16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str19 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray38 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat31.withHeader(strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder26.setHeaderComments((java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder13.setHeader(strArray38);
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.Character char45 = cSVFormat44.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter48 = cSVFormat47.printer();
        cSVPrinter48.close(true);
        cSVPrinter48.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder56 = cSVFormat54.builder();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData61 = null;
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder58.setHeader(resultSetMetaData61);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder62.setHeaderComments(strArray64);
        cSVPrinter48.printRecord((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder42.setHeaderComments(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat0.withHeaderComments((java.lang.Object[]) strArray64);
        boolean boolean69 = cSVFormat68.isNullStringSet();
        java.sql.ResultSet resultSet70 = null;
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withHeader(resultSet70);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode72 = cSVFormat71.getDuplicateHeaderMode();
        boolean boolean73 = cSVFormat71.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVPrinter48);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode72 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode72.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(resultSetMetaData11);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        java.lang.String str7 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.isEscapeCharacterSet();
        boolean boolean8 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withSkipHeaderRecord(true);
        boolean boolean12 = cSVFormat6.isNullStringSet();
        java.lang.String str13 = cSVFormat6.getRecordSeparator();
        java.lang.String[] strArray14 = cSVFormat6.getHeader();
        boolean boolean15 = cSVFormat6.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\r\n" + "'", str13, "\r\n");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat0.builder();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat9.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withCommentMarker(' ');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        cSVPrinter7.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str12 = cSVFormat11.getDelimiterString();
        boolean boolean13 = cSVFormat11.isEscapeCharacterSet();
        cSVPrinter7.print((java.lang.Object) boolean13);
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv;
        cSVPrinter7.print((java.lang.Object) predefined15);
        boolean boolean17 = cSVFormat0.equals((java.lang.Object) cSVPrinter7);
        cSVPrinter7.println();
        cSVPrinter7.close(false);
        cSVPrinter7.close();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "," + "'", str12, ",");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray23 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withHeader(strArray23);
        boolean boolean26 = cSVFormat16.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat16.withTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withSystemRecordSeparator();
        boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.String str52 = cSVFormat51.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray61 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat55.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat54.withHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder49.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat37.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat27.withHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder7.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setIgnoreEmptyLines(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        java.lang.String[] strArray82 = cSVFormat7.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNull(strArray82);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat8.getAllowMissingColumnNames();
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withHeader(resultSet10);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat6.withEscape((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat6.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray20 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat13.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder8.setHeaderComments((java.lang.Object[]) strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder23.setCommentMarker('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder17.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder17.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str36 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder39.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray55 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat49.withHeader(strArray55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat48.withHeader(strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder43.setHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat34.withHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat27.withHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder25.setHeader(strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder11.setHeaderComments((java.lang.Object[]) strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder11.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder11.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
        java.nio.file.Path path6 = null;
        java.nio.charset.Charset charset7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat4.print(path6, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.RFC4180 + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.RFC4180));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined0.getFormat();
        boolean boolean3 = cSVFormat2.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setRecordSeparator('\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        boolean boolean6 = cSVParser3.hasTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        java.lang.String str8 = cSVParser3.getTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream9 = cSVParser3.stream();
        boolean boolean10 = cSVParser3.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat19.withFirstRecordAsHeader();
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withHeader(resultSet21);
        java.lang.String[] strArray23 = cSVFormat19.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withRecordSeparator("Delimiter=<|> Escape=<#> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(cSVFormat25);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat8.print(appendable18);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat22);
        java.lang.String str24 = cSVParser23.getFirstEndOfLine();
        boolean boolean25 = cSVParser23.hasHeaderComment();
        cSVParser23.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap27 = cSVParser23.getHeaderMap();
        cSVPrinter19.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser23);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream29 = cSVParser23.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap30 = cSVParser23.getHeaderMap();
        java.lang.String str31 = cSVParser23.getTrailerComment();
        boolean boolean32 = cSVFormat4.equals((java.lang.Object) str31);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(cSVRecordStream29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        java.lang.Object[] objArray15 = new java.lang.Object[] { true, cSVFormat9, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat3.withHeaderComments(objArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat3.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean18 = cSVFormat17.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = new org.apache.commons.csv.CSVPrinter(appendable15, cSVFormat17);
        cSVPrinter19.println();
        cSVPrinter19.printComment("\t");
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat27.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuote('a');
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, cSVFormat36, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat30.withHeaderComments(objArray42);
        cSVPrinter28.printRecord(objArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.Character char47 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder48 = cSVFormat46.builder();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat54.printer();
        java.lang.Appendable appendable56 = cSVPrinter55.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter57 = cSVFormat46.print(appendable56);
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat60);
        java.lang.String str62 = cSVParser61.getFirstEndOfLine();
        boolean boolean63 = cSVParser61.hasHeaderComment();
        cSVParser61.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap65 = cSVParser61.getHeaderMap();
        cSVPrinter57.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser61);
        cSVPrinter28.print((java.lang.Object) cSVParser61);
        java.lang.String str68 = cSVParser61.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap69 = cSVParser61.getHeaderMap();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList70 = cSVParser61.getRecords();
        cSVPrinter19.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser61);
        java.util.List<java.lang.String> strList72 = cSVParser61.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(char47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(appendable56);
        org.junit.Assert.assertNotNull(cSVPrinter57);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVParser61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strMap65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strMap69);
        org.junit.Assert.assertNotNull(cSVRecordList70);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder20.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withSystemRecordSeparator();
        boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray60 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat54.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat53.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder48.setHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat39.withHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat36.withHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder20.setHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat7.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat67.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(cSVFormat70);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withCommentMarker('4');
        java.sql.ResultSet resultSet14 = null;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withHeader(resultSet14);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder19.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setHeader(resultSet26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat29.builder();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder43 = cSVFormat41.builder();
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setHeader(resultSetMetaData48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder52 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat50);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder54.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        java.lang.String str61 = cSVFormat60.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray70 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat64.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat63.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder58.setHeaderComments((java.lang.Object[]) strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder45.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder37.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder27.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat13.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat5.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat78.withTrim(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat80);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat10.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDuplicateHeaderMode(duplicateHeaderMode11);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setNullString("");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setNullString("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setDelimiter("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getIgnoreSurroundingSpaces();
        java.sql.ResultSet resultSet18 = null;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat4.withHeader(resultSet18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setCommentMarker(' ');
        boolean boolean35 = cSVFormat4.equals((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat18.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat21.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        java.lang.Appendable appendable35 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat27.print(appendable35);
        cSVFormat18.println(appendable35);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat18.withDelimiter('#');
        char char40 = cSVFormat18.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + char40 + "' != '" + '\t' + "'", char40 == '\t');
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withHeader(resultSetMetaData9);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getHeaderComment();
        java.lang.String str9 = cSVParser3.getFirstEndOfLine();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser3.stream();
        cSVParser3.close();
        java.lang.String str12 = cSVParser3.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withIgnoreHeaderCase(false);
        boolean boolean20 = cSVFormat17.isQuoteCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.TDF;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.TDF + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.TDF));
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setCommentMarker('\t');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder10.build();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setEscape('\t');
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray20 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withHeader(strArray20);
        boolean boolean22 = cSVFormat21.getTrim();
        java.sql.ResultSet resultSet23 = null;
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withHeader(resultSet23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withTrim(true);
        org.apache.commons.csv.QuoteMode quoteMode28 = cSVFormat27.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder13.setQuoteMode(quoteMode28);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + quoteMode28 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode28.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        boolean boolean13 = cSVFormat12.getTrim();
        boolean boolean14 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat12.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode20 = cSVFormat12.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat12.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder25.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        boolean boolean38 = cSVFormat37.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat37.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat58.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder53.setHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat44.withHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat41.withHeaderComments((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder25.setHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat12.withHeader(strArray65);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat0.withHeader(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode20 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode20.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVFormat73);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        java.lang.Object[] objArray15 = new java.lang.Object[] { true, cSVFormat9, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat3.withHeaderComments(objArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat16.withTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        boolean boolean13 = cSVFormat12.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreHeaderCase(false);
        org.apache.commons.csv.QuoteMode quoteMode16 = cSVFormat15.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + quoteMode16 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode16.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        cSVPrinter5.close();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray15 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat9.withHeader(strArray15);
        boolean boolean17 = cSVFormat16.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder18 = cSVFormat16.builder();
        char char19 = cSVFormat16.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withAutoFlush(false);
        boolean boolean22 = cSVFormat21.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat24.builder();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setDelimiter('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat29.builder();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder35.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.Character char53 = cSVFormat52.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter56 = cSVFormat55.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.String str59 = cSVFormat58.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.String str67 = cSVFormat66.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withQuote('a');
        java.lang.Object[] objArray70 = new java.lang.Object[] { true, cSVFormat64, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat58.withHeaderComments(objArray70);
        cSVPrinter56.printRecord(objArray70);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder46.setHeaderComments(objArray70);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder43.setHeaderComments(objArray70);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder25.setHeaderComments(objArray70);
        cSVPrinter5.printRecords(objArray70);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ',');
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(char53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVPrinter56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        boolean boolean6 = cSVFormat5.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSkipHeaderRecord(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        java.lang.String str6 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean16 = cSVFormat15.isCommentMarkerSet();
        boolean boolean17 = cSVFormat15.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat15.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray39 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat33.withHeader(strArray39);
        boolean boolean41 = cSVFormat40.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder42 = cSVFormat40.builder();
        char char43 = cSVFormat40.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat40.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode46 = cSVFormat40.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder30.setQuoteMode(quoteMode46);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withQuoteMode(quoteMode46);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat14.withQuoteMode(quoteMode46);
        java.lang.String str50 = cSVFormat14.getNullString();
        boolean boolean51 = cSVFormat8.equals((java.lang.Object) str50);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\t" + "'", str6, "\t");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + char43 + "' != '" + ',' + "'", char43 == ',');
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + quoteMode46 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode46.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.close();
        cSVPrinter6.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder14.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode23 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder50 = cSVFormat48.builder();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData55 = null;
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder52.setHeader(resultSetMetaData55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder59 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat70.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder65.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder52.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder44.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat34.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder22.setHeader(strArray77);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray77);
        cSVPrinter6.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + quoteMode23 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode23.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat10.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDuplicateHeaderMode(duplicateHeaderMode11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator('4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setDelimiter("hi!");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder2.setDelimiter("\\N");
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder2.setHeader(resultSetMetaData13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setRecordSeparator(",");
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder8.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.InformixUnload;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat3.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withAllowDuplicateHeaderNames();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.InformixUnload + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.InformixUnload));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        java.lang.String str10 = cSVParser3.getTrailerComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser3.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator11);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat12.withQuote('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat18);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.sql.ResultSetMetaData resultSetMetaData4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSetMetaData4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat8.getAllowMissingColumnNames();
        boolean boolean10 = cSVFormat8.getIgnoreSurroundingSpaces();
        boolean boolean11 = cSVFormat8.getAllowMissingColumnNames();
        java.lang.String str12 = cSVFormat8.getRecordSeparator();
        boolean boolean13 = cSVFormat8.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withEscape('|');
        boolean boolean16 = cSVFormat15.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\r\n" + "'", str12, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat9.withIgnoreSurroundingSpaces(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withRecordSeparator('|');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser3.stream();
        boolean boolean8 = cSVParser3.hasTrailerComment();
        boolean boolean9 = cSVParser3.isClosed();
        boolean boolean10 = cSVParser3.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        long long12 = cSVParser3.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setIgnoreEmptyLines(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray14 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withHeader(strArray14);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder7.setHeader(strArray14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder7.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder7.setDelimiter("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray27 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withHeader(strArray27);
        org.apache.commons.csv.CSVFormat.Builder builder29 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder32 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat35 = builder32.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder39 = cSVFormat37.builder();
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData44 = null;
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder41.setHeader(resultSetMetaData44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str47 = cSVFormat46.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder48 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat46);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.String str57 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray66 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat60.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat59.withHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder54.setHeaderComments((java.lang.Object[]) strArray66);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder41.setHeader(strArray66);
        org.apache.commons.csv.CSVFormat.Predefined predefined71 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat72 = predefined71.getFormat();
        java.lang.Character char73 = cSVFormat72.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat72.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter76 = cSVFormat75.printer();
        cSVPrinter76.close(true);
        cSVPrinter76.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined81 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat82 = predefined81.getFormat();
        java.lang.Character char83 = cSVFormat82.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder84 = cSVFormat82.builder();
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder84.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder86.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData89 = null;
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder86.setHeader(resultSetMetaData89);
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder93 = builder90.setHeaderComments(strArray92);
        cSVPrinter76.printRecord((java.lang.Object[]) strArray92);
        org.apache.commons.csv.CSVFormat.Builder builder95 = builder70.setHeaderComments(strArray92);
        org.apache.commons.csv.CSVFormat cSVFormat96 = cSVFormat35.withHeader(strArray92);
        org.apache.commons.csv.CSVFormat.Builder builder97 = builder29.setHeader(strArray92);
        org.apache.commons.csv.CSVFormat.Builder builder98 = builder7.setHeaderComments((java.lang.Object[]) strArray92);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + predefined71 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined71.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNull(char73);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVPrinter76);
        org.junit.Assert.assertTrue("'" + predefined81 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined81.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNull(char83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(cSVFormat96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentMarker('|');
        boolean boolean12 = cSVFormat9.getSkipHeaderRecord();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        boolean boolean10 = cSVParser3.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        java.lang.String str12 = cSVParser3.getFirstEndOfLine();
        java.lang.String str13 = cSVParser3.getHeaderComment();
        java.util.List<java.lang.String> strList14 = cSVParser3.getHeaderNames();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream15 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(cSVRecordStream15);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
        boolean boolean8 = cSVFormat7.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuote(',');
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray21 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withHeader(strArray21);
        boolean boolean23 = cSVFormat22.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        char char25 = cSVFormat22.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat22.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode28 = cSVFormat22.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder14.setQuoteMode(quoteMode28);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + ',' + "'", char25 == ',');
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + quoteMode28 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode28.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreSurroundingSpaces(false);
        boolean boolean16 = cSVFormat0.equals((java.lang.Object) cSVFormat15);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat0.withIgnoreEmptyLines(false);
        java.lang.String str19 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "," + "'", str19, ",");
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean18 = cSVFormat17.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = new org.apache.commons.csv.CSVPrinter(appendable15, cSVFormat17);
        cSVPrinter19.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.Character char23 = cSVFormat22.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat22.builder();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat30.printer();
        java.lang.Appendable appendable32 = cSVPrinter31.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat22.print(appendable32);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat36);
        java.lang.String str38 = cSVParser37.getFirstEndOfLine();
        boolean boolean39 = cSVParser37.hasHeaderComment();
        cSVParser37.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap41 = cSVParser37.getHeaderMap();
        cSVPrinter33.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser37);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream43 = cSVParser37.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap44 = cSVParser37.getHeaderMap();
        java.lang.String str45 = cSVParser37.getTrailerComment();
        boolean boolean46 = cSVParser37.isClosed();
        cSVPrinter19.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser37);
        java.util.Map<java.lang.String, java.lang.Integer> strMap48 = cSVParser37.getHeaderMap();
        cSVParser37.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(char23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVPrinter31);
        org.junit.Assert.assertNotNull(appendable32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVParser37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strMap41);
        org.junit.Assert.assertNotNull(cSVRecordStream43);
        org.junit.Assert.assertNull(strMap44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(strMap48);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.getNullString();
        java.lang.String str4 = cSVFormat2.toString();
        boolean boolean5 = cSVFormat2.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setSkipHeaderRecord(false);
        boolean boolean16 = cSVFormat2.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet17 = null;
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat2.withHeader(resultSet17);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat18);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withEscape((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withEscape((java.lang.Character) ' ');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasTrailerComment();
        cSVParser3.close();
        long long7 = cSVParser3.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator();
        boolean boolean9 = cSVParser3.hasTrailerComment();
        long long10 = cSVParser3.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder3.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder3.setEscape(',');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder3.setNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withTrim();
        boolean boolean8 = cSVFormat1.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withSystemRecordSeparator();
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(false);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withHeader(resultSet7);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setHeader(resultSetMetaData9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder2.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getHeaderComment();
        java.lang.String str9 = cSVParser3.getFirstEndOfLine();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser3.stream();
        cSVParser3.close();
        java.lang.String str12 = cSVParser3.getTrailerComment();
        boolean boolean13 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat5.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode20 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withQuoteMode(quoteMode20);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder10.setQuoteMode(quoteMode20);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        java.lang.String str9 = cSVFormat8.getRecordSeparator();
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withHeader(resultSet10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat7.printer();
        cSVPrinter9.flush();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVPrinter9);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreHeaderCase(true);
        boolean boolean11 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat10.printer();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setSkipHeaderRecord(true);
        java.sql.ResultSet resultSet14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setHeader(resultSet14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('4');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withFirstRecordAsHeader();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        cSVPrinter5.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.print((java.lang.Object) cSVRecordList18);
        cSVPrinter5.flush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str21 = cSVFormat20.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withCommentMarker('4');
        java.lang.String str24 = cSVFormat23.getNullString();
        java.sql.ResultSet resultSet25 = null;
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withHeader(resultSet25);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withTrim(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withSystemRecordSeparator();
        boolean boolean37 = cSVFormat36.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder48.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.String str55 = cSVFormat54.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray64 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat58.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat57.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder52.setHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat43.withHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat40.withHeaderComments((java.lang.Object[]) strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat30.withHeader(strArray64);
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat19.withHeader(strArray64);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
        java.lang.String[] strArray7 = cSVFormat6.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAllowDuplicateHeaderNames();
        char char9 = cSVFormat6.getDelimiter();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat6.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ',');
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat18.builder();
        char char21 = cSVFormat18.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat18.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder10.setQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setQuote('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + ',' + "'", char21 == ',');
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        boolean boolean8 = cSVFormat6.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet2 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat3.printer();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3);
        boolean boolean7 = cSVFormat3.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder3.build();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape((java.lang.Character) '#');
        java.lang.String str13 = cSVFormat6.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat27.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder22.setHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder39.setQuote((java.lang.Character) '4');
        boolean boolean44 = cSVFormat6.equals((java.lang.Object) '4');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str10 = cSVFormat9.getDelimiterString();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        cSVPrinter5.print((java.lang.Object) boolean11);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        java.lang.String str16 = cSVFormat14.toString();
        boolean boolean17 = cSVFormat14.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder21 = cSVFormat19.builder();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setSkipHeaderRecord(false);
        boolean boolean28 = cSVFormat14.equals((java.lang.Object) false);
        java.lang.String[] strArray29 = cSVFormat14.getHeaderComments();
        cSVPrinter5.print((java.lang.Object) cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder37.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.Character char46 = cSVFormat45.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter49 = cSVFormat48.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat52);
        java.lang.String str54 = cSVParser53.getFirstEndOfLine();
        boolean boolean55 = cSVParser53.hasHeaderComment();
        cSVParser53.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream57 = cSVParser53.stream();
        cSVParser53.close();
        cSVPrinter49.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser53);
        org.apache.commons.csv.CSVFormat.Builder builder60 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setIgnoreHeaderCase(true);
        java.lang.String[] strArray65 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder60.setHeaderComments(strArray65);
        cSVPrinter49.printRecords((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder43.setHeaderComments((java.lang.Object[]) strArray65);
        cSVPrinter5.printRecords((java.lang.Object[]) strArray65);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "," + "'", str10, ",");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str16, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(char46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVPrinter49);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean1 = cSVFormat0.getTrailingDelimiter();
        boolean boolean2 = cSVFormat0.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat30);
        java.lang.String str32 = cSVParser31.getFirstEndOfLine();
        boolean boolean33 = cSVParser31.hasHeaderComment();
        cSVParser31.close();
        long long35 = cSVParser31.getCurrentLineNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser31);
        boolean boolean37 = cSVParser31.hasTrailerComment();
        java.lang.String str38 = cSVParser31.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        java.sql.ResultSetMetaData resultSetMetaData26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setHeader(resultSetMetaData26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setCommentMarker((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        boolean boolean4 = cSVFormat0.isCommentMarkerSet();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat18.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuote('a');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat3 = builder0.build();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withEscape(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat8);
        java.sql.ResultSet resultSet10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withHeader(resultSet10);
        boolean boolean12 = cSVFormat8.getTrailingDelimiter();
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat8.withHeader(resultSetMetaData13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withHeader(resultSet16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat17.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat23.printer();
        cSVPrinter24.flush();
        java.lang.Appendable appendable26 = cSVPrinter24.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat18.print(appendable26);
        cSVFormat5.print((java.lang.Object) cSVFormat14, appendable26, true);
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat5.withQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(appendable26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertNotNull(cSVFormat31);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setIgnoreHeaderCase(true);
        java.lang.String[] strArray10 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder5.setHeaderComments(strArray10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder5.setAllowMissingColumnNames(false);
        java.sql.ResultSetMetaData resultSetMetaData14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder5.setHeader(resultSetMetaData14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str17 = cSVFormat16.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode22 = cSVFormat21.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder5.setDuplicateHeaderMode(duplicateHeaderMode22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder2.setDuplicateHeaderMode(duplicateHeaderMode22);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "," + "'", str17, ",");
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode22 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode22.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        char char4 = cSVFormat3.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withAllowDuplicateHeaderNames(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuote('a');
        java.lang.Object[] objArray13 = new java.lang.Object[] { true, cSVFormat7, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withHeaderComments(objArray13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces();
        boolean boolean18 = cSVFormat14.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray20 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat13.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder8.setHeaderComments((java.lang.Object[]) strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setNullString("\r\n");
        org.apache.commons.csv.CSVFormat cSVFormat28 = builder27.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        long long10 = cSVParser3.getCurrentLineNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser3.getHeaderMap();
        boolean boolean12 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat7.printer();
        cSVPrinter9.close(false);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVPrinter9);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        cSVPrinter7.flush();
        java.lang.Appendable appendable9 = cSVPrinter7.getOut();
        cSVFormat1.println(appendable9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray17 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17);
        boolean boolean19 = cSVFormat18.getTrim();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        java.lang.Object[] objArray37 = new java.lang.Object[] { true, cSVFormat31, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat25.withHeaderComments(objArray37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass43 = cSVFormat42.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withSystemRecordSeparator();
        boolean boolean50 = cSVFormat49.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode58 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withSkipHeaderRecord(true);
        boolean boolean61 = cSVFormat49.equals((java.lang.Object) cSVFormat60);
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter67 = cSVFormat66.printer();
        cSVPrinter67.flush();
        java.lang.Appendable appendable69 = cSVPrinter67.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat60.print(appendable69);
        cSVFormat38.print((java.lang.Object) cSVFormat42, appendable69, true);
        cSVFormat18.println(appendable69);
        org.apache.commons.csv.CSVPrinter cSVPrinter74 = cSVFormat1.print(appendable69);
        char char75 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat1.printer();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(appendable9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + quoteMode58 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode58.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVPrinter67);
        org.junit.Assert.assertNotNull(appendable69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(cSVPrinter74);
        org.junit.Assert.assertTrue("'" + char75 + "' != '" + '\t' + "'", char75 == '\t');
        org.junit.Assert.assertNotNull(cSVParser76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray11 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(strArray11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat4.withHeader(strArray11);
        boolean boolean14 = cSVFormat4.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat4.withTrim();
        java.lang.String[] strArray16 = cSVFormat4.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withEscape('a');
        org.apache.commons.csv.QuoteMode quoteMode10 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.String str14 = cSVFormat13.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode17 = cSVFormat16.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withAllowMissingColumnNames();
        boolean boolean21 = cSVFormat20.getAllowDuplicateHeaderNames();
        boolean boolean22 = cSVFormat20.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str28 = cSVFormat27.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        cSVPrinter39.flush();
        cSVPrinter39.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str44 = cSVFormat43.getDelimiterString();
        boolean boolean45 = cSVFormat43.isEscapeCharacterSet();
        cSVPrinter39.print((java.lang.Object) boolean45);
        cSVPrinter39.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.Character char50 = cSVFormat49.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter53 = cSVFormat52.printer();
        cSVPrinter53.close(true);
        cSVPrinter53.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        java.lang.Character char59 = cSVFormat58.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder60 = cSVFormat58.builder();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray71 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat65.withHeader(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder64.setHeader(strArray71);
        cSVPrinter53.printRecords((java.lang.Object[]) strArray71);
        cSVPrinter39.printRecords((java.lang.Object[]) strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder33.setHeaderComments(strArray71);
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat26.withHeader(strArray71);
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat9.withHeader(strArray71);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode17 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode17.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "," + "'", str44, ",");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(char50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVPrinter53);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNull(char59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(cSVFormat78);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.lang.Character char5 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat1.getQuoteMode();
        boolean boolean7 = cSVFormat1.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withHeaderComments((java.lang.Object[]) strArray9);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withCommentMarker('4');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.close();
        cSVPrinter6.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder14.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode23 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder50 = cSVFormat48.builder();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData55 = null;
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder52.setHeader(resultSetMetaData55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder59 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat70.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder65.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder52.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder44.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat34.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder22.setHeader(strArray77);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray77);
        cSVPrinter6.println();
        java.sql.ResultSet resultSet87 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printHeaders(resultSet87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + quoteMode23 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode23.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat12.withAllowDuplicateHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat11.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, cSVFormat20, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withHeaderComments(objArray26);
        cSVPrinter12.printRecord(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder2.setHeaderComments(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setEscape('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = builder29.build();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder29.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet35 = null;
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setHeader(resultSet35);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat26);
        java.lang.String str28 = cSVParser27.getFirstEndOfLine();
        boolean boolean29 = cSVParser27.hasHeaderComment();
        cSVParser27.close();
        cSVParser27.close();
        cSVParser27.close();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser27);
        cSVPrinter5.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.Character char9 = cSVFormat8.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat11.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, cSVFormat20, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withHeaderComments(objArray26);
        cSVPrinter12.printRecord(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder2.setHeaderComments(objArray26);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuote(',');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withSystemRecordSeparator();
        boolean boolean38 = cSVFormat37.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        java.lang.Character char43 = cSVFormat42.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode46 = cSVFormat42.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withSkipHeaderRecord(true);
        boolean boolean49 = cSVFormat37.equals((java.lang.Object) cSVFormat48);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        java.lang.Character char52 = cSVFormat51.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat54.printer();
        cSVPrinter55.flush();
        java.lang.Appendable appendable57 = cSVPrinter55.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter58 = cSVFormat48.print(appendable57);
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray65 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat59.withHeader(strArray65);
        cSVPrinter58.printRecord((java.lang.Object[]) strArray65);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder29.setHeaderComments((java.lang.Object[]) strArray65);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(char43);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + quoteMode46 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode46.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(appendable57);
        org.junit.Assert.assertNotNull(cSVPrinter58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
        cSVPrinter1.print((java.lang.Object) cSVFormat10);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat10.getDuplicateHeaderMode();
        boolean boolean13 = cSVFormat10.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withDelimiter('a');
        java.io.File file6 = null;
        java.nio.charset.Charset charset7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat0.print(file6, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder20.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withSystemRecordSeparator();
        boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str41 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder44.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray60 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat54.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat53.withHeader(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder48.setHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat39.withHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat36.withHeaderComments((java.lang.Object[]) strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder20.setHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat7.withHeader(strArray60);
        java.sql.ResultSet resultSet68 = null;
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat7.withHeader(resultSet68);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNotNull(cSVFormat69);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote(',');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAllowMissingColumnNames(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrim(false);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withQuoteMode(quoteMode10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withEscape(' ');
        boolean boolean8 = cSVFormat7.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat7.printer();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        cSVPrinter15.flush();
        java.lang.Appendable appendable17 = cSVPrinter15.getOut();
        cSVFormat9.println(appendable17);
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat3.print(appendable17);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str21 = cSVFormat20.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withTrailingDelimiter(false);
        boolean boolean24 = cSVFormat20.getSkipHeaderRecord();
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = new org.apache.commons.csv.CSVPrinter(appendable17, cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable17);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "," + "'", str21, ",");
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setSkipHeaderRecord(true);
        java.sql.ResultSet resultSet14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setHeader(resultSet14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setNullString("\n");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('|');
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withEscape((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser3.getHeaderMap();
        boolean boolean10 = cSVParser3.hasHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser3.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator12);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        cSVPrinter5.close(false);
        cSVPrinter5.printComment("hi!");
        cSVPrinter5.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter5.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat31);
        java.lang.String str33 = cSVParser32.getFirstEndOfLine();
        boolean boolean34 = cSVParser32.hasHeaderComment();
        cSVParser32.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream36 = cSVParser32.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser32.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser32.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream39 = cSVParser32.stream();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser32);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream36);
        org.junit.Assert.assertNotNull(cSVRecordList37);
        org.junit.Assert.assertNotNull(cSVRecordList38);
        org.junit.Assert.assertNotNull(cSVRecordStream39);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("\n");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        cSVPrinter5.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        java.lang.Class<?> wildcardClass14 = cSVFormat10.getClass();
        cSVPrinter5.print((java.lang.Object) wildcardClass14);
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat18);
        java.lang.String str20 = cSVParser19.getFirstEndOfLine();
        boolean boolean21 = cSVParser19.hasHeaderComment();
        java.lang.String str22 = cSVParser19.getTrailerComment();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser19);
            org.junit.Assert.fail("Expected exception of type java.lang.BootstrapMethodError; message: java.lang.NoClassDefFoundError: org/apache/commons/io/function/IOSupplier");
        } catch (java.lang.BootstrapMethodError e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat9.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withSystemRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(true);
        boolean boolean10 = cSVFormat9.getAutoFlush();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat9.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setEscape((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSetMetaData5);
        java.lang.Character char7 = cSVFormat1.getCommentMarker();
        java.lang.String str8 = cSVFormat1.toString();
        boolean boolean9 = cSVFormat1.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withSystemRecordSeparator();
        boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withIgnoreHeaderCase(true);
        boolean boolean21 = cSVFormat20.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat27 = builder24.build();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = cSVFormat27.printer();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder32 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat35 = builder32.build();
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean38 = cSVFormat37.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray45 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat39.withHeader(strArray45);
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat37.withHeaderComments((java.lang.Object[]) strArray45);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder32.setHeaderComments((java.lang.Object[]) strArray45);
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat52 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str53 = cSVFormat52.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder54 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat52);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder56.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.String str63 = cSVFormat62.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat66 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray72 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat66.withHeader(strArray72);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat65.withHeader(strArray72);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder60.setHeaderComments((java.lang.Object[]) strArray72);
        org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat51.withHeaderComments((java.lang.Object[]) strArray72);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder48.setHeaderComments(strArray72);
        cSVPrinter29.printRecords((java.lang.Object[]) strArray72);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray72);
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat1.withHeaderComments((java.lang.Object[]) strArray72);
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat80.withSystemRecordSeparator();
        boolean boolean82 = cSVFormat81.getAllowDuplicateHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str8, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVPrinter29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setDelimiter('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat6.isEscapeCharacterSet();
        boolean boolean8 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrim();
        java.lang.String str10 = cSVFormat6.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder11 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator('\\');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setDelimiter('\\');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\r\n" + "'", str10, "\r\n");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        java.lang.String[] strArray16 = cSVFormat7.getHeaderComments();
        boolean boolean17 = cSVFormat7.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        char char10 = cSVFormat7.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withAutoFlush(false);
        boolean boolean13 = cSVFormat12.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat15.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ',');
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        char char6 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withNullString(",");
        java.lang.String[] strArray9 = cSVFormat2.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setIgnoreHeaderCase(true);
        java.lang.String[] strArray16 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder11.setHeaderComments(strArray16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder23 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder23.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setTrim(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder43 = cSVFormat41.builder();
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder43.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.Character char54 = cSVFormat53.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder55 = cSVFormat53.builder();
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder57.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData60 = null;
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder57.setHeader(resultSetMetaData60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str63 = cSVFormat62.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder64 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat62);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder64.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder66.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder66.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined71 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat72 = predefined71.getFormat();
        java.lang.String str73 = cSVFormat72.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat72.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat76 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray82 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat76.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat75.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.Builder builder85 = builder70.setHeaderComments((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder57.setHeader(strArray82);
        org.apache.commons.csv.CSVFormat.Builder builder87 = builder49.setHeader(strArray82);
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder35.setHeader(strArray82);
        org.apache.commons.csv.CSVFormat.Builder builder89 = builder19.setHeaderComments(strArray82);
        org.apache.commons.csv.CSVFormat.Builder builder90 = builder10.setHeaderComments(strArray82);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t');
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + predefined71 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined71.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str8 = cSVFormat7.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode13 = cSVFormat12.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setDuplicateHeaderMode(duplicateHeaderMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setNullString("\n");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "," + "'", str8, ",");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode13 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode13.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setCommentMarker('\t');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder10.build();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setEscape('\t');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat14 = builder13.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start and the escape character cannot be the same ('?')");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat7.printer();
        java.sql.ResultSet resultSet13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter12.printRecords(resultSet13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('|');
        java.lang.String str4 = cSVFormat3.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat18.printer();
        cSVPrinter21.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str3 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        java.lang.String[] strArray5 = cSVFormat2.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withDelimiter('a');
        boolean boolean8 = cSVFormat2.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat11.withTrailingDelimiter();
        boolean boolean32 = cSVFormat11.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withRecordSeparator("\n");
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat7.withIgnoreEmptyLines();
        boolean boolean18 = cSVFormat7.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        cSVPrinter15.flush();
        java.lang.Appendable appendable17 = cSVPrinter15.getOut();
        cSVFormat9.println(appendable17);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray25 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat19.withHeader(strArray25);
        boolean boolean27 = cSVFormat26.getTrim();
        boolean boolean28 = cSVFormat26.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat26.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.String str42 = cSVFormat41.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withQuote('a');
        java.lang.Object[] objArray45 = new java.lang.Object[] { true, cSVFormat39, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat33.withHeaderComments(objArray45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass51 = cSVFormat50.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        java.lang.String str54 = cSVFormat53.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withSystemRecordSeparator();
        boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        java.lang.Character char63 = cSVFormat62.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode66 = cSVFormat62.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat62.withSkipHeaderRecord(true);
        boolean boolean69 = cSVFormat57.equals((java.lang.Object) cSVFormat68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        java.lang.Character char72 = cSVFormat71.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat71.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        cSVPrinter75.flush();
        java.lang.Appendable appendable77 = cSVPrinter75.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat68.print(appendable77);
        cSVFormat46.print((java.lang.Object) cSVFormat50, appendable77, true);
        cSVFormat26.println(appendable77);
        org.apache.commons.csv.CSVPrinter cSVPrinter82 = cSVFormat9.print(appendable77);
        char char83 = cSVFormat9.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser84 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9);
        java.util.Map<java.lang.String, java.lang.Integer> strMap85 = cSVParser84.getHeaderMap();
        cSVParser84.close();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor87 = cSVParser84.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor88 = cSVParser84.iterator();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser84);
        cSVPrinter5.println();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + quoteMode66 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode66.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertNotNull(appendable77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVPrinter82);
        org.junit.Assert.assertTrue("'" + char83 + "' != '" + '\t' + "'", char83 == '\t');
        org.junit.Assert.assertNotNull(cSVParser84);
        org.junit.Assert.assertNull(strMap85);
        org.junit.Assert.assertNotNull(cSVRecordItor87);
        org.junit.Assert.assertNotNull(cSVRecordItor88);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setDelimiter('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '|');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withTrailingDelimiter();
        java.nio.file.Path path23 = null;
        java.nio.charset.Charset charset24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat22.print(path23, charset24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder5.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuote('\t');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setIgnoreEmptyLines(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        boolean boolean6 = cSVFormat5.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder12.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode21 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setQuoteMode(quoteMode21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat5.withQuoteMode(quoteMode21);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + quoteMode21 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode21.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowMissingColumnNames();
        cSVPrinter5.print((java.lang.Object) cSVFormat21);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat21.withSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat27);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode2 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode2 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode2.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = org.apache.commons.csv.QuoteMode.NONE;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder7.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = builder15.build();
        java.lang.String str17 = cSVFormat16.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.NONE + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a" + "'", str17, "a");
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape('a');
        java.lang.Character char8 = cSVFormat5.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        java.lang.Character char24 = cSVFormat23.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat23.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.Character char29 = cSVFormat28.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        java.lang.Appendable appendable33 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat23.print(appendable33);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat37);
        java.lang.String str39 = cSVParser38.getFirstEndOfLine();
        boolean boolean40 = cSVParser38.hasHeaderComment();
        cSVParser38.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser38.getHeaderMap();
        cSVPrinter34.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser38);
        cSVPrinter5.print((java.lang.Object) cSVParser38);
        java.lang.String str45 = cSVParser38.getTrailerComment();
        java.lang.String str46 = cSVParser38.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator47 = cSVParser38.spliterator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(appendable33);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strMap42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator47);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder11.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withQuote((java.lang.Character) '|');
        org.apache.commons.csv.QuoteMode quoteMode24 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder11.setQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder11.setQuote('|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + quoteMode24 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode24.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setSkipHeaderRecord(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        java.lang.Appendable appendable11 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat1.print(appendable11);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser16.getHeaderMap();
        cSVPrinter12.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream22 = cSVParser16.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser16.getHeaderMap();
        boolean boolean24 = cSVParser16.hasTrailerComment();
        boolean boolean25 = cSVParser16.isClosed();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(cSVRecordStream22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String[] strArray4 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withTrim(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat9.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuote('a');
        boolean boolean16 = cSVFormat9.equals((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setIgnoreHeaderCase(true);
        java.lang.String[] strArray5 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeaderComments(strArray5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setTrailingDelimiter(true);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat1.getDuplicateHeaderMode();
        boolean boolean7 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withIgnoreSurroundingSpaces();
        boolean boolean9 = cSVFormat8.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8);
        boolean boolean10 = cSVFormat8.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withDelimiter('a');
        boolean boolean16 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat12.withAutoFlush(false);
        boolean boolean19 = cSVFormat18.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withSystemRecordSeparator();
        boolean boolean27 = cSVFormat26.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.Character char32 = cSVFormat31.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode35 = cSVFormat31.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat31.withSkipHeaderRecord(true);
        boolean boolean38 = cSVFormat26.equals((java.lang.Object) cSVFormat37);
        org.apache.commons.csv.CSVFormat.Predefined predefined39 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat40 = predefined39.getFormat();
        java.lang.Character char41 = cSVFormat40.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter44 = cSVFormat43.printer();
        cSVPrinter44.flush();
        java.lang.Appendable appendable46 = cSVPrinter44.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter47 = cSVFormat37.print(appendable46);
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        cSVPrinter47.printRecord((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat20.withHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat8.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat8.withIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + quoteMode35 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode35.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + predefined39 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined39.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(char41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVPrinter44);
        org.junit.Assert.assertNotNull(appendable46);
        org.junit.Assert.assertNotNull(cSVPrinter47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat60);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator('\"');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str26 = cSVFormat25.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.Character char34 = cSVFormat33.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        cSVPrinter37.flush();
        cSVPrinter37.close(false);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str42 = cSVFormat41.getDelimiterString();
        boolean boolean43 = cSVFormat41.isEscapeCharacterSet();
        cSVPrinter37.print((java.lang.Object) boolean43);
        cSVPrinter37.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.Character char48 = cSVFormat47.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat50.printer();
        cSVPrinter51.close(true);
        cSVPrinter51.println();
        org.apache.commons.csv.CSVFormat.Predefined predefined55 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat56 = predefined55.getFormat();
        java.lang.Character char57 = cSVFormat56.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder58 = cSVFormat56.builder();
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder58.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray69 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat63.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder62.setHeader(strArray69);
        cSVPrinter51.printRecords((java.lang.Object[]) strArray69);
        cSVPrinter37.printRecords((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder31.setHeaderComments(strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder24.setHeaderComments((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder13.setHeader(strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder13.setIgnoreEmptyLines(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "," + "'", str42, ",");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertTrue("'" + predefined55 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined55.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(char57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        java.lang.String str6 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat12 = builder9.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.Character char15 = cSVFormat14.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat14.builder();
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSetMetaData21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str24 = cSVFormat23.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray43 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat36.withHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder31.setHeaderComments((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder18.setHeader(strArray43);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.Character char50 = cSVFormat49.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter53 = cSVFormat52.printer();
        cSVPrinter53.close(true);
        cSVPrinter53.printComment("\r\n");
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.Character char60 = cSVFormat59.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder61 = cSVFormat59.builder();
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData66 = null;
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder63.setHeader(resultSetMetaData66);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder67.setHeaderComments(strArray69);
        cSVPrinter53.printRecord((java.lang.Object[]) strArray69);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder47.setHeaderComments(strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat12.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat1.withHeader(strArray69);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat74.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\t" + "'", str6, "\t");
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(char50);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVPrinter53);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(char60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        cSVPrinter5.close();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10);
        java.lang.String str12 = cSVParser11.getFirstEndOfLine();
        boolean boolean13 = cSVParser11.hasHeaderComment();
        cSVParser11.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream15 = cSVParser11.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser11.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser11.getRecords();
        java.lang.String str18 = cSVParser11.getTrailerComment();
        java.util.List<java.lang.String> strList19 = cSVParser11.getHeaderNames();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser11);
        cSVParser11.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream15);
        org.junit.Assert.assertNotNull(cSVRecordList16);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        boolean boolean6 = cSVFormat5.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat10.builder();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat27.printer();
        cSVPrinter28.flush();
        java.lang.Appendable appendable30 = cSVPrinter28.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat22.print(appendable30);
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat10.print(appendable30);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat8.print(appendable30);
        org.apache.commons.csv.CSVFormat.Predefined predefined34 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat35 = predefined34.getFormat();
        java.lang.Character char36 = cSVFormat35.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat38.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat42);
        java.lang.String str44 = cSVParser43.getFirstEndOfLine();
        boolean boolean45 = cSVParser43.hasHeaderComment();
        cSVParser43.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream47 = cSVParser43.stream();
        cSVParser43.close();
        cSVPrinter39.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser43);
        java.lang.String str50 = cSVParser43.getFirstEndOfLine();
        cSVPrinter33.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser43);
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat54 = predefined53.getFormat();
        java.lang.Character char55 = cSVFormat54.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder56 = cSVFormat54.builder();
        java.lang.String str57 = cSVFormat54.getNullString();
        java.sql.ResultSet resultSet58 = null;
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat54.withHeader(resultSet58);
        org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse("", cSVFormat59);
        java.util.Map<java.lang.String, java.lang.Integer> strMap61 = cSVParser60.getHeaderMap();
        long long62 = cSVParser60.getRecordNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator63 = cSVParser60.spliterator();
        cSVParser60.close();
        cSVPrinter33.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser60);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
        org.junit.Assert.assertNotNull(appendable30);
        org.junit.Assert.assertNotNull(cSVPrinter31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertTrue("'" + predefined34 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined34.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVParser60);
        org.junit.Assert.assertNull(strMap61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator63);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('4');
        java.lang.String[] strArray5 = cSVFormat4.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withTrim(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withHeader(resultSet11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        boolean boolean6 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat2.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat2.withNullString("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat2.withAllowDuplicateHeaderNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (short) 0, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        boolean boolean17 = cSVFormat4.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withAllowMissingColumnNames(true);
        java.lang.String str21 = cSVFormat18.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\r\n" + "'", str21, "\r\n");
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("\t");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setEscape('4');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) '\"');
        boolean boolean9 = cSVFormat6.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat6.withEscape((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentMarker((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setHeader(resultSetMetaData10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setEscape((java.lang.Character) 'a');
        java.sql.ResultSetMetaData resultSetMetaData16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setHeader(resultSetMetaData16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        java.lang.Appendable appendable7 = cSVPrinter5.getOut();
        cSVPrinter5.close(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder13.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withSystemRecordSeparator();
        boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder37.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray53 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat47.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat46.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder41.setHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat32.withHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat29.withHeaderComments((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder13.setHeader(strArray53);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray53);
        cSVPrinter5.flush();
        cSVPrinter5.close(true);
        cSVPrinter5.close(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable7);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        boolean boolean17 = cSVFormat7.isCommentMarkerSet();
        boolean boolean18 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        java.lang.String str20 = cSVFormat7.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet4);
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withAllowMissingColumnNames(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:true");
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("Delimiter=<\t> Escape=< > QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray24 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat18.withHeader(strArray24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat17.withHeader(strArray24);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat17.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat17.withSkipHeaderRecord(true);
        java.lang.String str31 = cSVFormat30.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.close(true);
        cSVPrinter5.printComment("\r\n");
        java.lang.Appendable appendable10 = cSVPrinter5.getOut();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat15);
        java.lang.String str17 = cSVParser16.getFirstEndOfLine();
        boolean boolean18 = cSVParser16.hasHeaderComment();
        cSVParser16.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream20 = cSVParser16.stream();
        java.lang.String str21 = cSVParser16.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser16.spliterator();
        long long23 = cSVParser16.getRecordNumber();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser16);
        java.util.Map<java.lang.String, java.lang.Integer> strMap25 = cSVParser16.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser16.getHeaderMap();
        cSVParser16.close();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable10);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNull(strMap26);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        boolean boolean8 = cSVFormat7.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuote('\t');
        boolean boolean3 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withSystemRecordSeparator();
        boolean boolean27 = cSVFormat26.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined43.getFormat();
        java.lang.String str45 = cSVFormat44.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray54 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat48.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat47.withHeader(strArray54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder42.setHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat33.withHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat30.withHeaderComments((java.lang.Object[]) strArray54);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode60 = cSVFormat59.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder16.setDuplicateHeaderMode(duplicateHeaderMode60);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder9.setDuplicateHeaderMode(duplicateHeaderMode60);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode60 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode60.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        java.lang.String str5 = cSVFormat4.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode12 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withQuoteMode(quoteMode12);
        boolean boolean15 = cSVFormat14.isCommentMarkerSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + quoteMode12 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode12.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat3.printer();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreHeaderCase(true);
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder7.setHeaderComments(strArray12);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setIgnoreHeaderCase(true);
        java.lang.String[] strArray20 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder15.setHeaderComments(strArray20);
        cSVPrinter6.print((java.lang.Object) builder21);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.Character char25 = cSVFormat24.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder26 = cSVFormat24.builder();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setHeader(resultSetMetaData31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setEscape('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData43 = null;
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setHeader(resultSetMetaData43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setEscape('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str61 = cSVFormat60.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder62 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat60);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder64.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder64.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined69 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat70 = predefined69.getFormat();
        java.lang.String str71 = cSVFormat70.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat70.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat74 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray80 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat74.withHeader(strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat73.withHeader(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder68.setHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat59.withHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat56.withHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder44.setHeaderComments((java.lang.Object[]) strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder87 = builder34.setHeader(strArray80);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray80);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + predefined69 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined69.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withNullString("\t");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setTrim(true);
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setHeader(resultSetMetaData12);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str25 = cSVFormat24.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode30 = cSVFormat29.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder23.setDuplicateHeaderMode(duplicateHeaderMode30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder13.setDuplicateHeaderMode(duplicateHeaderMode30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder13.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setDelimiter("INVALID []");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setIgnoreEmptyLines(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "," + "'", str25, ",");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode30 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode30.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("\n");
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray20 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat13.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder8.setHeaderComments((java.lang.Object[]) strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setNullString("\r\n");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withNullString("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setHeader(resultSetMetaData14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setRecordSeparator("\\N");
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray24 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat18.withHeader(strArray24);
        boolean boolean26 = cSVFormat25.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat25.builder();
        char char28 = cSVFormat25.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat25.withAutoFlush(false);
        org.apache.commons.csv.QuoteMode quoteMode31 = cSVFormat25.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder15.setQuoteMode(quoteMode31);
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat6.withQuoteMode(quoteMode31);
        boolean boolean34 = cSVFormat33.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + ',' + "'", char28 == ',');
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + quoteMode31 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode31.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withRecordSeparator('#');
        java.lang.String[] strArray13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withHeader(strArray13);
        java.io.File file15 = null;
        java.nio.charset.Charset charset16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat12.print(file15, charset16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        char char4 = cSVFormat2.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.Character char12 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        java.lang.Appendable appendable16 = cSVPrinter15.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat6.print(appendable16);
        cSVFormat2.println(appendable16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '|');
        char char22 = cSVFormat19.getDelimiter();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t');
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(appendable16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + '\t' + "'", char22 == '\t');
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(resultSet5);
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withSkipHeaderRecord();
        boolean boolean9 = cSVFormat6.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        boolean boolean83 = cSVFormat7.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat7.withEscape('4');
        boolean boolean86 = cSVFormat85.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat85.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode89 = cSVFormat88.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode89 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode89.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode14 = cSVFormat10.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withSkipHeaderRecord(true);
        boolean boolean17 = cSVFormat5.equals((java.lang.Object) cSVFormat16);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat5.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat19.withIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quoteMode14 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode14.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
        cSVPrinter1.print((java.lang.Object) cSVFormat10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withAllowDuplicateHeaderNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray14 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withHeader(strArray14);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder7.setHeader(strArray14);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder7.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder7.build();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        boolean boolean5 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withCommentMarker(' ');
        java.lang.Character char8 = cSVFormat0.getCommentMarker();
        java.lang.String str9 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat0.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "," + "'", str9, ",");
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('4');
        java.lang.String str4 = cSVFormat3.getNullString();
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) '|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        java.lang.String str15 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat22 = predefined21.getFormat();
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withQuote('a');
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, cSVFormat20, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withHeaderComments(objArray26);
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.String str30 = cSVFormat29.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass32 = cSVFormat31.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat34.withSystemRecordSeparator();
        boolean boolean39 = cSVFormat38.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.Character char44 = cSVFormat43.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode47 = cSVFormat43.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat43.withSkipHeaderRecord(true);
        boolean boolean50 = cSVFormat38.equals((java.lang.Object) cSVFormat49);
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        java.lang.Character char53 = cSVFormat52.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter56 = cSVFormat55.printer();
        cSVPrinter56.flush();
        java.lang.Appendable appendable58 = cSVPrinter56.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter59 = cSVFormat49.print(appendable58);
        cSVFormat27.print((java.lang.Object) cSVFormat31, appendable58, true);
        cSVFormat7.println(appendable58);
        java.lang.String str63 = cSVFormat7.getDelimiterString();
        boolean boolean64 = cSVFormat7.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + quoteMode47 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode47.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(char53);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVPrinter56);
        org.junit.Assert.assertNotNull(appendable58);
        org.junit.Assert.assertNotNull(cSVPrinter59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "," + "'", str63, ",");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.apache.commons.csv.Token token0 = new org.apache.commons.csv.Token();
        java.lang.String str1 = token0.toString();
        java.lang.String str2 = token0.toString();
        java.lang.String str3 = token0.toString();
        java.lang.String str4 = token0.toString();
        java.lang.String str5 = token0.toString();
        java.lang.String str6 = token0.toString();
        java.lang.String str7 = token0.toString();
        java.lang.String str8 = token0.toString();
        java.lang.String str9 = token0.toString();
        java.lang.String str10 = token0.toString();
        java.lang.String str11 = token0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "INVALID []" + "'", str1, "INVALID []");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "INVALID []" + "'", str2, "INVALID []");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "INVALID []" + "'", str3, "INVALID []");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "INVALID []" + "'", str4, "INVALID []");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "INVALID []" + "'", str5, "INVALID []");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "INVALID []" + "'", str6, "INVALID []");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "INVALID []" + "'", str7, "INVALID []");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "INVALID []" + "'", str9, "INVALID []");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "INVALID []" + "'", str10, "INVALID []");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "INVALID []" + "'", str11, "INVALID []");
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str8 = cSVFormat7.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode13 = cSVFormat12.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setDuplicateHeaderMode(duplicateHeaderMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setCommentMarker('\t');
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        boolean boolean32 = cSVFormat31.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.Character char38 = cSVFormat37.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder39 = cSVFormat37.builder();
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder39.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder39.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.String str48 = cSVFormat47.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat47.withSystemRecordSeparator();
        boolean boolean52 = cSVFormat51.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat51.withSystemRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str60 = cSVFormat59.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder61 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat59);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder63.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat69 = predefined68.getFormat();
        java.lang.String str70 = cSVFormat69.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat69.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat73 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray79 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat73.withHeader(strArray79);
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat72.withHeader(strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder67.setHeaderComments((java.lang.Object[]) strArray79);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat58.withHeaderComments((java.lang.Object[]) strArray79);
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat55.withHeaderComments((java.lang.Object[]) strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder85 = builder39.setHeader(strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder33.setHeaderComments(strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder87 = builder27.setHeaderComments((java.lang.Object[]) strArray79);
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder14.setHeaderComments(strArray79);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "," + "'", str8, ",");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode13 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode13.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        cSVPrinter6.flush();
        java.lang.Appendable appendable8 = cSVPrinter6.getOut();
        cSVFormat0.println(appendable8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat0.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat11.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat14.withAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withTrailingDelimiter(true);
        org.apache.commons.csv.QuoteMode quoteMode18 = cSVFormat15.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat10.withQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat10.withTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(appendable8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + quoteMode18 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode18.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        cSVParser3.close();
        cSVParser3.close();
        cSVParser3.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setHeader(resultSet5);
        java.lang.String[] strArray7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setHeaderComments(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        boolean boolean17 = cSVFormat7.isCommentMarkerSet();
        boolean boolean18 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        java.lang.Character char20 = cSVFormat7.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(char20);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        java.lang.Character char10 = cSVFormat9.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        cSVPrinter13.flush();
        java.lang.Appendable appendable15 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat7.print(appendable15);
        boolean boolean17 = cSVFormat7.isCommentMarkerSet();
        boolean boolean18 = cSVFormat7.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(appendable15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat2.printer();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, 1L, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        java.lang.Object[] objArray15 = new java.lang.Object[] { true, cSVFormat9, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat3.withHeaderComments(objArray15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat3.withIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withCommentMarker(',');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withTrim();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withNullString("Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormat24);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withSkipHeaderRecord();
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withHeader(resultSet11);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        boolean boolean10 = cSVFormat8.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder13 = cSVFormat8.builder();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withIgnoreHeaderCase(true);
        boolean boolean16 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        java.lang.Character char19 = cSVFormat18.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.String str33 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withQuote('a');
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, cSVFormat30, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat24.withHeaderComments(objArray36);
        cSVPrinter22.printRecord(objArray36);
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder41 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat39);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder43.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat49 = predefined48.getFormat();
        java.lang.Character char50 = cSVFormat49.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder51 = cSVFormat49.builder();
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder55.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData58 = null;
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder57.setHeader(resultSetMetaData58);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Predefined predefined62 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat63 = predefined62.getFormat();
        java.lang.Character char64 = cSVFormat63.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder65 = cSVFormat63.builder();
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray76 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat70.withHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder69.setHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder59.setHeader(strArray76);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder43.setHeader(strArray76);
        cSVPrinter22.printRecord((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat15.withHeaderComments((java.lang.Object[]) strArray76);
        org.apache.commons.csv.CSVParser cSVParser83 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(char50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + predefined62 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined62.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVParser83);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.String str2 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator("");
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str3 = cSVFormat2.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
        java.lang.Character char9 = cSVFormat5.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withIgnoreSurroundingSpaces(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(char9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray20 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat13.withHeader(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder8.setHeaderComments((java.lang.Object[]) strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder25.setEscape((java.lang.Character) '|');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser3.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = builder13.build();
        boolean boolean17 = cSVFormat16.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat24 = builder21.build();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean27 = cSVFormat26.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray34 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat26.withHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder21.setHeaderComments((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat18.withHeader(strArray34);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode39 = cSVFormat38.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder6.setDuplicateHeaderMode(duplicateHeaderMode39);
        java.lang.Class<?> wildcardClass41 = builder6.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode39 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode39.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        java.lang.Character char28 = cSVFormat27.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder29 = cSVFormat27.builder();
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setHeader(resultSetMetaData34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.String str47 = cSVFormat46.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray56 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat50.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat49.withHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder44.setHeaderComments((java.lang.Object[]) strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder31.setHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder23.setHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder11.setHeader(strArray56);
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat1.withHeader(strArray56);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVFormat63);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.String str11 = cSVFormat10.getNullString();
        java.lang.String str12 = cSVFormat10.toString();
        boolean boolean13 = cSVFormat10.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.Character char16 = cSVFormat15.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat15.builder();
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat10.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat10.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.String str37 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withQuote('a');
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, cSVFormat34, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat28.withHeaderComments(objArray40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        java.lang.String str44 = cSVFormat43.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass46 = cSVFormat45.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withSystemRecordSeparator();
        boolean boolean53 = cSVFormat52.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.Character char58 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat57.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withSkipHeaderRecord(true);
        boolean boolean64 = cSVFormat52.equals((java.lang.Object) cSVFormat63);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        cSVPrinter70.flush();
        java.lang.Appendable appendable72 = cSVPrinter70.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat63.print(appendable72);
        cSVFormat41.print((java.lang.Object) cSVFormat45, appendable72, true);
        cSVFormat7.print((java.lang.Object) '\t', appendable72, true);
        java.lang.String str78 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat7.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat7.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat7.withIgnoreSurroundingSpaces();
        boolean boolean83 = cSVFormat7.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat7.withEscape('4');
        boolean boolean86 = cSVFormat85.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat85.withIgnoreSurroundingSpaces(false);
        boolean boolean89 = cSVFormat88.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(char58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertNotNull(appendable72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n" + "'", str78, "\n");
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(cSVFormat88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser3.iterator();
        boolean boolean10 = cSVParser3.hasTrailerComment();
        boolean boolean11 = cSVParser3.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat5);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser7.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator8);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSystemRecordSeparator();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withHeader(resultSet7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = cSVFormat6.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode15 = cSVFormat7.getDuplicateHeaderMode();
        java.lang.String[] strArray16 = cSVFormat7.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat7.withEscape((java.lang.Character) 'a');
        java.lang.String str19 = cSVFormat7.toString();
        boolean boolean20 = cSVFormat7.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode15 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode15.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]" + "'", str19, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false Header:[,, hi!, ,, hi!, ,]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withHeader(resultSet16);
        java.lang.String str18 = cSVFormat1.toString();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        java.lang.Character char21 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat23.printer();
        cSVPrinter24.flush();
        java.lang.Appendable appendable26 = cSVPrinter24.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat29);
        java.lang.String str31 = cSVParser30.getFirstEndOfLine();
        boolean boolean32 = cSVParser30.hasHeaderComment();
        cSVParser30.close();
        cSVParser30.close();
        java.lang.String str35 = cSVParser30.getFirstEndOfLine();
        cSVPrinter24.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser30);
        java.lang.Appendable appendable37 = cSVPrinter24.getOut();
        cSVFormat1.println(appendable37);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str18, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(appendable26);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(appendable37);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.Character char4 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat3.getQuoteMode();
        java.lang.Character char6 = cSVFormat3.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withAllowMissingColumnNames(false);
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat3.withHeader(resultSetMetaData11);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("a");
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuote((java.lang.Character) '\\');
        java.lang.Character char7 = cSVFormat0.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        java.lang.String str3 = cSVFormat1.toString();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        java.lang.Character char7 = cSVFormat6.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat6.builder();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat1.withHeader(resultSet16);
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode22 = null;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat23.withSystemRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        long long16 = cSVParser10.getRecordNumber();
        java.lang.String str17 = cSVParser10.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser10.iterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser10.getRecords();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = cSVParser10.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordItor18);
        org.junit.Assert.assertNotNull(cSVRecordList19);
        org.junit.Assert.assertNull(strMap20);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuote('\\');
        java.nio.file.Path path11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat8.print(path11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder11.setQuote((java.lang.Character) '\\');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.sql.ResultSet resultSet1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet1);
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        boolean boolean4 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        java.lang.String str8 = cSVFormat7.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        java.lang.String str16 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withQuote('a');
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, cSVFormat13, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat7.withHeaderComments(objArray19);
        cSVPrinter5.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str23 = cSVFormat22.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        java.lang.Character char33 = cSVFormat32.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat32.builder();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder34.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("a");
        java.sql.ResultSetMetaData resultSetMetaData41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setHeader(resultSetMetaData41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setDelimiter("\t");
        org.apache.commons.csv.CSVFormat.Predefined predefined45 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat46 = predefined45.getFormat();
        java.lang.Character char47 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder48 = cSVFormat46.builder();
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray59 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withHeader(strArray59);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder52.setHeader(strArray59);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder42.setHeader(strArray59);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder26.setHeader(strArray59);
        cSVPrinter5.printRecord((java.lang.Object[]) strArray59);
        org.apache.commons.csv.CSVFormat.Predefined predefined65 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat66 = predefined65.getFormat();
        java.lang.Character char67 = cSVFormat66.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat69.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined71 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat72 = predefined71.getFormat();
        java.lang.String str73 = cSVFormat72.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat72.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined77 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat78 = predefined77.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined79 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat80 = predefined79.getFormat();
        java.lang.String str81 = cSVFormat80.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat80.withQuote('a');
        java.lang.Object[] objArray84 = new java.lang.Object[] { true, cSVFormat78, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat72.withHeaderComments(objArray84);
        cSVPrinter70.printRecord(objArray84);
        org.apache.commons.csv.CSVFormat.Predefined predefined88 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat89 = predefined88.getFormat();
        org.apache.commons.csv.CSVParser cSVParser90 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat89);
        java.lang.String str91 = cSVParser90.getFirstEndOfLine();
        boolean boolean92 = cSVParser90.hasHeaderComment();
        cSVParser90.close();
        cSVParser90.close();
        cSVPrinter70.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser90);
        boolean boolean96 = cSVParser90.hasTrailerComment();
        boolean boolean97 = cSVParser90.hasTrailerComment();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser90);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + predefined45 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined45.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(char47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + predefined65 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined65.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVPrinter70);
        org.junit.Assert.assertTrue("'" + predefined71 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined71.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertTrue("'" + predefined77 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined77.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertTrue("'" + predefined79 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined79.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertTrue("'" + predefined88 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined88.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat89);
        org.junit.Assert.assertNotNull(cSVParser90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat8);
        char char10 = cSVFormat8.getDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat20.printer();
        java.lang.Appendable appendable22 = cSVPrinter21.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat12.print(appendable22);
        cSVFormat8.println(appendable22);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        java.lang.Character char27 = cSVFormat26.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        cSVPrinter30.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str34 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder35.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        java.lang.Character char42 = cSVFormat41.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = cSVFormat44.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat47 = predefined46.getFormat();
        java.lang.String str48 = cSVFormat47.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined52 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat53 = predefined52.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat55 = predefined54.getFormat();
        java.lang.String str56 = cSVFormat55.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat55.withQuote('a');
        java.lang.Object[] objArray59 = new java.lang.Object[] { true, cSVFormat53, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat47.withHeaderComments(objArray59);
        cSVPrinter45.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder35.setHeaderComments(objArray59);
        cSVPrinter30.printRecord(objArray59);
        cSVFormat5.printRecord(appendable22, objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str66 = cSVFormat65.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder67 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat65);
        org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat65.withCommentMarker('4');
        java.sql.ResultSet resultSet70 = null;
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withHeader(resultSet70);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = new org.apache.commons.csv.CSVPrinter(appendable22, cSVFormat71);
        org.apache.commons.csv.CSVFormat.Predefined predefined73 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat74 = predefined73.getFormat();
        boolean boolean75 = cSVFormat74.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined76 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat77 = predefined76.getFormat();
        java.lang.String str78 = cSVFormat77.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat77.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat80.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat82.withQuote((java.lang.Character) '\"');
        org.apache.commons.csv.QuoteMode quoteMode85 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat84.withQuoteMode(quoteMode85);
        org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat74.withQuoteMode(quoteMode85);
        org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat71.withQuoteMode(quoteMode85);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\t' + "'", char10 == '\t');
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(appendable22);
        org.junit.Assert.assertNotNull(cSVPrinter23);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(char27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVPrinter45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + predefined52 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined52.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertTrue("'" + predefined73 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined73.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + predefined76 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined76.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertTrue("'" + quoteMode85 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode85.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertNotNull(cSVFormat88);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.sql.ResultSet resultSet4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withSystemRecordSeparator();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape(' ');
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray7 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withHeader(strArray7);
        boolean boolean9 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator("\\N");
        java.sql.ResultSet resultSet12 = null;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withHeader(resultSet12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat13.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Predefined predefined15 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat16 = predefined15.getFormat();
        java.lang.Character char17 = cSVFormat16.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode20 = cSVFormat16.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str25 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined33 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined33.getFormat();
        java.lang.String str35 = cSVFormat34.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray44 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder32.setHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat23.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat16.withHeaderComments((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat14.withHeader(strArray44);
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        boolean boolean52 = cSVFormat14.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined15 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined15.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + quoteMode20 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode20.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + predefined33 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined33.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        cSVPrinter5.flush();
        cSVPrinter5.close(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat11);
        java.lang.String str13 = cSVParser12.getFirstEndOfLine();
        boolean boolean14 = cSVParser12.hasHeaderComment();
        cSVParser12.close();
        cSVParser12.close();
        java.lang.String str17 = cSVParser12.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords();
        cSVPrinter5.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.String str22 = cSVFormat21.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withAllowMissingColumnNames();
        cSVPrinter5.print((java.lang.Object) cSVFormat21);
        cSVPrinter5.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat28);
        java.lang.String str30 = cSVParser29.getFirstEndOfLine();
        boolean boolean31 = cSVParser29.hasHeaderComment();
        cSVParser29.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream33 = cSVParser29.stream();
        java.lang.String str34 = cSVParser29.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator35 = cSVParser29.spliterator();
        long long36 = cSVParser29.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor37 = cSVParser29.iterator();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser29);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVRecordList18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor37);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        java.lang.Appendable appendable6 = cSVPrinter5.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat9);
        java.lang.String str11 = cSVParser10.getFirstEndOfLine();
        boolean boolean12 = cSVParser10.hasHeaderComment();
        cSVParser10.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser10.getHeaderMap();
        cSVPrinter5.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser10);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream16 = cSVParser10.stream();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser10.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream18 = cSVParser10.stream();
        long long19 = cSVParser10.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(appendable6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNotNull(cSVRecordStream16);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertNotNull(cSVRecordStream18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat0.builder();
        boolean boolean9 = cSVFormat0.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean2 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("Delimiter=<\t> Escape=<\\> QuoteMode=<ALL_NON_NULL> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat5.getQuoteMode();
        java.lang.String[] strArray7 = cSVFormat5.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(quoteMode6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray8 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withHeader(strArray8);
        boolean boolean10 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.getNullString();
        java.lang.String str14 = cSVFormat12.toString();
        boolean boolean15 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.Character char18 = cSVFormat17.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat17.builder();
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setSkipHeaderRecord(false);
        boolean boolean26 = cSVFormat12.equals((java.lang.Object) false);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat12.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat30 = predefined29.getFormat();
        java.lang.String str31 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        java.lang.String str39 = cSVFormat38.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuote('a');
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, cSVFormat36, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat30.withHeaderComments(objArray42);
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        java.lang.String str46 = cSVFormat45.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat45.withAllowMissingColumnNames();
        java.lang.Class<?> wildcardClass48 = cSVFormat47.getClass();
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        java.lang.String str51 = cSVFormat50.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat50.withSystemRecordSeparator();
        boolean boolean55 = cSVFormat54.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat59 = predefined58.getFormat();
        java.lang.Character char60 = cSVFormat59.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode63 = cSVFormat59.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat59.withSkipHeaderRecord(true);
        boolean boolean66 = cSVFormat54.equals((java.lang.Object) cSVFormat65);
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        java.lang.Character char69 = cSVFormat68.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat71.printer();
        cSVPrinter72.flush();
        java.lang.Appendable appendable74 = cSVPrinter72.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat65.print(appendable74);
        cSVFormat43.print((java.lang.Object) cSVFormat47, appendable74, true);
        cSVFormat9.print((java.lang.Object) '\t', appendable74, true);
        java.lang.String str80 = cSVFormat9.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat9.withTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat9.withRecordSeparator(',');
        org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat9.withIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat9.withIgnoreEmptyLines();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser86 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str14, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(char60);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + quoteMode63 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode63.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertNotNull(appendable74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\n" + "'", str80, "\n");
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertNotNull(cSVFormat85);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        java.lang.String str12 = cSVFormat11.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat19 = predefined18.getFormat();
        java.lang.String str20 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuote('a');
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, cSVFormat17, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat11.withHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder9.setHeaderComments(objArray23);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder9.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder9.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder9.setAutoFlush(true);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getHeaderComment();
        boolean boolean9 = cSVParser3.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentMarker((java.lang.Character) ' ');
        java.lang.String[] strArray10 = cSVFormat5.getHeaderComments();
        java.lang.String str11 = cSVFormat5.toString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withIgnoreEmptyLines();
        java.lang.String[] strArray13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withHeader(strArray13);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str11, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withCommentMarker('\t');
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat8.parse(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter(',');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        java.lang.Character char11 = cSVFormat10.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat13.printer();
        cSVPrinter14.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str18 = cSVFormat17.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setAllowDuplicateHeaderNames(false);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat25 = predefined24.getFormat();
        java.lang.Character char26 = cSVFormat25.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = cSVFormat28.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        java.lang.String str32 = cSVFormat31.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withQuote('a');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined38.getFormat();
        java.lang.String str40 = cSVFormat39.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withQuote('a');
        java.lang.Object[] objArray43 = new java.lang.Object[] { true, cSVFormat37, 'a' };
        org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat31.withHeaderComments(objArray43);
        cSVPrinter29.printRecord(objArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder19.setHeaderComments(objArray43);
        cSVPrinter14.printRecord(objArray43);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder8.setHeaderComments(objArray43);
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str50 = cSVFormat49.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat52.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat52.printer();
        org.apache.commons.csv.CSVFormat.Builder builder56 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setIgnoreHeaderCase(true);
        java.lang.String[] strArray61 = new java.lang.String[] { "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder56.setHeaderComments(strArray61);
        cSVPrinter55.printRecords((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder48.setHeaderComments((java.lang.Object[]) strArray61);
        org.apache.commons.csv.CSVFormat cSVFormat65 = builder64.build();
        org.apache.commons.csv.CSVFormat cSVFormat66 = builder64.build();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(char26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVPrinter29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[true, Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false, a]");
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "," + "'", str50, ",");
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNotNull(cSVFormat66);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentMarker((java.lang.Character) ' ');
        java.lang.String[] strArray10 = cSVFormat5.getHeaderComments();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withCommentMarker('#');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat5.withTrim();
        boolean boolean16 = cSVFormat15.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        java.lang.String str10 = cSVParser3.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream11 = cSVParser3.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(cSVRecordStream11);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withQuote('\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.printer();
        cSVPrinter6.printComment("\n");
        cSVPrinter6.close();
        cSVPrinter6.flush();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.Character char13 = cSVFormat12.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat12.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder14.setIgnoreEmptyLines(false);
        org.apache.commons.csv.QuoteMode quoteMode23 = org.apache.commons.csv.QuoteMode.ALL;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray33 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withHeader(strArray33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        java.lang.Character char37 = cSVFormat36.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat36.builder();
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.Character char49 = cSVFormat48.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder50 = cSVFormat48.builder();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder52.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData55 = null;
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder52.setHeader(resultSetMetaData55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str58 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder59 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder61.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat67 = predefined66.getFormat();
        java.lang.String str68 = cSVFormat67.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray77 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat71.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat70.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder80 = builder65.setHeaderComments((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder52.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder44.setHeader(strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat34.withHeader(strArray77);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder22.setHeader(strArray77);
        cSVPrinter6.printRecords((java.lang.Object[]) strArray77);
        org.apache.commons.csv.CSVFormat cSVFormat87 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean88 = cSVFormat87.isCommentMarkerSet();
        boolean boolean89 = cSVFormat87.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat87.withAllowDuplicateHeaderNames(true);
        org.apache.commons.csv.CSVParser cSVParser92 = org.apache.commons.csv.CSVParser.parse("\\N", cSVFormat87);
        cSVPrinter6.print((java.lang.Object) cSVFormat87);
        java.sql.ResultSet resultSet94 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printRecords(resultSet94, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + quoteMode23 + "' != '" + org.apache.commons.csv.QuoteMode.ALL + "'", quoteMode23.equals(org.apache.commons.csv.QuoteMode.ALL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(cSVFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(cSVFormat91);
        org.junit.Assert.assertNotNull(cSVParser92);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat4.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray12 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withHeader(strArray12);
        boolean boolean14 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat13.builder();
        boolean boolean16 = cSVFormat4.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat4.withTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat18.withAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withEscape('4');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat21.withFirstRecordAsHeader();
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        java.lang.Character char30 = cSVFormat29.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        cSVPrinter33.flush();
        java.lang.Appendable appendable35 = cSVPrinter33.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat27.print(appendable35);
        cSVFormat18.println(appendable35);
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat18.withDelimiter('#');
        org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withRecordSeparator("");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(char30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(appendable35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormat41);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = builder2.build();
        java.lang.Character char6 = cSVFormat5.getCommentMarker();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withRecordSeparator(',');
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat10.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(quoteMode11);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder2.build();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        java.lang.Character char14 = cSVFormat13.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withSkipHeaderRecord(false);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        java.lang.Appendable appendable18 = cSVPrinter17.getOut();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat21);
        java.lang.String str23 = cSVParser22.getFirstEndOfLine();
        boolean boolean24 = cSVParser22.hasHeaderComment();
        cSVParser22.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = cSVParser22.getHeaderMap();
        cSVPrinter17.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser22);
        long long28 = cSVParser22.getRecordNumber();
        boolean boolean29 = cSVFormat11.equals((java.lang.Object) long28);
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat11.printer();
        java.lang.String str31 = cSVFormat11.getRecordSeparator();
        java.lang.Appendable appendable33 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat11.print((java.lang.Object) (byte) -1, appendable33, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertNotNull(appendable18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withHeader(resultSet9);
        java.lang.String str11 = cSVFormat7.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat7.builder();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withQuote('|');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withCommentMarker(' ');
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuote('|');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        java.lang.String str4 = cSVParser3.getFirstEndOfLine();
        boolean boolean5 = cSVParser3.hasHeaderComment();
        cSVParser3.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap();
        java.lang.String str8 = cSVParser3.getFirstEndOfLine();
        java.util.List<java.lang.String> strList9 = cSVParser3.getHeaderNames();
        java.lang.String str10 = cSVParser3.getTrailerComment();
        java.lang.String str11 = cSVParser3.getFirstEndOfLine();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser3.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray9 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withHeader(strArray9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withHeaderComments((java.lang.Object[]) strArray9);
        boolean boolean12 = cSVFormat1.isCommentMarkerSet();
        java.lang.String str13 = cSVFormat1.toString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Delimiter=<\"> SkipHeaderRecord:false" + "'", str13, "Delimiter=<\"> SkipHeaderRecord:false");
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String str1 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAutoFlush(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withEscape(' ');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withSystemRecordSeparator();
        boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat5.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentMarker((java.lang.Character) ' ');
        java.lang.String[] strArray10 = cSVFormat5.getHeaderComments();
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withHeader(resultSet11);
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withHeader(resultSetMetaData13);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat8.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
        cSVPrinter1.print((java.lang.Object) cSVFormat10);
        java.sql.ResultSet resultSet12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter1.printRecords(resultSet12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('a');
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentMarker((java.lang.Character) '|');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withAllowDuplicateHeaderNames();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withAllowMissingColumnNames(true);
        java.lang.String str8 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withTrailingDelimiter(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVFormat10);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.String[] strArray6 = new java.lang.String[] { ",", "hi!", ",", "hi!", "," };
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withHeader(strArray6);
        boolean boolean8 = cSVFormat7.getTrim();
        boolean boolean9 = cSVFormat7.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withTrim(false);
        java.sql.ResultSet resultSet16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withHeader(resultSet16);
        org.apache.commons.csv.QuoteMode quoteMode18 = org.apache.commons.csv.QuoteMode.ALL_NON_NULL;
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.lang.String[] strArray21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setHeader(strArray21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setQuote((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + quoteMode18 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode18.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.Character char3 = cSVFormat2.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('a');
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat2.getQuoteMode();
        boolean boolean7 = cSVFormat2.getAllowDuplicateHeaderNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat2.printer();
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withAllowMissingColumnNames();
        java.lang.String str10 = cSVFormat9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9, (long) (short) 0, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + quoteMode6 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode6.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }
}

