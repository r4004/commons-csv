/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 22 11:11:50 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.List;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "[b", (-1L), (-2539L));
      boolean boolean0 = cSVRecord0.isSet(2);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals((-2539L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("c8", cSVFormat0);
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "c8", (-1537L), 0L);
      boolean boolean0 = cSVRecord0.isSet(0);
      assertTrue(boolean0);
      assertEquals((-1537L), cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "]", 0L, 0L);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "i:mQHc(+?#-;&3f8xl", 0L, 0L);
      List<String> list0 = cSVRecord0.toList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "i:mQHc(+?#-;&3f8xl", 0L, 0L);
      int int0 = cSVRecord0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "_G`)8", 0L, 0L);
      HashMap<String, String> hashMap0 = cSVRecord0.putIn((HashMap<String, String>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "]", 0L, 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("The comment start character and the delimiter cannot be the same ('", "No header mapping was specified, the record values can't be accessed by name");
      HashMap<String, String> hashMap1 = cSVRecord0.putIn(hashMap0);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("', recordNumber=", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.iterator();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "]", 0L, 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "[b", (-1L), (-2539L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-1L), long0);
      assertEquals((-2539L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "]", 0L, 0L);
      CSVParser cSVParser1 = cSVRecord0.getParser();
      assertSame(cSVParser1, cSVParser0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("M8SZ$", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getParser();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("', recordNumber=", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 946L, (-1601L));
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 2324L, 692L);
      cSVRecord0.getComment();
      assertEquals(2324L, cSVRecord0.getRecordNumber());
      assertEquals(692L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "CSVRecord [comment='", 0L, (-1179L));
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(0L, cSVRecord0.getRecordNumber());
      assertEquals((-1179L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 946L, (-1601L));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 2324L, 692L);
      cSVRecord0.get(0);
      assertEquals(692L, cSVRecord0.getCharacterPosition());
      assertEquals(2324L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, ", values=", 1L, 1L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((-1541));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1541
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse(", values=", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("U)7_Ge(bP8jM'8kx");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.isMapped("");
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-873L), 5957L);
      cSVRecord0.stream();
      assertEquals(5957L, cSVRecord0.getCharacterPosition());
      assertEquals((-873L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-873L), 5957L);
      cSVRecord0.toList();
      assertEquals((-873L), cSVRecord0.getRecordNumber());
      assertEquals(5957L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-873L), 5957L);
      boolean boolean0 = cSVRecord0.isSet(2662);
      assertEquals(5957L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
      assertEquals((-873L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", 486L, 486L);
      boolean boolean0 = cSVRecord0.isSet((-1987));
      assertEquals(486L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(486L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-873L), 5957L);
      boolean boolean0 = cSVRecord0.isSet("");
      assertFalse(boolean0);
      assertEquals(5957L, cSVRecord0.getCharacterPosition());
      assertEquals((-873L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-873L), 5957L);
      boolean boolean0 = cSVRecord0.hasComment();
      assertTrue(boolean0);
      assertEquals(5957L, cSVRecord0.getCharacterPosition());
      assertEquals((-873L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse(", values=", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-873L), 5957L);
      cSVRecord0.toMap();
      assertEquals(5957L, cSVRecord0.getCharacterPosition());
      assertEquals((-873L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "]", 0L, 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("The comment start character and the delimiter cannot be the same ('");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "\"vp9L", 3022L, (-2344L));
      assertEquals(3022L, cSVRecord0.getRecordNumber());
      assertEquals((-2344L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", 0L, 295L);
      cSVRecord0.size();
      assertEquals(0L, cSVRecord0.getRecordNumber());
      assertEquals(295L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", 486L, 486L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(486L, cSVRecord0.getCharacterPosition());
      assertEquals(486L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", 486L, 486L);
      cSVRecord0.getParser();
      assertEquals(486L, cSVRecord0.getRecordNumber());
      assertEquals(486L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals(1, cSVRecord0.size());
      
      cSVRecord0.get(0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "i:mQxc(+?#-;&3f8xl", 0L, 0L);
      String[] stringArray1 = cSVRecord0.values();
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      String string0 = cSVRecord0.toString();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals("CSVRecord [comment='null', recordNumber=1, values=[]]]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", 486L, 486L);
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(486L, long0);
      assertEquals(3, cSVRecord0.size());
      assertEquals(486L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "i:mQxc(+?#-;&3f8xl", 0L, 0L);
      String string0 = cSVRecord0.getComment();
      assertEquals("i:mQxc(+?#-;&3f8xl", string0);
  }
}
